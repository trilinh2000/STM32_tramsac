
STM32-readvolt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ebc  080001f0  080001f0  000011f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  080080ac  080080ac  000090ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008258  08008258  0000a014  2**0
                  CONTENTS
  4 .ARM          00000000  08008258  08008258  0000a014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008258  08008258  0000a014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008258  08008258  00009258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800825c  0800825c  0000925c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08008260  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000191c  20000014  08008274  0000a014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001930  08008274  0000a930  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018499  00000000  00000000  0000a03d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000379c  00000000  00000000  000224d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a0  00000000  00000000  00025c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001020  00000000  00000000  00027118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002f4e  00000000  00000000  00028138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018e9c  00000000  00000000  0002b086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3a10  00000000  00000000  00043f22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e7932  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005668  00000000  00000000  000e7978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000ecfe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000014 	.word	0x20000014
 800020c:	00000000 	.word	0x00000000
 8000210:	08008094 	.word	0x08008094

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000018 	.word	0x20000018
 800022c:	08008094 	.word	0x08008094

08000230 <Program_main>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Program_main(Switch_status status)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
 8000236:	4603      	mov	r3, r0
 8000238:	71fb      	strb	r3, [r7, #7]
	if(status==autoSwitch)
 800023a:	79fb      	ldrb	r3, [r7, #7]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d120      	bne.n	8000282 <Program_main+0x52>
	{
		if(ModbusH.u16regs[0]<2200){
 8000240:	4b18      	ldr	r3, [pc, #96]	@ (80002a4 <Program_main+0x74>)
 8000242:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000246:	881b      	ldrh	r3, [r3, #0]
 8000248:	f640 0297 	movw	r2, #2199	@ 0x897
 800024c:	4293      	cmp	r3, r2
 800024e:	d808      	bhi.n	8000262 <Program_main+0x32>
			HAL_GPIO_WritePin(Y00_GPIO_Port, Y00_Pin, GPIO_PIN_SET);
 8000250:	2201      	movs	r2, #1
 8000252:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000256:	4814      	ldr	r0, [pc, #80]	@ (80002a8 <Program_main+0x78>)
 8000258:	f001 f8b7 	bl	80013ca <HAL_GPIO_WritePin>
			status_led=led_orange;
 800025c:	4b13      	ldr	r3, [pc, #76]	@ (80002ac <Program_main+0x7c>)
 800025e:	2201      	movs	r2, #1
 8000260:	701a      	strb	r2, [r3, #0]
		}
		if(ModbusH.u16regs[0]>2800){
 8000262:	4b10      	ldr	r3, [pc, #64]	@ (80002a4 <Program_main+0x74>)
 8000264:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000268:	881b      	ldrh	r3, [r3, #0]
 800026a:	f5b3 6f2f 	cmp.w	r3, #2800	@ 0xaf0
 800026e:	d908      	bls.n	8000282 <Program_main+0x52>
			HAL_GPIO_WritePin(Y00_GPIO_Port, Y00_Pin, GPIO_PIN_RESET);
 8000270:	2200      	movs	r2, #0
 8000272:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000276:	480c      	ldr	r0, [pc, #48]	@ (80002a8 <Program_main+0x78>)
 8000278:	f001 f8a7 	bl	80013ca <HAL_GPIO_WritePin>
			status_led=led_green;
 800027c:	4b0b      	ldr	r3, [pc, #44]	@ (80002ac <Program_main+0x7c>)
 800027e:	2202      	movs	r2, #2
 8000280:	701a      	strb	r2, [r3, #0]
		}


	}
	if(status==manualSwitch){
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	2b01      	cmp	r3, #1
 8000286:	d108      	bne.n	800029a <Program_main+0x6a>
		HAL_GPIO_WritePin(Y00_GPIO_Port, Y00_Pin, GPIO_PIN_SET);
 8000288:	2201      	movs	r2, #1
 800028a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800028e:	4806      	ldr	r0, [pc, #24]	@ (80002a8 <Program_main+0x78>)
 8000290:	f001 f89b 	bl	80013ca <HAL_GPIO_WritePin>
		status_led=led_orange;
 8000294:	4b05      	ldr	r3, [pc, #20]	@ (80002ac <Program_main+0x7c>)
 8000296:	2201      	movs	r2, #1
 8000298:	701a      	strb	r2, [r3, #0]
	}
}
 800029a:	bf00      	nop
 800029c:	3708      	adds	r7, #8
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	200000e0 	.word	0x200000e0
 80002a8:	40011000 	.word	0x40011000
 80002ac:	20000000 	.word	0x20000000

080002b0 <Program_Running>:
void Program_Running()
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
//	if(HAL_GPIO_ReadPin(X02_GPIO_Port, X02_Pin)==0)
	if(ModbusH2.u16regs[0]==1)
 80002b4:	4b0a      	ldr	r3, [pc, #40]	@ (80002e0 <Program_Running+0x30>)
 80002b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80002ba:	881b      	ldrh	r3, [r3, #0]
 80002bc:	2b01      	cmp	r3, #1
 80002be:	d102      	bne.n	80002c6 <Program_Running+0x16>
	{
		Program_main(autoSwitch);
 80002c0:	2000      	movs	r0, #0
 80002c2:	f7ff ffb5 	bl	8000230 <Program_main>
	}
//	if(HAL_GPIO_ReadPin(X03_GPIO_Port, X03_Pin)==0)
	if(ModbusH2.u16regs[1]==1)
 80002c6:	4b06      	ldr	r3, [pc, #24]	@ (80002e0 <Program_Running+0x30>)
 80002c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80002cc:	3302      	adds	r3, #2
 80002ce:	881b      	ldrh	r3, [r3, #0]
 80002d0:	2b01      	cmp	r3, #1
 80002d2:	d102      	bne.n	80002da <Program_Running+0x2a>
	{
		Program_main(manualSwitch);
 80002d4:	2001      	movs	r0, #1
 80002d6:	f7ff ffab 	bl	8000230 <Program_main>
	}
//	if(HAL_GPIO_ReadPin(X02_GPIO_Port, X02_Pin)==1&&HAL_GPIO_ReadPin(X03_GPIO_Port, X03_Pin)==1)
//	{
//		HAL_GPIO_WritePin(Y00_GPIO_Port, Y00_Pin, GPIO_PIN_RESET);
//	}
}
 80002da:	bf00      	nop
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	20000238 	.word	0x20000238

080002e4 <Program_Stop>:
void Program_Stop()
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Y00_GPIO_Port, Y00_Pin, GPIO_PIN_RESET);
 80002e8:	2200      	movs	r2, #0
 80002ea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80002ee:	4802      	ldr	r0, [pc, #8]	@ (80002f8 <Program_Stop+0x14>)
 80002f0:	f001 f86b 	bl	80013ca <HAL_GPIO_WritePin>
}
 80002f4:	bf00      	nop
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	40011000 	.word	0x40011000

080002fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000300:	f000 fc64 	bl	8000bcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000304:	f000 f888 	bl	8000418 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000308:	f000 f920 	bl	800054c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800030c:	f000 f8f4 	bl	80004f8 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8000310:	f000 f8c8 	bl	80004a4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


  /* Master initialization */
  ModbusH.uModbusType = MB_MASTER;
 8000314:	4b31      	ldr	r3, [pc, #196]	@ (80003dc <main+0xe0>)
 8000316:	2204      	movs	r2, #4
 8000318:	701a      	strb	r2, [r3, #0]
    ModbusH.port =  &huart3;
 800031a:	4b30      	ldr	r3, [pc, #192]	@ (80003dc <main+0xe0>)
 800031c:	4a30      	ldr	r2, [pc, #192]	@ (80003e0 <main+0xe4>)
 800031e:	605a      	str	r2, [r3, #4]
    ModbusH.u8id = 0; // For master it must be 0
 8000320:	4b2e      	ldr	r3, [pc, #184]	@ (80003dc <main+0xe0>)
 8000322:	2200      	movs	r2, #0
 8000324:	721a      	strb	r2, [r3, #8]
    ModbusH.u16timeOut = 1000;
 8000326:	4b2d      	ldr	r3, [pc, #180]	@ (80003dc <main+0xe0>)
 8000328:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800032c:	f8a3 20a2 	strh.w	r2, [r3, #162]	@ 0xa2
    ModbusH.EN_Port = NULL;
 8000330:	4b2a      	ldr	r3, [pc, #168]	@ (80003dc <main+0xe0>)
 8000332:	2200      	movs	r2, #0
 8000334:	60da      	str	r2, [r3, #12]
//    ModbusH.EN_Port = EN_485_GPIO_Port;
//    ModbusH.EN_Pin = EN_485_Pin;
    ModbusH.u16regs = ModbusDATA;
 8000336:	4b29      	ldr	r3, [pc, #164]	@ (80003dc <main+0xe0>)
 8000338:	4a2a      	ldr	r2, [pc, #168]	@ (80003e4 <main+0xe8>)
 800033a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    ModbusH.u16regsize= sizeof(ModbusDATA)/sizeof(ModbusDATA[0]);
 800033e:	4b27      	ldr	r3, [pc, #156]	@ (80003dc <main+0xe0>)
 8000340:	2208      	movs	r2, #8
 8000342:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
    ModbusH.xTypeHW = USART_HW;
 8000346:	4b25      	ldr	r3, [pc, #148]	@ (80003dc <main+0xe0>)
 8000348:	2201      	movs	r2, #1
 800034a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
    //Initialize Modbus library
    ModbusInit(&ModbusH);
 800034e:	4823      	ldr	r0, [pc, #140]	@ (80003dc <main+0xe0>)
 8000350:	f006 fa82 	bl	8006858 <ModbusInit>
    //Start capturing traffic on serial Port
    ModbusStart(&ModbusH);
 8000354:	4821      	ldr	r0, [pc, #132]	@ (80003dc <main+0xe0>)
 8000356:	f006 fb27 	bl	80069a8 <ModbusStart>



    /* Slave initialization */
    ModbusH2.uModbusType = MB_SLAVE;
 800035a:	4b23      	ldr	r3, [pc, #140]	@ (80003e8 <main+0xec>)
 800035c:	2203      	movs	r2, #3
 800035e:	701a      	strb	r2, [r3, #0]
      ModbusH2.port =  &huart1;
 8000360:	4b21      	ldr	r3, [pc, #132]	@ (80003e8 <main+0xec>)
 8000362:	4a22      	ldr	r2, [pc, #136]	@ (80003ec <main+0xf0>)
 8000364:	605a      	str	r2, [r3, #4]
      ModbusH2.u8id = 1;
 8000366:	4b20      	ldr	r3, [pc, #128]	@ (80003e8 <main+0xec>)
 8000368:	2201      	movs	r2, #1
 800036a:	721a      	strb	r2, [r3, #8]
      ModbusH2.u16timeOut = 1000;
 800036c:	4b1e      	ldr	r3, [pc, #120]	@ (80003e8 <main+0xec>)
 800036e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000372:	f8a3 20a2 	strh.w	r2, [r3, #162]	@ 0xa2
      ModbusH2.EN_Port = NULL;
 8000376:	4b1c      	ldr	r3, [pc, #112]	@ (80003e8 <main+0xec>)
 8000378:	2200      	movs	r2, #0
 800037a:	60da      	str	r2, [r3, #12]
      //ModbusH2.EN_Port = LD2_GPIO_Port;
      //ModbusH2.EN_Pin = LD2_Pin;
      ModbusH2.u16regs = ModbusDATA2;
 800037c:	4b1a      	ldr	r3, [pc, #104]	@ (80003e8 <main+0xec>)
 800037e:	4a1c      	ldr	r2, [pc, #112]	@ (80003f0 <main+0xf4>)
 8000380:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
      ModbusH2.u16regsize= sizeof(ModbusDATA2)/sizeof(ModbusDATA2[0]);
 8000384:	4b18      	ldr	r3, [pc, #96]	@ (80003e8 <main+0xec>)
 8000386:	2208      	movs	r2, #8
 8000388:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
      //Initialize Modbus library
      ModbusH2.xTypeHW = USART_HW;
 800038c:	4b16      	ldr	r3, [pc, #88]	@ (80003e8 <main+0xec>)
 800038e:	2201      	movs	r2, #1
 8000390:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
      ModbusInit(&ModbusH2);
 8000394:	4814      	ldr	r0, [pc, #80]	@ (80003e8 <main+0xec>)
 8000396:	f006 fa5f 	bl	8006858 <ModbusInit>
      //Start capturing traffic on serial Port
      ModbusStart(&ModbusH2);
 800039a:	4813      	ldr	r0, [pc, #76]	@ (80003e8 <main+0xec>)
 800039c:	f006 fb04 	bl	80069a8 <ModbusStart>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80003a0:	f002 fde4 	bl	8002f6c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80003a4:	4a13      	ldr	r2, [pc, #76]	@ (80003f4 <main+0xf8>)
 80003a6:	2100      	movs	r1, #0
 80003a8:	4813      	ldr	r0, [pc, #76]	@ (80003f8 <main+0xfc>)
 80003aa:	f002 fe45 	bl	8003038 <osThreadNew>
 80003ae:	4603      	mov	r3, r0
 80003b0:	4a12      	ldr	r2, [pc, #72]	@ (80003fc <main+0x100>)
 80003b2:	6013      	str	r3, [r2, #0]

  /* creation of readvolt */
  readvoltHandle = osThreadNew(StartReadVolt, NULL, &readvolt_attributes);
 80003b4:	4a12      	ldr	r2, [pc, #72]	@ (8000400 <main+0x104>)
 80003b6:	2100      	movs	r1, #0
 80003b8:	4812      	ldr	r0, [pc, #72]	@ (8000404 <main+0x108>)
 80003ba:	f002 fe3d 	bl	8003038 <osThreadNew>
 80003be:	4603      	mov	r3, r0
 80003c0:	4a11      	ldr	r2, [pc, #68]	@ (8000408 <main+0x10c>)
 80003c2:	6013      	str	r3, [r2, #0]

  /* creation of readinput */
  readinputHandle = osThreadNew(StartReadInput, NULL, &readinput_attributes);
 80003c4:	4a11      	ldr	r2, [pc, #68]	@ (800040c <main+0x110>)
 80003c6:	2100      	movs	r1, #0
 80003c8:	4811      	ldr	r0, [pc, #68]	@ (8000410 <main+0x114>)
 80003ca:	f002 fe35 	bl	8003038 <osThreadNew>
 80003ce:	4603      	mov	r3, r0
 80003d0:	4a10      	ldr	r2, [pc, #64]	@ (8000414 <main+0x118>)
 80003d2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80003d4:	f002 fdfc 	bl	8002fd0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003d8:	bf00      	nop
 80003da:	e7fd      	b.n	80003d8 <main+0xdc>
 80003dc:	200000e0 	.word	0x200000e0
 80003e0:	2000008c 	.word	0x2000008c
 80003e4:	20000228 	.word	0x20000228
 80003e8:	20000238 	.word	0x20000238
 80003ec:	20000044 	.word	0x20000044
 80003f0:	20000380 	.word	0x20000380
 80003f4:	08008148 	.word	0x08008148
 80003f8:	080006a1 	.word	0x080006a1
 80003fc:	200000d4 	.word	0x200000d4
 8000400:	0800816c 	.word	0x0800816c
 8000404:	080006d1 	.word	0x080006d1
 8000408:	200000d8 	.word	0x200000d8
 800040c:	08008190 	.word	0x08008190
 8000410:	08000751 	.word	0x08000751
 8000414:	200000dc 	.word	0x200000dc

08000418 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b090      	sub	sp, #64	@ 0x40
 800041c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800041e:	f107 0318 	add.w	r3, r7, #24
 8000422:	2228      	movs	r2, #40	@ 0x28
 8000424:	2100      	movs	r1, #0
 8000426:	4618      	mov	r0, r3
 8000428:	f007 fdfa 	bl	8008020 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800042c:	1d3b      	adds	r3, r7, #4
 800042e:	2200      	movs	r2, #0
 8000430:	601a      	str	r2, [r3, #0]
 8000432:	605a      	str	r2, [r3, #4]
 8000434:	609a      	str	r2, [r3, #8]
 8000436:	60da      	str	r2, [r3, #12]
 8000438:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800043a:	2301      	movs	r3, #1
 800043c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800043e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000442:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000444:	2300      	movs	r3, #0
 8000446:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000448:	2301      	movs	r3, #1
 800044a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800044c:	2302      	movs	r3, #2
 800044e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000450:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000454:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000456:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800045a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800045c:	f107 0318 	add.w	r3, r7, #24
 8000460:	4618      	mov	r0, r3
 8000462:	f000 ffcb 	bl	80013fc <HAL_RCC_OscConfig>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800046c:	f000 f9f6 	bl	800085c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000470:	230f      	movs	r3, #15
 8000472:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000474:	2302      	movs	r3, #2
 8000476:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000478:	2300      	movs	r3, #0
 800047a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800047c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000480:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000482:	2300      	movs	r3, #0
 8000484:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000486:	1d3b      	adds	r3, r7, #4
 8000488:	2102      	movs	r1, #2
 800048a:	4618      	mov	r0, r3
 800048c:	f001 fa38 	bl	8001900 <HAL_RCC_ClockConfig>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000496:	f000 f9e1 	bl	800085c <Error_Handler>
  }
}
 800049a:	bf00      	nop
 800049c:	3740      	adds	r7, #64	@ 0x40
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
	...

080004a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004a8:	4b11      	ldr	r3, [pc, #68]	@ (80004f0 <MX_USART1_UART_Init+0x4c>)
 80004aa:	4a12      	ldr	r2, [pc, #72]	@ (80004f4 <MX_USART1_UART_Init+0x50>)
 80004ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80004ae:	4b10      	ldr	r3, [pc, #64]	@ (80004f0 <MX_USART1_UART_Init+0x4c>)
 80004b0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80004b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004b6:	4b0e      	ldr	r3, [pc, #56]	@ (80004f0 <MX_USART1_UART_Init+0x4c>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004bc:	4b0c      	ldr	r3, [pc, #48]	@ (80004f0 <MX_USART1_UART_Init+0x4c>)
 80004be:	2200      	movs	r2, #0
 80004c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004c2:	4b0b      	ldr	r3, [pc, #44]	@ (80004f0 <MX_USART1_UART_Init+0x4c>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004c8:	4b09      	ldr	r3, [pc, #36]	@ (80004f0 <MX_USART1_UART_Init+0x4c>)
 80004ca:	220c      	movs	r2, #12
 80004cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004ce:	4b08      	ldr	r3, [pc, #32]	@ (80004f0 <MX_USART1_UART_Init+0x4c>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004d4:	4b06      	ldr	r3, [pc, #24]	@ (80004f0 <MX_USART1_UART_Init+0x4c>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004da:	4805      	ldr	r0, [pc, #20]	@ (80004f0 <MX_USART1_UART_Init+0x4c>)
 80004dc:	f001 fe3e 	bl	800215c <HAL_UART_Init>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80004e6:	f000 f9b9 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	20000044 	.word	0x20000044
 80004f4:	40013800 	.word	0x40013800

080004f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80004fc:	4b11      	ldr	r3, [pc, #68]	@ (8000544 <MX_USART3_UART_Init+0x4c>)
 80004fe:	4a12      	ldr	r2, [pc, #72]	@ (8000548 <MX_USART3_UART_Init+0x50>)
 8000500:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000502:	4b10      	ldr	r3, [pc, #64]	@ (8000544 <MX_USART3_UART_Init+0x4c>)
 8000504:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000508:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800050a:	4b0e      	ldr	r3, [pc, #56]	@ (8000544 <MX_USART3_UART_Init+0x4c>)
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000510:	4b0c      	ldr	r3, [pc, #48]	@ (8000544 <MX_USART3_UART_Init+0x4c>)
 8000512:	2200      	movs	r2, #0
 8000514:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000516:	4b0b      	ldr	r3, [pc, #44]	@ (8000544 <MX_USART3_UART_Init+0x4c>)
 8000518:	2200      	movs	r2, #0
 800051a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800051c:	4b09      	ldr	r3, [pc, #36]	@ (8000544 <MX_USART3_UART_Init+0x4c>)
 800051e:	220c      	movs	r2, #12
 8000520:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000522:	4b08      	ldr	r3, [pc, #32]	@ (8000544 <MX_USART3_UART_Init+0x4c>)
 8000524:	2200      	movs	r2, #0
 8000526:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000528:	4b06      	ldr	r3, [pc, #24]	@ (8000544 <MX_USART3_UART_Init+0x4c>)
 800052a:	2200      	movs	r2, #0
 800052c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800052e:	4805      	ldr	r0, [pc, #20]	@ (8000544 <MX_USART3_UART_Init+0x4c>)
 8000530:	f001 fe14 	bl	800215c <HAL_UART_Init>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800053a:	f000 f98f 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800053e:	bf00      	nop
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	2000008c 	.word	0x2000008c
 8000548:	40004800 	.word	0x40004800

0800054c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b088      	sub	sp, #32
 8000550:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000552:	f107 0310 	add.w	r3, r7, #16
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
 800055e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000560:	4b4b      	ldr	r3, [pc, #300]	@ (8000690 <MX_GPIO_Init+0x144>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	4a4a      	ldr	r2, [pc, #296]	@ (8000690 <MX_GPIO_Init+0x144>)
 8000566:	f043 0310 	orr.w	r3, r3, #16
 800056a:	6193      	str	r3, [r2, #24]
 800056c:	4b48      	ldr	r3, [pc, #288]	@ (8000690 <MX_GPIO_Init+0x144>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	f003 0310 	and.w	r3, r3, #16
 8000574:	60fb      	str	r3, [r7, #12]
 8000576:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000578:	4b45      	ldr	r3, [pc, #276]	@ (8000690 <MX_GPIO_Init+0x144>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	4a44      	ldr	r2, [pc, #272]	@ (8000690 <MX_GPIO_Init+0x144>)
 800057e:	f043 0320 	orr.w	r3, r3, #32
 8000582:	6193      	str	r3, [r2, #24]
 8000584:	4b42      	ldr	r3, [pc, #264]	@ (8000690 <MX_GPIO_Init+0x144>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	f003 0320 	and.w	r3, r3, #32
 800058c:	60bb      	str	r3, [r7, #8]
 800058e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000590:	4b3f      	ldr	r3, [pc, #252]	@ (8000690 <MX_GPIO_Init+0x144>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	4a3e      	ldr	r2, [pc, #248]	@ (8000690 <MX_GPIO_Init+0x144>)
 8000596:	f043 0304 	orr.w	r3, r3, #4
 800059a:	6193      	str	r3, [r2, #24]
 800059c:	4b3c      	ldr	r3, [pc, #240]	@ (8000690 <MX_GPIO_Init+0x144>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	f003 0304 	and.w	r3, r3, #4
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a8:	4b39      	ldr	r3, [pc, #228]	@ (8000690 <MX_GPIO_Init+0x144>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	4a38      	ldr	r2, [pc, #224]	@ (8000690 <MX_GPIO_Init+0x144>)
 80005ae:	f043 0308 	orr.w	r3, r3, #8
 80005b2:	6193      	str	r3, [r2, #24]
 80005b4:	4b36      	ldr	r3, [pc, #216]	@ (8000690 <MX_GPIO_Init+0x144>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	f003 0308 	and.w	r3, r3, #8
 80005bc:	603b      	str	r3, [r7, #0]
 80005be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Y02_Pin|Y03_Pin|Y07_Pin|Y06_Pin, GPIO_PIN_RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	211b      	movs	r1, #27
 80005c4:	4833      	ldr	r0, [pc, #204]	@ (8000694 <MX_GPIO_Init+0x148>)
 80005c6:	f000 ff00 	bl	80013ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Y05_Pin|Y00_Pin|Y01_Pin, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	f44f 6160 	mov.w	r1, #3584	@ 0xe00
 80005d0:	4831      	ldr	r0, [pc, #196]	@ (8000698 <MX_GPIO_Init+0x14c>)
 80005d2:	f000 fefa 	bl	80013ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Y04_GPIO_Port, Y04_Pin, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005dc:	482f      	ldr	r0, [pc, #188]	@ (800069c <MX_GPIO_Init+0x150>)
 80005de:	f000 fef4 	bl	80013ca <HAL_GPIO_WritePin>

  /*Configure GPIO pins : X15_Pin X02_Pin X03_Pin */
  GPIO_InitStruct.Pin = X15_Pin|X02_Pin|X03_Pin;
 80005e2:	f44f 5303 	mov.w	r3, #8384	@ 0x20c0
 80005e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005e8:	2300      	movs	r3, #0
 80005ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005f0:	f107 0310 	add.w	r3, r7, #16
 80005f4:	4619      	mov	r1, r3
 80005f6:	4828      	ldr	r0, [pc, #160]	@ (8000698 <MX_GPIO_Init+0x14c>)
 80005f8:	f000 fd3c 	bl	8001074 <HAL_GPIO_Init>

  /*Configure GPIO pins : X00_Pin X01_Pin X12_Pin X14_Pin
                           X04_Pin X05_Pin */
  GPIO_InitStruct.Pin = X00_Pin|X01_Pin|X12_Pin|X14_Pin
 80005fc:	f641 030f 	movw	r3, #6159	@ 0x180f
 8000600:	613b      	str	r3, [r7, #16]
                          |X04_Pin|X05_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000602:	2300      	movs	r3, #0
 8000604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060a:	f107 0310 	add.w	r3, r7, #16
 800060e:	4619      	mov	r1, r3
 8000610:	4822      	ldr	r0, [pc, #136]	@ (800069c <MX_GPIO_Init+0x150>)
 8000612:	f000 fd2f 	bl	8001074 <HAL_GPIO_Init>

  /*Configure GPIO pins : Y02_Pin Y03_Pin Y07_Pin Y06_Pin */
  GPIO_InitStruct.Pin = Y02_Pin|Y03_Pin|Y07_Pin|Y06_Pin;
 8000616:	231b      	movs	r3, #27
 8000618:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061a:	2301      	movs	r3, #1
 800061c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061e:	2300      	movs	r3, #0
 8000620:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000622:	2302      	movs	r3, #2
 8000624:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000626:	f107 0310 	add.w	r3, r7, #16
 800062a:	4619      	mov	r1, r3
 800062c:	4819      	ldr	r0, [pc, #100]	@ (8000694 <MX_GPIO_Init+0x148>)
 800062e:	f000 fd21 	bl	8001074 <HAL_GPIO_Init>

  /*Configure GPIO pins : X13_Pin X10_Pin X11_Pin X06_Pin
                           X07_Pin */
  GPIO_InitStruct.Pin = X13_Pin|X10_Pin|X11_Pin|X06_Pin
 8000632:	f24f 0304 	movw	r3, #61444	@ 0xf004
 8000636:	613b      	str	r3, [r7, #16]
                          |X07_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063c:	2300      	movs	r3, #0
 800063e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000640:	f107 0310 	add.w	r3, r7, #16
 8000644:	4619      	mov	r1, r3
 8000646:	4813      	ldr	r0, [pc, #76]	@ (8000694 <MX_GPIO_Init+0x148>)
 8000648:	f000 fd14 	bl	8001074 <HAL_GPIO_Init>

  /*Configure GPIO pins : Y05_Pin Y00_Pin Y01_Pin */
  GPIO_InitStruct.Pin = Y05_Pin|Y00_Pin|Y01_Pin;
 800064c:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 8000650:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000652:	2301      	movs	r3, #1
 8000654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	2300      	movs	r3, #0
 8000658:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065a:	2302      	movs	r3, #2
 800065c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800065e:	f107 0310 	add.w	r3, r7, #16
 8000662:	4619      	mov	r1, r3
 8000664:	480c      	ldr	r0, [pc, #48]	@ (8000698 <MX_GPIO_Init+0x14c>)
 8000666:	f000 fd05 	bl	8001074 <HAL_GPIO_Init>

  /*Configure GPIO pin : Y04_Pin */
  GPIO_InitStruct.Pin = Y04_Pin;
 800066a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800066e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000670:	2301      	movs	r3, #1
 8000672:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000678:	2302      	movs	r3, #2
 800067a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Y04_GPIO_Port, &GPIO_InitStruct);
 800067c:	f107 0310 	add.w	r3, r7, #16
 8000680:	4619      	mov	r1, r3
 8000682:	4806      	ldr	r0, [pc, #24]	@ (800069c <MX_GPIO_Init+0x150>)
 8000684:	f000 fcf6 	bl	8001074 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000688:	bf00      	nop
 800068a:	3720      	adds	r7, #32
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40021000 	.word	0x40021000
 8000694:	40010c00 	.word	0x40010c00
 8000698:	40011000 	.word	0x40011000
 800069c:	40010800 	.word	0x40010800

080006a0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	  if(status==ProgramRunning){
 80006a8:	4b07      	ldr	r3, [pc, #28]	@ (80006c8 <StartDefaultTask+0x28>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d102      	bne.n	80006b6 <StartDefaultTask+0x16>
			  Program_Running();
 80006b0:	f7ff fdfe 	bl	80002b0 <Program_Running>
 80006b4:	e004      	b.n	80006c0 <StartDefaultTask+0x20>
	  }
	  else{
		  Program_Stop();
 80006b6:	f7ff fe15 	bl	80002e4 <Program_Stop>
		  status_led=led_red;
 80006ba:	4b04      	ldr	r3, [pc, #16]	@ (80006cc <StartDefaultTask+0x2c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	701a      	strb	r2, [r3, #0]
	  }
    osDelay(100);
 80006c0:	2064      	movs	r0, #100	@ 0x64
 80006c2:	f002 fd89 	bl	80031d8 <osDelay>
	  if(status==ProgramRunning){
 80006c6:	e7ef      	b.n	80006a8 <StartDefaultTask+0x8>
 80006c8:	20000030 	.word	0x20000030
 80006cc:	20000000 	.word	0x20000000

080006d0 <StartReadVolt>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadVolt */
void StartReadVolt(void *argument)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b088      	sub	sp, #32
 80006d4:	af02      	add	r7, sp, #8
 80006d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadVolt */
  /* Infinite loop */
  for(;;)
  {
	  uint32_t u32NotificationValue;
	  	    telegram.u8id = 1; // slave address
 80006d8:	4b19      	ldr	r3, [pc, #100]	@ (8000740 <StartReadVolt+0x70>)
 80006da:	2201      	movs	r2, #1
 80006dc:	701a      	strb	r2, [r3, #0]
	  	    telegram.u8fct = 4; // function code (this one is registers read)
 80006de:	4b18      	ldr	r3, [pc, #96]	@ (8000740 <StartReadVolt+0x70>)
 80006e0:	2204      	movs	r2, #4
 80006e2:	705a      	strb	r2, [r3, #1]
	  	    //telegram[0].u16RegAdd = 0x160; // start address in slave
	  	    telegram.u16RegAdd = 0x0; // start address in slave
 80006e4:	4b16      	ldr	r3, [pc, #88]	@ (8000740 <StartReadVolt+0x70>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	805a      	strh	r2, [r3, #2]
	  	    telegram.u16CoilsNo = 8; // number of elements (coils or registers) to read
 80006ea:	4b15      	ldr	r3, [pc, #84]	@ (8000740 <StartReadVolt+0x70>)
 80006ec:	2208      	movs	r2, #8
 80006ee:	809a      	strh	r2, [r3, #4]
	  	    telegram.u16reg = ModbusDATA; // pointer to a memory array in the Arduino
 80006f0:	4b13      	ldr	r3, [pc, #76]	@ (8000740 <StartReadVolt+0x70>)
 80006f2:	4a14      	ldr	r2, [pc, #80]	@ (8000744 <StartReadVolt+0x74>)
 80006f4:	609a      	str	r2, [r3, #8]

	  	    int aux;

	  	    for(;;)
	  	    {
	  	  	  ModbusQuery(&ModbusH, telegram); // make a query
 80006f6:	4b12      	ldr	r3, [pc, #72]	@ (8000740 <StartReadVolt+0x70>)
 80006f8:	68da      	ldr	r2, [r3, #12]
 80006fa:	9200      	str	r2, [sp, #0]
 80006fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80006fe:	4812      	ldr	r0, [pc, #72]	@ (8000748 <StartReadVolt+0x78>)
 8000700:	f006 fb38 	bl	8006d74 <ModbusQuery>
	  	  	  u32NotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // block until query finishes
 8000704:	f04f 31ff 	mov.w	r1, #4294967295
 8000708:	2001      	movs	r0, #1
 800070a:	f004 fe8d 	bl	8005428 <ulTaskNotifyTake>
 800070e:	6178      	str	r0, [r7, #20]
	  	  	  if(u32NotificationValue != ERR_OK_QUERY)
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	f113 0f0b 	cmn.w	r3, #11
 8000716:	d001      	beq.n	800071c <StartReadVolt+0x4c>
	  	  	  {
	  	  		//handle error
	  	  		//  while(1);
	  	  		  aux =1;
 8000718:	2301      	movs	r3, #1
 800071a:	613b      	str	r3, [r7, #16]
	  	  	  }
	  	  	  uint16_t Volt_battery  = ModbusH.u16regs[0];
 800071c:	4b0a      	ldr	r3, [pc, #40]	@ (8000748 <StartReadVolt+0x78>)
 800071e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000722:	881b      	ldrh	r3, [r3, #0]
 8000724:	81fb      	strh	r3, [r7, #14]
	  	  	  uint16_t Current_battery = ModbusH.u16regs[1];
 8000726:	4b08      	ldr	r3, [pc, #32]	@ (8000748 <StartReadVolt+0x78>)
 8000728:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800072c:	885b      	ldrh	r3, [r3, #2]
 800072e:	81bb      	strh	r3, [r7, #12]
	  	  	  ModbusH2.u16regs[3]=Volt_battery;
 8000730:	4b06      	ldr	r3, [pc, #24]	@ (800074c <StartReadVolt+0x7c>)
 8000732:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000736:	3306      	adds	r3, #6
 8000738:	89fa      	ldrh	r2, [r7, #14]
 800073a:	801a      	strh	r2, [r3, #0]
	  	    {
 800073c:	e7db      	b.n	80006f6 <StartReadVolt+0x26>
 800073e:	bf00      	nop
 8000740:	20000034 	.word	0x20000034
 8000744:	20000228 	.word	0x20000228
 8000748:	200000e0 	.word	0x200000e0
 800074c:	20000238 	.word	0x20000238

08000750 <StartReadInput>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadInput */
void StartReadInput(void *argument)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadInput */
  /* Infinite loop */
  for(;;)
  {
//	  if(HAL_GPIO_ReadPin(X00_GPIO_Port, X00_Pin)==0)
	  if(ModbusH2.u16regs[2]==1)
 8000758:	4b32      	ldr	r3, [pc, #200]	@ (8000824 <StartReadInput+0xd4>)
 800075a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800075e:	3304      	adds	r3, #4
 8000760:	881b      	ldrh	r3, [r3, #0]
 8000762:	2b01      	cmp	r3, #1
 8000764:	d106      	bne.n	8000774 <StartReadInput+0x24>
	  {
		  if(status==ProgramRunning)
 8000766:	4b30      	ldr	r3, [pc, #192]	@ (8000828 <StartReadInput+0xd8>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d102      	bne.n	8000774 <StartReadInput+0x24>
		  {
			  status=ProgramStop;
 800076e:	4b2e      	ldr	r3, [pc, #184]	@ (8000828 <StartReadInput+0xd8>)
 8000770:	2201      	movs	r2, #1
 8000772:	701a      	strb	r2, [r3, #0]
		  }

	  }
	  if(HAL_GPIO_ReadPin(X00_GPIO_Port, X00_Pin)==1&&HAL_GPIO_ReadPin(X01_GPIO_Port, X01_Pin)==0)
 8000774:	2101      	movs	r1, #1
 8000776:	482d      	ldr	r0, [pc, #180]	@ (800082c <StartReadInput+0xdc>)
 8000778:	f000 fe10 	bl	800139c <HAL_GPIO_ReadPin>
 800077c:	4603      	mov	r3, r0
 800077e:	2b01      	cmp	r3, #1
 8000780:	d10d      	bne.n	800079e <StartReadInput+0x4e>
 8000782:	2102      	movs	r1, #2
 8000784:	4829      	ldr	r0, [pc, #164]	@ (800082c <StartReadInput+0xdc>)
 8000786:	f000 fe09 	bl	800139c <HAL_GPIO_ReadPin>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d106      	bne.n	800079e <StartReadInput+0x4e>
	  {
		  if(status==ProgramStop)
 8000790:	4b25      	ldr	r3, [pc, #148]	@ (8000828 <StartReadInput+0xd8>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d102      	bne.n	800079e <StartReadInput+0x4e>
		  {
			  status=ProgramRunning;
 8000798:	4b23      	ldr	r3, [pc, #140]	@ (8000828 <StartReadInput+0xd8>)
 800079a:	2200      	movs	r2, #0
 800079c:	701a      	strb	r2, [r3, #0]

		  }
	  }
	  switch (status_led) {
 800079e:	4b24      	ldr	r3, [pc, #144]	@ (8000830 <StartReadInput+0xe0>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b02      	cmp	r3, #2
 80007a4:	d006      	beq.n	80007b4 <StartReadInput+0x64>
 80007a6:	2b02      	cmp	r3, #2
 80007a8:	dc37      	bgt.n	800081a <StartReadInput+0xca>
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d024      	beq.n	80007f8 <StartReadInput+0xa8>
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	d011      	beq.n	80007d6 <StartReadInput+0x86>
			HAL_GPIO_WritePin(Y02_GPIO_Port, Y02_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(Y03_GPIO_Port, Y03_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(Y04_GPIO_Port, Y04_Pin, GPIO_PIN_SET);
			break;
		default:
			break;
 80007b2:	e032      	b.n	800081a <StartReadInput+0xca>
			HAL_GPIO_WritePin(Y02_GPIO_Port, Y02_Pin, GPIO_PIN_SET);
 80007b4:	2201      	movs	r2, #1
 80007b6:	2101      	movs	r1, #1
 80007b8:	481e      	ldr	r0, [pc, #120]	@ (8000834 <StartReadInput+0xe4>)
 80007ba:	f000 fe06 	bl	80013ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Y03_GPIO_Port, Y03_Pin, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	2102      	movs	r1, #2
 80007c2:	481c      	ldr	r0, [pc, #112]	@ (8000834 <StartReadInput+0xe4>)
 80007c4:	f000 fe01 	bl	80013ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Y04_GPIO_Port, Y04_Pin, GPIO_PIN_RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007ce:	4817      	ldr	r0, [pc, #92]	@ (800082c <StartReadInput+0xdc>)
 80007d0:	f000 fdfb 	bl	80013ca <HAL_GPIO_WritePin>
			break;
 80007d4:	e022      	b.n	800081c <StartReadInput+0xcc>
			HAL_GPIO_WritePin(Y02_GPIO_Port, Y02_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2101      	movs	r1, #1
 80007da:	4816      	ldr	r0, [pc, #88]	@ (8000834 <StartReadInput+0xe4>)
 80007dc:	f000 fdf5 	bl	80013ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Y03_GPIO_Port, Y03_Pin, GPIO_PIN_SET);
 80007e0:	2201      	movs	r2, #1
 80007e2:	2102      	movs	r1, #2
 80007e4:	4813      	ldr	r0, [pc, #76]	@ (8000834 <StartReadInput+0xe4>)
 80007e6:	f000 fdf0 	bl	80013ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Y04_GPIO_Port, Y04_Pin, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007f0:	480e      	ldr	r0, [pc, #56]	@ (800082c <StartReadInput+0xdc>)
 80007f2:	f000 fdea 	bl	80013ca <HAL_GPIO_WritePin>
			break;
 80007f6:	e011      	b.n	800081c <StartReadInput+0xcc>
			HAL_GPIO_WritePin(Y02_GPIO_Port, Y02_Pin, GPIO_PIN_RESET);
 80007f8:	2200      	movs	r2, #0
 80007fa:	2101      	movs	r1, #1
 80007fc:	480d      	ldr	r0, [pc, #52]	@ (8000834 <StartReadInput+0xe4>)
 80007fe:	f000 fde4 	bl	80013ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Y03_GPIO_Port, Y03_Pin, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	2102      	movs	r1, #2
 8000806:	480b      	ldr	r0, [pc, #44]	@ (8000834 <StartReadInput+0xe4>)
 8000808:	f000 fddf 	bl	80013ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Y04_GPIO_Port, Y04_Pin, GPIO_PIN_SET);
 800080c:	2201      	movs	r2, #1
 800080e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000812:	4806      	ldr	r0, [pc, #24]	@ (800082c <StartReadInput+0xdc>)
 8000814:	f000 fdd9 	bl	80013ca <HAL_GPIO_WritePin>
			break;
 8000818:	e000      	b.n	800081c <StartReadInput+0xcc>
			break;
 800081a:	bf00      	nop
	}
    osDelay(100);
 800081c:	2064      	movs	r0, #100	@ 0x64
 800081e:	f002 fcdb 	bl	80031d8 <osDelay>
	  if(ModbusH2.u16regs[2]==1)
 8000822:	e799      	b.n	8000758 <StartReadInput+0x8>
 8000824:	20000238 	.word	0x20000238
 8000828:	20000030 	.word	0x20000030
 800082c:	40010800 	.word	0x40010800
 8000830:	20000000 	.word	0x20000000
 8000834:	40010c00 	.word	0x40010c00

08000838 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a04      	ldr	r2, [pc, #16]	@ (8000858 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d101      	bne.n	800084e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800084a:	f000 f9d5 	bl	8000bf8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40000800 	.word	0x40000800

0800085c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000860:	b672      	cpsid	i
}
 8000862:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000864:	bf00      	nop
 8000866:	e7fd      	b.n	8000864 <Error_Handler+0x8>

08000868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800086e:	4b18      	ldr	r3, [pc, #96]	@ (80008d0 <HAL_MspInit+0x68>)
 8000870:	699b      	ldr	r3, [r3, #24]
 8000872:	4a17      	ldr	r2, [pc, #92]	@ (80008d0 <HAL_MspInit+0x68>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6193      	str	r3, [r2, #24]
 800087a:	4b15      	ldr	r3, [pc, #84]	@ (80008d0 <HAL_MspInit+0x68>)
 800087c:	699b      	ldr	r3, [r3, #24]
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000886:	4b12      	ldr	r3, [pc, #72]	@ (80008d0 <HAL_MspInit+0x68>)
 8000888:	69db      	ldr	r3, [r3, #28]
 800088a:	4a11      	ldr	r2, [pc, #68]	@ (80008d0 <HAL_MspInit+0x68>)
 800088c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000890:	61d3      	str	r3, [r2, #28]
 8000892:	4b0f      	ldr	r3, [pc, #60]	@ (80008d0 <HAL_MspInit+0x68>)
 8000894:	69db      	ldr	r3, [r3, #28]
 8000896:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	210f      	movs	r1, #15
 80008a2:	f06f 0001 	mvn.w	r0, #1
 80008a6:	f000 fa78 	bl	8000d9a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008aa:	4b0a      	ldr	r3, [pc, #40]	@ (80008d4 <HAL_MspInit+0x6c>)
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	4a04      	ldr	r2, [pc, #16]	@ (80008d4 <HAL_MspInit+0x6c>)
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c6:	bf00      	nop
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40021000 	.word	0x40021000
 80008d4:	40010000 	.word	0x40010000

080008d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08a      	sub	sp, #40	@ 0x28
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e0:	f107 0318 	add.w	r3, r7, #24
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a40      	ldr	r2, [pc, #256]	@ (80009f4 <HAL_UART_MspInit+0x11c>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d13a      	bne.n	800096e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008f8:	4b3f      	ldr	r3, [pc, #252]	@ (80009f8 <HAL_UART_MspInit+0x120>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	4a3e      	ldr	r2, [pc, #248]	@ (80009f8 <HAL_UART_MspInit+0x120>)
 80008fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000902:	6193      	str	r3, [r2, #24]
 8000904:	4b3c      	ldr	r3, [pc, #240]	@ (80009f8 <HAL_UART_MspInit+0x120>)
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800090c:	617b      	str	r3, [r7, #20]
 800090e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000910:	4b39      	ldr	r3, [pc, #228]	@ (80009f8 <HAL_UART_MspInit+0x120>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	4a38      	ldr	r2, [pc, #224]	@ (80009f8 <HAL_UART_MspInit+0x120>)
 8000916:	f043 0304 	orr.w	r3, r3, #4
 800091a:	6193      	str	r3, [r2, #24]
 800091c:	4b36      	ldr	r3, [pc, #216]	@ (80009f8 <HAL_UART_MspInit+0x120>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	f003 0304 	and.w	r3, r3, #4
 8000924:	613b      	str	r3, [r7, #16]
 8000926:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000928:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800092c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092e:	2302      	movs	r3, #2
 8000930:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000932:	2303      	movs	r3, #3
 8000934:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000936:	f107 0318 	add.w	r3, r7, #24
 800093a:	4619      	mov	r1, r3
 800093c:	482f      	ldr	r0, [pc, #188]	@ (80009fc <HAL_UART_MspInit+0x124>)
 800093e:	f000 fb99 	bl	8001074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000942:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000948:	2300      	movs	r3, #0
 800094a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000950:	f107 0318 	add.w	r3, r7, #24
 8000954:	4619      	mov	r1, r3
 8000956:	4829      	ldr	r0, [pc, #164]	@ (80009fc <HAL_UART_MspInit+0x124>)
 8000958:	f000 fb8c 	bl	8001074 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800095c:	2200      	movs	r2, #0
 800095e:	2105      	movs	r1, #5
 8000960:	2025      	movs	r0, #37	@ 0x25
 8000962:	f000 fa1a 	bl	8000d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000966:	2025      	movs	r0, #37	@ 0x25
 8000968:	f000 fa33 	bl	8000dd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800096c:	e03e      	b.n	80009ec <HAL_UART_MspInit+0x114>
  else if(huart->Instance==USART3)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a23      	ldr	r2, [pc, #140]	@ (8000a00 <HAL_UART_MspInit+0x128>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d139      	bne.n	80009ec <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000978:	4b1f      	ldr	r3, [pc, #124]	@ (80009f8 <HAL_UART_MspInit+0x120>)
 800097a:	69db      	ldr	r3, [r3, #28]
 800097c:	4a1e      	ldr	r2, [pc, #120]	@ (80009f8 <HAL_UART_MspInit+0x120>)
 800097e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000982:	61d3      	str	r3, [r2, #28]
 8000984:	4b1c      	ldr	r3, [pc, #112]	@ (80009f8 <HAL_UART_MspInit+0x120>)
 8000986:	69db      	ldr	r3, [r3, #28]
 8000988:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000990:	4b19      	ldr	r3, [pc, #100]	@ (80009f8 <HAL_UART_MspInit+0x120>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	4a18      	ldr	r2, [pc, #96]	@ (80009f8 <HAL_UART_MspInit+0x120>)
 8000996:	f043 0308 	orr.w	r3, r3, #8
 800099a:	6193      	str	r3, [r2, #24]
 800099c:	4b16      	ldr	r3, [pc, #88]	@ (80009f8 <HAL_UART_MspInit+0x120>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	f003 0308 	and.w	r3, r3, #8
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	2302      	movs	r3, #2
 80009b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009b2:	2303      	movs	r3, #3
 80009b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b6:	f107 0318 	add.w	r3, r7, #24
 80009ba:	4619      	mov	r1, r3
 80009bc:	4811      	ldr	r0, [pc, #68]	@ (8000a04 <HAL_UART_MspInit+0x12c>)
 80009be:	f000 fb59 	bl	8001074 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80009c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80009c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d0:	f107 0318 	add.w	r3, r7, #24
 80009d4:	4619      	mov	r1, r3
 80009d6:	480b      	ldr	r0, [pc, #44]	@ (8000a04 <HAL_UART_MspInit+0x12c>)
 80009d8:	f000 fb4c 	bl	8001074 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80009dc:	2200      	movs	r2, #0
 80009de:	2105      	movs	r1, #5
 80009e0:	2027      	movs	r0, #39	@ 0x27
 80009e2:	f000 f9da 	bl	8000d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80009e6:	2027      	movs	r0, #39	@ 0x27
 80009e8:	f000 f9f3 	bl	8000dd2 <HAL_NVIC_EnableIRQ>
}
 80009ec:	bf00      	nop
 80009ee:	3728      	adds	r7, #40	@ 0x28
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40013800 	.word	0x40013800
 80009f8:	40021000 	.word	0x40021000
 80009fc:	40010800 	.word	0x40010800
 8000a00:	40004800 	.word	0x40004800
 8000a04:	40010c00 	.word	0x40010c00

08000a08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08e      	sub	sp, #56	@ 0x38
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a10:	2300      	movs	r3, #0
 8000a12:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000a1e:	4b34      	ldr	r3, [pc, #208]	@ (8000af0 <HAL_InitTick+0xe8>)
 8000a20:	69db      	ldr	r3, [r3, #28]
 8000a22:	4a33      	ldr	r2, [pc, #204]	@ (8000af0 <HAL_InitTick+0xe8>)
 8000a24:	f043 0304 	orr.w	r3, r3, #4
 8000a28:	61d3      	str	r3, [r2, #28]
 8000a2a:	4b31      	ldr	r3, [pc, #196]	@ (8000af0 <HAL_InitTick+0xe8>)
 8000a2c:	69db      	ldr	r3, [r3, #28]
 8000a2e:	f003 0304 	and.w	r3, r3, #4
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a36:	f107 0210 	add.w	r2, r7, #16
 8000a3a:	f107 0314 	add.w	r3, r7, #20
 8000a3e:	4611      	mov	r1, r2
 8000a40:	4618      	mov	r0, r3
 8000a42:	f001 f8cd 	bl	8001be0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a46:	6a3b      	ldr	r3, [r7, #32]
 8000a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d103      	bne.n	8000a58 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a50:	f001 f89e 	bl	8001b90 <HAL_RCC_GetPCLK1Freq>
 8000a54:	6378      	str	r0, [r7, #52]	@ 0x34
 8000a56:	e004      	b.n	8000a62 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a58:	f001 f89a 	bl	8001b90 <HAL_RCC_GetPCLK1Freq>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a64:	4a23      	ldr	r2, [pc, #140]	@ (8000af4 <HAL_InitTick+0xec>)
 8000a66:	fba2 2303 	umull	r2, r3, r2, r3
 8000a6a:	0c9b      	lsrs	r3, r3, #18
 8000a6c:	3b01      	subs	r3, #1
 8000a6e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000a70:	4b21      	ldr	r3, [pc, #132]	@ (8000af8 <HAL_InitTick+0xf0>)
 8000a72:	4a22      	ldr	r2, [pc, #136]	@ (8000afc <HAL_InitTick+0xf4>)
 8000a74:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000a76:	4b20      	ldr	r3, [pc, #128]	@ (8000af8 <HAL_InitTick+0xf0>)
 8000a78:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a7c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000a7e:	4a1e      	ldr	r2, [pc, #120]	@ (8000af8 <HAL_InitTick+0xf0>)
 8000a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a82:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000a84:	4b1c      	ldr	r3, [pc, #112]	@ (8000af8 <HAL_InitTick+0xf0>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000af8 <HAL_InitTick+0xf0>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a90:	4b19      	ldr	r3, [pc, #100]	@ (8000af8 <HAL_InitTick+0xf0>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000a96:	4818      	ldr	r0, [pc, #96]	@ (8000af8 <HAL_InitTick+0xf0>)
 8000a98:	f001 f8f0 	bl	8001c7c <HAL_TIM_Base_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000aa2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d11b      	bne.n	8000ae2 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000aaa:	4813      	ldr	r0, [pc, #76]	@ (8000af8 <HAL_InitTick+0xf0>)
 8000aac:	f001 f93e 	bl	8001d2c <HAL_TIM_Base_Start_IT>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000ab6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d111      	bne.n	8000ae2 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000abe:	201e      	movs	r0, #30
 8000ac0:	f000 f987 	bl	8000dd2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2b0f      	cmp	r3, #15
 8000ac8:	d808      	bhi.n	8000adc <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000aca:	2200      	movs	r2, #0
 8000acc:	6879      	ldr	r1, [r7, #4]
 8000ace:	201e      	movs	r0, #30
 8000ad0:	f000 f963 	bl	8000d9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ad4:	4a0a      	ldr	r2, [pc, #40]	@ (8000b00 <HAL_InitTick+0xf8>)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6013      	str	r3, [r2, #0]
 8000ada:	e002      	b.n	8000ae2 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000adc:	2301      	movs	r3, #1
 8000ade:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ae2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3738      	adds	r7, #56	@ 0x38
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40021000 	.word	0x40021000
 8000af4:	431bde83 	.word	0x431bde83
 8000af8:	20000390 	.word	0x20000390
 8000afc:	40000800 	.word	0x40000800
 8000b00:	20000008 	.word	0x20000008

08000b04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b08:	bf00      	nop
 8000b0a:	e7fd      	b.n	8000b08 <NMI_Handler+0x4>

08000b0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b10:	bf00      	nop
 8000b12:	e7fd      	b.n	8000b10 <HardFault_Handler+0x4>

08000b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <MemManage_Handler+0x4>

08000b1c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <BusFault_Handler+0x4>

08000b24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <UsageFault_Handler+0x4>

08000b2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr

08000b38 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000b3c:	4802      	ldr	r0, [pc, #8]	@ (8000b48 <TIM4_IRQHandler+0x10>)
 8000b3e:	f001 f955 	bl	8001dec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000390 	.word	0x20000390

08000b4c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b50:	4802      	ldr	r0, [pc, #8]	@ (8000b5c <USART1_IRQHandler+0x10>)
 8000b52:	f001 fc5f 	bl	8002414 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000044 	.word	0x20000044

08000b60 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000b64:	4802      	ldr	r0, [pc, #8]	@ (8000b70 <USART3_IRQHandler+0x10>)
 8000b66:	f001 fc55 	bl	8002414 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	2000008c 	.word	0x2000008c

08000b74 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr

08000b80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b80:	f7ff fff8 	bl	8000b74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b84:	480b      	ldr	r0, [pc, #44]	@ (8000bb4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b86:	490c      	ldr	r1, [pc, #48]	@ (8000bb8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b88:	4a0c      	ldr	r2, [pc, #48]	@ (8000bbc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b8c:	e002      	b.n	8000b94 <LoopCopyDataInit>

08000b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b92:	3304      	adds	r3, #4

08000b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b98:	d3f9      	bcc.n	8000b8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b9a:	4a09      	ldr	r2, [pc, #36]	@ (8000bc0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b9c:	4c09      	ldr	r4, [pc, #36]	@ (8000bc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba0:	e001      	b.n	8000ba6 <LoopFillZerobss>

08000ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba4:	3204      	adds	r2, #4

08000ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba8:	d3fb      	bcc.n	8000ba2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000baa:	f007 fa41 	bl	8008030 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bae:	f7ff fba5 	bl	80002fc <main>
  bx lr
 8000bb2:	4770      	bx	lr
  ldr r0, =_sdata
 8000bb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000bbc:	08008260 	.word	0x08008260
  ldr r2, =_sbss
 8000bc0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000bc4:	20001930 	.word	0x20001930

08000bc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bc8:	e7fe      	b.n	8000bc8 <ADC1_2_IRQHandler>
	...

08000bcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd0:	4b08      	ldr	r3, [pc, #32]	@ (8000bf4 <HAL_Init+0x28>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a07      	ldr	r2, [pc, #28]	@ (8000bf4 <HAL_Init+0x28>)
 8000bd6:	f043 0310 	orr.w	r3, r3, #16
 8000bda:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bdc:	2003      	movs	r0, #3
 8000bde:	f000 f8d1 	bl	8000d84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000be2:	200f      	movs	r0, #15
 8000be4:	f7ff ff10 	bl	8000a08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000be8:	f7ff fe3e 	bl	8000868 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40022000 	.word	0x40022000

08000bf8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bfc:	4b05      	ldr	r3, [pc, #20]	@ (8000c14 <HAL_IncTick+0x1c>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	461a      	mov	r2, r3
 8000c02:	4b05      	ldr	r3, [pc, #20]	@ (8000c18 <HAL_IncTick+0x20>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4413      	add	r3, r2
 8000c08:	4a03      	ldr	r2, [pc, #12]	@ (8000c18 <HAL_IncTick+0x20>)
 8000c0a:	6013      	str	r3, [r2, #0]
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr
 8000c14:	2000000c 	.word	0x2000000c
 8000c18:	200003d8 	.word	0x200003d8

08000c1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c20:	4b02      	ldr	r3, [pc, #8]	@ (8000c2c <HAL_GetTick+0x10>)
 8000c22:	681b      	ldr	r3, [r3, #0]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr
 8000c2c:	200003d8 	.word	0x200003d8

08000c30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c40:	4b0c      	ldr	r3, [pc, #48]	@ (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c46:	68ba      	ldr	r2, [r7, #8]
 8000c48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c62:	4a04      	ldr	r2, [pc, #16]	@ (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	60d3      	str	r3, [r2, #12]
}
 8000c68:	bf00      	nop
 8000c6a:	3714      	adds	r7, #20
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bc80      	pop	{r7}
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c7c:	4b04      	ldr	r3, [pc, #16]	@ (8000c90 <__NVIC_GetPriorityGrouping+0x18>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	0a1b      	lsrs	r3, r3, #8
 8000c82:	f003 0307 	and.w	r3, r3, #7
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bc80      	pop	{r7}
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	db0b      	blt.n	8000cbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	f003 021f 	and.w	r2, r3, #31
 8000cac:	4906      	ldr	r1, [pc, #24]	@ (8000cc8 <__NVIC_EnableIRQ+0x34>)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	095b      	lsrs	r3, r3, #5
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr
 8000cc8:	e000e100 	.word	0xe000e100

08000ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	6039      	str	r1, [r7, #0]
 8000cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	db0a      	blt.n	8000cf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	b2da      	uxtb	r2, r3
 8000ce4:	490c      	ldr	r1, [pc, #48]	@ (8000d18 <__NVIC_SetPriority+0x4c>)
 8000ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cea:	0112      	lsls	r2, r2, #4
 8000cec:	b2d2      	uxtb	r2, r2
 8000cee:	440b      	add	r3, r1
 8000cf0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf4:	e00a      	b.n	8000d0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	b2da      	uxtb	r2, r3
 8000cfa:	4908      	ldr	r1, [pc, #32]	@ (8000d1c <__NVIC_SetPriority+0x50>)
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	f003 030f 	and.w	r3, r3, #15
 8000d02:	3b04      	subs	r3, #4
 8000d04:	0112      	lsls	r2, r2, #4
 8000d06:	b2d2      	uxtb	r2, r2
 8000d08:	440b      	add	r3, r1
 8000d0a:	761a      	strb	r2, [r3, #24]
}
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bc80      	pop	{r7}
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	e000e100 	.word	0xe000e100
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b089      	sub	sp, #36	@ 0x24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	f1c3 0307 	rsb	r3, r3, #7
 8000d3a:	2b04      	cmp	r3, #4
 8000d3c:	bf28      	it	cs
 8000d3e:	2304      	movcs	r3, #4
 8000d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	3304      	adds	r3, #4
 8000d46:	2b06      	cmp	r3, #6
 8000d48:	d902      	bls.n	8000d50 <NVIC_EncodePriority+0x30>
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	3b03      	subs	r3, #3
 8000d4e:	e000      	b.n	8000d52 <NVIC_EncodePriority+0x32>
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d54:	f04f 32ff 	mov.w	r2, #4294967295
 8000d58:	69bb      	ldr	r3, [r7, #24]
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	43da      	mvns	r2, r3
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	401a      	ands	r2, r3
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d68:	f04f 31ff 	mov.w	r1, #4294967295
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d72:	43d9      	mvns	r1, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d78:	4313      	orrs	r3, r2
         );
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3724      	adds	r7, #36	@ 0x24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr

08000d84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff ff4f 	bl	8000c30 <__NVIC_SetPriorityGrouping>
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b086      	sub	sp, #24
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	4603      	mov	r3, r0
 8000da2:	60b9      	str	r1, [r7, #8]
 8000da4:	607a      	str	r2, [r7, #4]
 8000da6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dac:	f7ff ff64 	bl	8000c78 <__NVIC_GetPriorityGrouping>
 8000db0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000db2:	687a      	ldr	r2, [r7, #4]
 8000db4:	68b9      	ldr	r1, [r7, #8]
 8000db6:	6978      	ldr	r0, [r7, #20]
 8000db8:	f7ff ffb2 	bl	8000d20 <NVIC_EncodePriority>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff81 	bl	8000ccc <__NVIC_SetPriority>
}
 8000dca:	bf00      	nop
 8000dcc:	3718      	adds	r7, #24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	4603      	mov	r3, r0
 8000dda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ff57 	bl	8000c94 <__NVIC_EnableIRQ>
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000dee:	b480      	push	{r7}
 8000df0:	b085      	sub	sp, #20
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000df6:	2300      	movs	r3, #0
 8000df8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d008      	beq.n	8000e18 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2204      	movs	r2, #4
 8000e0a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000e14:	2301      	movs	r3, #1
 8000e16:	e020      	b.n	8000e5a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f022 020e 	bic.w	r2, r2, #14
 8000e26:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f022 0201 	bic.w	r2, r2, #1
 8000e36:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e40:	2101      	movs	r1, #1
 8000e42:	fa01 f202 	lsl.w	r2, r1, r2
 8000e46:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2200      	movs	r2, #0
 8000e54:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3714      	adds	r7, #20
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr

08000e64 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d005      	beq.n	8000e88 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2204      	movs	r2, #4
 8000e80:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	73fb      	strb	r3, [r7, #15]
 8000e86:	e0d6      	b.n	8001036 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f022 020e 	bic.w	r2, r2, #14
 8000e96:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f022 0201 	bic.w	r2, r2, #1
 8000ea6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b64      	ldr	r3, [pc, #400]	@ (8001040 <HAL_DMA_Abort_IT+0x1dc>)
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d958      	bls.n	8000f66 <HAL_DMA_Abort_IT+0x102>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a62      	ldr	r2, [pc, #392]	@ (8001044 <HAL_DMA_Abort_IT+0x1e0>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d04f      	beq.n	8000f5e <HAL_DMA_Abort_IT+0xfa>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a61      	ldr	r2, [pc, #388]	@ (8001048 <HAL_DMA_Abort_IT+0x1e4>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d048      	beq.n	8000f5a <HAL_DMA_Abort_IT+0xf6>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a5f      	ldr	r2, [pc, #380]	@ (800104c <HAL_DMA_Abort_IT+0x1e8>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d040      	beq.n	8000f54 <HAL_DMA_Abort_IT+0xf0>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a5e      	ldr	r2, [pc, #376]	@ (8001050 <HAL_DMA_Abort_IT+0x1ec>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d038      	beq.n	8000f4e <HAL_DMA_Abort_IT+0xea>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a5c      	ldr	r2, [pc, #368]	@ (8001054 <HAL_DMA_Abort_IT+0x1f0>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d030      	beq.n	8000f48 <HAL_DMA_Abort_IT+0xe4>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a5b      	ldr	r2, [pc, #364]	@ (8001058 <HAL_DMA_Abort_IT+0x1f4>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d028      	beq.n	8000f42 <HAL_DMA_Abort_IT+0xde>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a52      	ldr	r2, [pc, #328]	@ (8001040 <HAL_DMA_Abort_IT+0x1dc>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d020      	beq.n	8000f3c <HAL_DMA_Abort_IT+0xd8>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a57      	ldr	r2, [pc, #348]	@ (800105c <HAL_DMA_Abort_IT+0x1f8>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d019      	beq.n	8000f38 <HAL_DMA_Abort_IT+0xd4>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a55      	ldr	r2, [pc, #340]	@ (8001060 <HAL_DMA_Abort_IT+0x1fc>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d012      	beq.n	8000f34 <HAL_DMA_Abort_IT+0xd0>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a54      	ldr	r2, [pc, #336]	@ (8001064 <HAL_DMA_Abort_IT+0x200>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d00a      	beq.n	8000f2e <HAL_DMA_Abort_IT+0xca>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a52      	ldr	r2, [pc, #328]	@ (8001068 <HAL_DMA_Abort_IT+0x204>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d102      	bne.n	8000f28 <HAL_DMA_Abort_IT+0xc4>
 8000f22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f26:	e01b      	b.n	8000f60 <HAL_DMA_Abort_IT+0xfc>
 8000f28:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f2c:	e018      	b.n	8000f60 <HAL_DMA_Abort_IT+0xfc>
 8000f2e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f32:	e015      	b.n	8000f60 <HAL_DMA_Abort_IT+0xfc>
 8000f34:	2310      	movs	r3, #16
 8000f36:	e013      	b.n	8000f60 <HAL_DMA_Abort_IT+0xfc>
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e011      	b.n	8000f60 <HAL_DMA_Abort_IT+0xfc>
 8000f3c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000f40:	e00e      	b.n	8000f60 <HAL_DMA_Abort_IT+0xfc>
 8000f42:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000f46:	e00b      	b.n	8000f60 <HAL_DMA_Abort_IT+0xfc>
 8000f48:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f4c:	e008      	b.n	8000f60 <HAL_DMA_Abort_IT+0xfc>
 8000f4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f52:	e005      	b.n	8000f60 <HAL_DMA_Abort_IT+0xfc>
 8000f54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f58:	e002      	b.n	8000f60 <HAL_DMA_Abort_IT+0xfc>
 8000f5a:	2310      	movs	r3, #16
 8000f5c:	e000      	b.n	8000f60 <HAL_DMA_Abort_IT+0xfc>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	4a42      	ldr	r2, [pc, #264]	@ (800106c <HAL_DMA_Abort_IT+0x208>)
 8000f62:	6053      	str	r3, [r2, #4]
 8000f64:	e057      	b.n	8001016 <HAL_DMA_Abort_IT+0x1b2>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a36      	ldr	r2, [pc, #216]	@ (8001044 <HAL_DMA_Abort_IT+0x1e0>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d04f      	beq.n	8001010 <HAL_DMA_Abort_IT+0x1ac>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a34      	ldr	r2, [pc, #208]	@ (8001048 <HAL_DMA_Abort_IT+0x1e4>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d048      	beq.n	800100c <HAL_DMA_Abort_IT+0x1a8>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a33      	ldr	r2, [pc, #204]	@ (800104c <HAL_DMA_Abort_IT+0x1e8>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d040      	beq.n	8001006 <HAL_DMA_Abort_IT+0x1a2>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a31      	ldr	r2, [pc, #196]	@ (8001050 <HAL_DMA_Abort_IT+0x1ec>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d038      	beq.n	8001000 <HAL_DMA_Abort_IT+0x19c>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a30      	ldr	r2, [pc, #192]	@ (8001054 <HAL_DMA_Abort_IT+0x1f0>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d030      	beq.n	8000ffa <HAL_DMA_Abort_IT+0x196>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a2e      	ldr	r2, [pc, #184]	@ (8001058 <HAL_DMA_Abort_IT+0x1f4>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d028      	beq.n	8000ff4 <HAL_DMA_Abort_IT+0x190>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a26      	ldr	r2, [pc, #152]	@ (8001040 <HAL_DMA_Abort_IT+0x1dc>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d020      	beq.n	8000fee <HAL_DMA_Abort_IT+0x18a>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a2a      	ldr	r2, [pc, #168]	@ (800105c <HAL_DMA_Abort_IT+0x1f8>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d019      	beq.n	8000fea <HAL_DMA_Abort_IT+0x186>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a29      	ldr	r2, [pc, #164]	@ (8001060 <HAL_DMA_Abort_IT+0x1fc>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d012      	beq.n	8000fe6 <HAL_DMA_Abort_IT+0x182>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a27      	ldr	r2, [pc, #156]	@ (8001064 <HAL_DMA_Abort_IT+0x200>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d00a      	beq.n	8000fe0 <HAL_DMA_Abort_IT+0x17c>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a26      	ldr	r2, [pc, #152]	@ (8001068 <HAL_DMA_Abort_IT+0x204>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d102      	bne.n	8000fda <HAL_DMA_Abort_IT+0x176>
 8000fd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fd8:	e01b      	b.n	8001012 <HAL_DMA_Abort_IT+0x1ae>
 8000fda:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fde:	e018      	b.n	8001012 <HAL_DMA_Abort_IT+0x1ae>
 8000fe0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fe4:	e015      	b.n	8001012 <HAL_DMA_Abort_IT+0x1ae>
 8000fe6:	2310      	movs	r3, #16
 8000fe8:	e013      	b.n	8001012 <HAL_DMA_Abort_IT+0x1ae>
 8000fea:	2301      	movs	r3, #1
 8000fec:	e011      	b.n	8001012 <HAL_DMA_Abort_IT+0x1ae>
 8000fee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000ff2:	e00e      	b.n	8001012 <HAL_DMA_Abort_IT+0x1ae>
 8000ff4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000ff8:	e00b      	b.n	8001012 <HAL_DMA_Abort_IT+0x1ae>
 8000ffa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ffe:	e008      	b.n	8001012 <HAL_DMA_Abort_IT+0x1ae>
 8001000:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001004:	e005      	b.n	8001012 <HAL_DMA_Abort_IT+0x1ae>
 8001006:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800100a:	e002      	b.n	8001012 <HAL_DMA_Abort_IT+0x1ae>
 800100c:	2310      	movs	r3, #16
 800100e:	e000      	b.n	8001012 <HAL_DMA_Abort_IT+0x1ae>
 8001010:	2301      	movs	r3, #1
 8001012:	4a17      	ldr	r2, [pc, #92]	@ (8001070 <HAL_DMA_Abort_IT+0x20c>)
 8001014:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2201      	movs	r2, #1
 800101a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800102a:	2b00      	cmp	r3, #0
 800102c:	d003      	beq.n	8001036 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	4798      	blx	r3
    } 
  }
  return status;
 8001036:	7bfb      	ldrb	r3, [r7, #15]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40020080 	.word	0x40020080
 8001044:	40020008 	.word	0x40020008
 8001048:	4002001c 	.word	0x4002001c
 800104c:	40020030 	.word	0x40020030
 8001050:	40020044 	.word	0x40020044
 8001054:	40020058 	.word	0x40020058
 8001058:	4002006c 	.word	0x4002006c
 800105c:	40020408 	.word	0x40020408
 8001060:	4002041c 	.word	0x4002041c
 8001064:	40020430 	.word	0x40020430
 8001068:	40020444 	.word	0x40020444
 800106c:	40020400 	.word	0x40020400
 8001070:	40020000 	.word	0x40020000

08001074 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001074:	b480      	push	{r7}
 8001076:	b08b      	sub	sp, #44	@ 0x2c
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800107e:	2300      	movs	r3, #0
 8001080:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001082:	2300      	movs	r3, #0
 8001084:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001086:	e179      	b.n	800137c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001088:	2201      	movs	r2, #1
 800108a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	69fa      	ldr	r2, [r7, #28]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	f040 8168 	bne.w	8001376 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	4a96      	ldr	r2, [pc, #600]	@ (8001304 <HAL_GPIO_Init+0x290>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d05e      	beq.n	800116e <HAL_GPIO_Init+0xfa>
 80010b0:	4a94      	ldr	r2, [pc, #592]	@ (8001304 <HAL_GPIO_Init+0x290>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d875      	bhi.n	80011a2 <HAL_GPIO_Init+0x12e>
 80010b6:	4a94      	ldr	r2, [pc, #592]	@ (8001308 <HAL_GPIO_Init+0x294>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d058      	beq.n	800116e <HAL_GPIO_Init+0xfa>
 80010bc:	4a92      	ldr	r2, [pc, #584]	@ (8001308 <HAL_GPIO_Init+0x294>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d86f      	bhi.n	80011a2 <HAL_GPIO_Init+0x12e>
 80010c2:	4a92      	ldr	r2, [pc, #584]	@ (800130c <HAL_GPIO_Init+0x298>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d052      	beq.n	800116e <HAL_GPIO_Init+0xfa>
 80010c8:	4a90      	ldr	r2, [pc, #576]	@ (800130c <HAL_GPIO_Init+0x298>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d869      	bhi.n	80011a2 <HAL_GPIO_Init+0x12e>
 80010ce:	4a90      	ldr	r2, [pc, #576]	@ (8001310 <HAL_GPIO_Init+0x29c>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d04c      	beq.n	800116e <HAL_GPIO_Init+0xfa>
 80010d4:	4a8e      	ldr	r2, [pc, #568]	@ (8001310 <HAL_GPIO_Init+0x29c>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d863      	bhi.n	80011a2 <HAL_GPIO_Init+0x12e>
 80010da:	4a8e      	ldr	r2, [pc, #568]	@ (8001314 <HAL_GPIO_Init+0x2a0>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d046      	beq.n	800116e <HAL_GPIO_Init+0xfa>
 80010e0:	4a8c      	ldr	r2, [pc, #560]	@ (8001314 <HAL_GPIO_Init+0x2a0>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d85d      	bhi.n	80011a2 <HAL_GPIO_Init+0x12e>
 80010e6:	2b12      	cmp	r3, #18
 80010e8:	d82a      	bhi.n	8001140 <HAL_GPIO_Init+0xcc>
 80010ea:	2b12      	cmp	r3, #18
 80010ec:	d859      	bhi.n	80011a2 <HAL_GPIO_Init+0x12e>
 80010ee:	a201      	add	r2, pc, #4	@ (adr r2, 80010f4 <HAL_GPIO_Init+0x80>)
 80010f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f4:	0800116f 	.word	0x0800116f
 80010f8:	08001149 	.word	0x08001149
 80010fc:	0800115b 	.word	0x0800115b
 8001100:	0800119d 	.word	0x0800119d
 8001104:	080011a3 	.word	0x080011a3
 8001108:	080011a3 	.word	0x080011a3
 800110c:	080011a3 	.word	0x080011a3
 8001110:	080011a3 	.word	0x080011a3
 8001114:	080011a3 	.word	0x080011a3
 8001118:	080011a3 	.word	0x080011a3
 800111c:	080011a3 	.word	0x080011a3
 8001120:	080011a3 	.word	0x080011a3
 8001124:	080011a3 	.word	0x080011a3
 8001128:	080011a3 	.word	0x080011a3
 800112c:	080011a3 	.word	0x080011a3
 8001130:	080011a3 	.word	0x080011a3
 8001134:	080011a3 	.word	0x080011a3
 8001138:	08001151 	.word	0x08001151
 800113c:	08001165 	.word	0x08001165
 8001140:	4a75      	ldr	r2, [pc, #468]	@ (8001318 <HAL_GPIO_Init+0x2a4>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d013      	beq.n	800116e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001146:	e02c      	b.n	80011a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	623b      	str	r3, [r7, #32]
          break;
 800114e:	e029      	b.n	80011a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	3304      	adds	r3, #4
 8001156:	623b      	str	r3, [r7, #32]
          break;
 8001158:	e024      	b.n	80011a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	3308      	adds	r3, #8
 8001160:	623b      	str	r3, [r7, #32]
          break;
 8001162:	e01f      	b.n	80011a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	330c      	adds	r3, #12
 800116a:	623b      	str	r3, [r7, #32]
          break;
 800116c:	e01a      	b.n	80011a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d102      	bne.n	800117c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001176:	2304      	movs	r3, #4
 8001178:	623b      	str	r3, [r7, #32]
          break;
 800117a:	e013      	b.n	80011a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d105      	bne.n	8001190 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001184:	2308      	movs	r3, #8
 8001186:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	69fa      	ldr	r2, [r7, #28]
 800118c:	611a      	str	r2, [r3, #16]
          break;
 800118e:	e009      	b.n	80011a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001190:	2308      	movs	r3, #8
 8001192:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	69fa      	ldr	r2, [r7, #28]
 8001198:	615a      	str	r2, [r3, #20]
          break;
 800119a:	e003      	b.n	80011a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800119c:	2300      	movs	r3, #0
 800119e:	623b      	str	r3, [r7, #32]
          break;
 80011a0:	e000      	b.n	80011a4 <HAL_GPIO_Init+0x130>
          break;
 80011a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	2bff      	cmp	r3, #255	@ 0xff
 80011a8:	d801      	bhi.n	80011ae <HAL_GPIO_Init+0x13a>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	e001      	b.n	80011b2 <HAL_GPIO_Init+0x13e>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	3304      	adds	r3, #4
 80011b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	2bff      	cmp	r3, #255	@ 0xff
 80011b8:	d802      	bhi.n	80011c0 <HAL_GPIO_Init+0x14c>
 80011ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	e002      	b.n	80011c6 <HAL_GPIO_Init+0x152>
 80011c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011c2:	3b08      	subs	r3, #8
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	210f      	movs	r1, #15
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	fa01 f303 	lsl.w	r3, r1, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	401a      	ands	r2, r3
 80011d8:	6a39      	ldr	r1, [r7, #32]
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	fa01 f303 	lsl.w	r3, r1, r3
 80011e0:	431a      	orrs	r2, r3
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	f000 80c1 	beq.w	8001376 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011f4:	4b49      	ldr	r3, [pc, #292]	@ (800131c <HAL_GPIO_Init+0x2a8>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	4a48      	ldr	r2, [pc, #288]	@ (800131c <HAL_GPIO_Init+0x2a8>)
 80011fa:	f043 0301 	orr.w	r3, r3, #1
 80011fe:	6193      	str	r3, [r2, #24]
 8001200:	4b46      	ldr	r3, [pc, #280]	@ (800131c <HAL_GPIO_Init+0x2a8>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800120c:	4a44      	ldr	r2, [pc, #272]	@ (8001320 <HAL_GPIO_Init+0x2ac>)
 800120e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001210:	089b      	lsrs	r3, r3, #2
 8001212:	3302      	adds	r3, #2
 8001214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001218:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800121a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800121c:	f003 0303 	and.w	r3, r3, #3
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	220f      	movs	r2, #15
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	68fa      	ldr	r2, [r7, #12]
 800122c:	4013      	ands	r3, r2
 800122e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4a3c      	ldr	r2, [pc, #240]	@ (8001324 <HAL_GPIO_Init+0x2b0>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d01f      	beq.n	8001278 <HAL_GPIO_Init+0x204>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a3b      	ldr	r2, [pc, #236]	@ (8001328 <HAL_GPIO_Init+0x2b4>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d019      	beq.n	8001274 <HAL_GPIO_Init+0x200>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a3a      	ldr	r2, [pc, #232]	@ (800132c <HAL_GPIO_Init+0x2b8>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d013      	beq.n	8001270 <HAL_GPIO_Init+0x1fc>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a39      	ldr	r2, [pc, #228]	@ (8001330 <HAL_GPIO_Init+0x2bc>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d00d      	beq.n	800126c <HAL_GPIO_Init+0x1f8>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a38      	ldr	r2, [pc, #224]	@ (8001334 <HAL_GPIO_Init+0x2c0>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d007      	beq.n	8001268 <HAL_GPIO_Init+0x1f4>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a37      	ldr	r2, [pc, #220]	@ (8001338 <HAL_GPIO_Init+0x2c4>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d101      	bne.n	8001264 <HAL_GPIO_Init+0x1f0>
 8001260:	2305      	movs	r3, #5
 8001262:	e00a      	b.n	800127a <HAL_GPIO_Init+0x206>
 8001264:	2306      	movs	r3, #6
 8001266:	e008      	b.n	800127a <HAL_GPIO_Init+0x206>
 8001268:	2304      	movs	r3, #4
 800126a:	e006      	b.n	800127a <HAL_GPIO_Init+0x206>
 800126c:	2303      	movs	r3, #3
 800126e:	e004      	b.n	800127a <HAL_GPIO_Init+0x206>
 8001270:	2302      	movs	r3, #2
 8001272:	e002      	b.n	800127a <HAL_GPIO_Init+0x206>
 8001274:	2301      	movs	r3, #1
 8001276:	e000      	b.n	800127a <HAL_GPIO_Init+0x206>
 8001278:	2300      	movs	r3, #0
 800127a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800127c:	f002 0203 	and.w	r2, r2, #3
 8001280:	0092      	lsls	r2, r2, #2
 8001282:	4093      	lsls	r3, r2
 8001284:	68fa      	ldr	r2, [r7, #12]
 8001286:	4313      	orrs	r3, r2
 8001288:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800128a:	4925      	ldr	r1, [pc, #148]	@ (8001320 <HAL_GPIO_Init+0x2ac>)
 800128c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800128e:	089b      	lsrs	r3, r3, #2
 8001290:	3302      	adds	r3, #2
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d006      	beq.n	80012b2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012a4:	4b25      	ldr	r3, [pc, #148]	@ (800133c <HAL_GPIO_Init+0x2c8>)
 80012a6:	689a      	ldr	r2, [r3, #8]
 80012a8:	4924      	ldr	r1, [pc, #144]	@ (800133c <HAL_GPIO_Init+0x2c8>)
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	608b      	str	r3, [r1, #8]
 80012b0:	e006      	b.n	80012c0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012b2:	4b22      	ldr	r3, [pc, #136]	@ (800133c <HAL_GPIO_Init+0x2c8>)
 80012b4:	689a      	ldr	r2, [r3, #8]
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	43db      	mvns	r3, r3
 80012ba:	4920      	ldr	r1, [pc, #128]	@ (800133c <HAL_GPIO_Init+0x2c8>)
 80012bc:	4013      	ands	r3, r2
 80012be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d006      	beq.n	80012da <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012cc:	4b1b      	ldr	r3, [pc, #108]	@ (800133c <HAL_GPIO_Init+0x2c8>)
 80012ce:	68da      	ldr	r2, [r3, #12]
 80012d0:	491a      	ldr	r1, [pc, #104]	@ (800133c <HAL_GPIO_Init+0x2c8>)
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	60cb      	str	r3, [r1, #12]
 80012d8:	e006      	b.n	80012e8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012da:	4b18      	ldr	r3, [pc, #96]	@ (800133c <HAL_GPIO_Init+0x2c8>)
 80012dc:	68da      	ldr	r2, [r3, #12]
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	43db      	mvns	r3, r3
 80012e2:	4916      	ldr	r1, [pc, #88]	@ (800133c <HAL_GPIO_Init+0x2c8>)
 80012e4:	4013      	ands	r3, r2
 80012e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d025      	beq.n	8001340 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012f4:	4b11      	ldr	r3, [pc, #68]	@ (800133c <HAL_GPIO_Init+0x2c8>)
 80012f6:	685a      	ldr	r2, [r3, #4]
 80012f8:	4910      	ldr	r1, [pc, #64]	@ (800133c <HAL_GPIO_Init+0x2c8>)
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	604b      	str	r3, [r1, #4]
 8001300:	e025      	b.n	800134e <HAL_GPIO_Init+0x2da>
 8001302:	bf00      	nop
 8001304:	10320000 	.word	0x10320000
 8001308:	10310000 	.word	0x10310000
 800130c:	10220000 	.word	0x10220000
 8001310:	10210000 	.word	0x10210000
 8001314:	10120000 	.word	0x10120000
 8001318:	10110000 	.word	0x10110000
 800131c:	40021000 	.word	0x40021000
 8001320:	40010000 	.word	0x40010000
 8001324:	40010800 	.word	0x40010800
 8001328:	40010c00 	.word	0x40010c00
 800132c:	40011000 	.word	0x40011000
 8001330:	40011400 	.word	0x40011400
 8001334:	40011800 	.word	0x40011800
 8001338:	40011c00 	.word	0x40011c00
 800133c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001340:	4b15      	ldr	r3, [pc, #84]	@ (8001398 <HAL_GPIO_Init+0x324>)
 8001342:	685a      	ldr	r2, [r3, #4]
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	43db      	mvns	r3, r3
 8001348:	4913      	ldr	r1, [pc, #76]	@ (8001398 <HAL_GPIO_Init+0x324>)
 800134a:	4013      	ands	r3, r2
 800134c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d006      	beq.n	8001368 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800135a:	4b0f      	ldr	r3, [pc, #60]	@ (8001398 <HAL_GPIO_Init+0x324>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	490e      	ldr	r1, [pc, #56]	@ (8001398 <HAL_GPIO_Init+0x324>)
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	4313      	orrs	r3, r2
 8001364:	600b      	str	r3, [r1, #0]
 8001366:	e006      	b.n	8001376 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001368:	4b0b      	ldr	r3, [pc, #44]	@ (8001398 <HAL_GPIO_Init+0x324>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	43db      	mvns	r3, r3
 8001370:	4909      	ldr	r1, [pc, #36]	@ (8001398 <HAL_GPIO_Init+0x324>)
 8001372:	4013      	ands	r3, r2
 8001374:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001378:	3301      	adds	r3, #1
 800137a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001382:	fa22 f303 	lsr.w	r3, r2, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	f47f ae7e 	bne.w	8001088 <HAL_GPIO_Init+0x14>
  }
}
 800138c:	bf00      	nop
 800138e:	bf00      	nop
 8001390:	372c      	adds	r7, #44	@ 0x2c
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr
 8001398:	40010400 	.word	0x40010400

0800139c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689a      	ldr	r2, [r3, #8]
 80013ac:	887b      	ldrh	r3, [r7, #2]
 80013ae:	4013      	ands	r3, r2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d002      	beq.n	80013ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013b4:	2301      	movs	r3, #1
 80013b6:	73fb      	strb	r3, [r7, #15]
 80013b8:	e001      	b.n	80013be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013ba:	2300      	movs	r3, #0
 80013bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013be:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr

080013ca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b083      	sub	sp, #12
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
 80013d2:	460b      	mov	r3, r1
 80013d4:	807b      	strh	r3, [r7, #2]
 80013d6:	4613      	mov	r3, r2
 80013d8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013da:	787b      	ldrb	r3, [r7, #1]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013e0:	887a      	ldrh	r2, [r7, #2]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013e6:	e003      	b.n	80013f0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013e8:	887b      	ldrh	r3, [r7, #2]
 80013ea:	041a      	lsls	r2, r3, #16
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	611a      	str	r2, [r3, #16]
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc80      	pop	{r7}
 80013f8:	4770      	bx	lr
	...

080013fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e272      	b.n	80018f4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b00      	cmp	r3, #0
 8001418:	f000 8087 	beq.w	800152a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800141c:	4b92      	ldr	r3, [pc, #584]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f003 030c 	and.w	r3, r3, #12
 8001424:	2b04      	cmp	r3, #4
 8001426:	d00c      	beq.n	8001442 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001428:	4b8f      	ldr	r3, [pc, #572]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f003 030c 	and.w	r3, r3, #12
 8001430:	2b08      	cmp	r3, #8
 8001432:	d112      	bne.n	800145a <HAL_RCC_OscConfig+0x5e>
 8001434:	4b8c      	ldr	r3, [pc, #560]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800143c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001440:	d10b      	bne.n	800145a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001442:	4b89      	ldr	r3, [pc, #548]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d06c      	beq.n	8001528 <HAL_RCC_OscConfig+0x12c>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d168      	bne.n	8001528 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e24c      	b.n	80018f4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001462:	d106      	bne.n	8001472 <HAL_RCC_OscConfig+0x76>
 8001464:	4b80      	ldr	r3, [pc, #512]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a7f      	ldr	r2, [pc, #508]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 800146a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800146e:	6013      	str	r3, [r2, #0]
 8001470:	e02e      	b.n	80014d0 <HAL_RCC_OscConfig+0xd4>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d10c      	bne.n	8001494 <HAL_RCC_OscConfig+0x98>
 800147a:	4b7b      	ldr	r3, [pc, #492]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a7a      	ldr	r2, [pc, #488]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001480:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	4b78      	ldr	r3, [pc, #480]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a77      	ldr	r2, [pc, #476]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 800148c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	e01d      	b.n	80014d0 <HAL_RCC_OscConfig+0xd4>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800149c:	d10c      	bne.n	80014b8 <HAL_RCC_OscConfig+0xbc>
 800149e:	4b72      	ldr	r3, [pc, #456]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a71      	ldr	r2, [pc, #452]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	4b6f      	ldr	r3, [pc, #444]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a6e      	ldr	r2, [pc, #440]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014b4:	6013      	str	r3, [r2, #0]
 80014b6:	e00b      	b.n	80014d0 <HAL_RCC_OscConfig+0xd4>
 80014b8:	4b6b      	ldr	r3, [pc, #428]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a6a      	ldr	r2, [pc, #424]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014c2:	6013      	str	r3, [r2, #0]
 80014c4:	4b68      	ldr	r3, [pc, #416]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a67      	ldr	r2, [pc, #412]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d013      	beq.n	8001500 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d8:	f7ff fba0 	bl	8000c1c <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014e0:	f7ff fb9c 	bl	8000c1c <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b64      	cmp	r3, #100	@ 0x64
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e200      	b.n	80018f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f2:	4b5d      	ldr	r3, [pc, #372]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d0f0      	beq.n	80014e0 <HAL_RCC_OscConfig+0xe4>
 80014fe:	e014      	b.n	800152a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001500:	f7ff fb8c 	bl	8000c1c <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001508:	f7ff fb88 	bl	8000c1c <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b64      	cmp	r3, #100	@ 0x64
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e1ec      	b.n	80018f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800151a:	4b53      	ldr	r3, [pc, #332]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f0      	bne.n	8001508 <HAL_RCC_OscConfig+0x10c>
 8001526:	e000      	b.n	800152a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001528:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d063      	beq.n	80015fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001536:	4b4c      	ldr	r3, [pc, #304]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f003 030c 	and.w	r3, r3, #12
 800153e:	2b00      	cmp	r3, #0
 8001540:	d00b      	beq.n	800155a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001542:	4b49      	ldr	r3, [pc, #292]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 030c 	and.w	r3, r3, #12
 800154a:	2b08      	cmp	r3, #8
 800154c:	d11c      	bne.n	8001588 <HAL_RCC_OscConfig+0x18c>
 800154e:	4b46      	ldr	r3, [pc, #280]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d116      	bne.n	8001588 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800155a:	4b43      	ldr	r3, [pc, #268]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d005      	beq.n	8001572 <HAL_RCC_OscConfig+0x176>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	691b      	ldr	r3, [r3, #16]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d001      	beq.n	8001572 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e1c0      	b.n	80018f4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001572:	4b3d      	ldr	r3, [pc, #244]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	4939      	ldr	r1, [pc, #228]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001582:	4313      	orrs	r3, r2
 8001584:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001586:	e03a      	b.n	80015fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d020      	beq.n	80015d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001590:	4b36      	ldr	r3, [pc, #216]	@ (800166c <HAL_RCC_OscConfig+0x270>)
 8001592:	2201      	movs	r2, #1
 8001594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001596:	f7ff fb41 	bl	8000c1c <HAL_GetTick>
 800159a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800159e:	f7ff fb3d 	bl	8000c1c <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e1a1      	b.n	80018f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0f0      	beq.n	800159e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015bc:	4b2a      	ldr	r3, [pc, #168]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	695b      	ldr	r3, [r3, #20]
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	4927      	ldr	r1, [pc, #156]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	600b      	str	r3, [r1, #0]
 80015d0:	e015      	b.n	80015fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015d2:	4b26      	ldr	r3, [pc, #152]	@ (800166c <HAL_RCC_OscConfig+0x270>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d8:	f7ff fb20 	bl	8000c1c <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e0:	f7ff fb1c 	bl	8000c1c <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e180      	b.n	80018f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1f0      	bne.n	80015e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0308 	and.w	r3, r3, #8
 8001606:	2b00      	cmp	r3, #0
 8001608:	d03a      	beq.n	8001680 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d019      	beq.n	8001646 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001612:	4b17      	ldr	r3, [pc, #92]	@ (8001670 <HAL_RCC_OscConfig+0x274>)
 8001614:	2201      	movs	r2, #1
 8001616:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001618:	f7ff fb00 	bl	8000c1c <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001620:	f7ff fafc 	bl	8000c1c <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e160      	b.n	80018f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001632:	4b0d      	ldr	r3, [pc, #52]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d0f0      	beq.n	8001620 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800163e:	2001      	movs	r0, #1
 8001640:	f000 fafe 	bl	8001c40 <RCC_Delay>
 8001644:	e01c      	b.n	8001680 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001646:	4b0a      	ldr	r3, [pc, #40]	@ (8001670 <HAL_RCC_OscConfig+0x274>)
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800164c:	f7ff fae6 	bl	8000c1c <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001652:	e00f      	b.n	8001674 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001654:	f7ff fae2 	bl	8000c1c <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d908      	bls.n	8001674 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e146      	b.n	80018f4 <HAL_RCC_OscConfig+0x4f8>
 8001666:	bf00      	nop
 8001668:	40021000 	.word	0x40021000
 800166c:	42420000 	.word	0x42420000
 8001670:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001674:	4b92      	ldr	r3, [pc, #584]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 8001676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1e9      	bne.n	8001654 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	2b00      	cmp	r3, #0
 800168a:	f000 80a6 	beq.w	80017da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800168e:	2300      	movs	r3, #0
 8001690:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001692:	4b8b      	ldr	r3, [pc, #556]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 8001694:	69db      	ldr	r3, [r3, #28]
 8001696:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d10d      	bne.n	80016ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800169e:	4b88      	ldr	r3, [pc, #544]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	4a87      	ldr	r2, [pc, #540]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 80016a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016a8:	61d3      	str	r3, [r2, #28]
 80016aa:	4b85      	ldr	r3, [pc, #532]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016b6:	2301      	movs	r3, #1
 80016b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ba:	4b82      	ldr	r3, [pc, #520]	@ (80018c4 <HAL_RCC_OscConfig+0x4c8>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d118      	bne.n	80016f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016c6:	4b7f      	ldr	r3, [pc, #508]	@ (80018c4 <HAL_RCC_OscConfig+0x4c8>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a7e      	ldr	r2, [pc, #504]	@ (80018c4 <HAL_RCC_OscConfig+0x4c8>)
 80016cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016d2:	f7ff faa3 	bl	8000c1c <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016da:	f7ff fa9f 	bl	8000c1c <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b64      	cmp	r3, #100	@ 0x64
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e103      	b.n	80018f4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ec:	4b75      	ldr	r3, [pc, #468]	@ (80018c4 <HAL_RCC_OscConfig+0x4c8>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0f0      	beq.n	80016da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d106      	bne.n	800170e <HAL_RCC_OscConfig+0x312>
 8001700:	4b6f      	ldr	r3, [pc, #444]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 8001702:	6a1b      	ldr	r3, [r3, #32]
 8001704:	4a6e      	ldr	r2, [pc, #440]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 8001706:	f043 0301 	orr.w	r3, r3, #1
 800170a:	6213      	str	r3, [r2, #32]
 800170c:	e02d      	b.n	800176a <HAL_RCC_OscConfig+0x36e>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d10c      	bne.n	8001730 <HAL_RCC_OscConfig+0x334>
 8001716:	4b6a      	ldr	r3, [pc, #424]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	4a69      	ldr	r2, [pc, #420]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 800171c:	f023 0301 	bic.w	r3, r3, #1
 8001720:	6213      	str	r3, [r2, #32]
 8001722:	4b67      	ldr	r3, [pc, #412]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 8001724:	6a1b      	ldr	r3, [r3, #32]
 8001726:	4a66      	ldr	r2, [pc, #408]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 8001728:	f023 0304 	bic.w	r3, r3, #4
 800172c:	6213      	str	r3, [r2, #32]
 800172e:	e01c      	b.n	800176a <HAL_RCC_OscConfig+0x36e>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	2b05      	cmp	r3, #5
 8001736:	d10c      	bne.n	8001752 <HAL_RCC_OscConfig+0x356>
 8001738:	4b61      	ldr	r3, [pc, #388]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	4a60      	ldr	r2, [pc, #384]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 800173e:	f043 0304 	orr.w	r3, r3, #4
 8001742:	6213      	str	r3, [r2, #32]
 8001744:	4b5e      	ldr	r3, [pc, #376]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	4a5d      	ldr	r2, [pc, #372]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	6213      	str	r3, [r2, #32]
 8001750:	e00b      	b.n	800176a <HAL_RCC_OscConfig+0x36e>
 8001752:	4b5b      	ldr	r3, [pc, #364]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 8001754:	6a1b      	ldr	r3, [r3, #32]
 8001756:	4a5a      	ldr	r2, [pc, #360]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 8001758:	f023 0301 	bic.w	r3, r3, #1
 800175c:	6213      	str	r3, [r2, #32]
 800175e:	4b58      	ldr	r3, [pc, #352]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 8001760:	6a1b      	ldr	r3, [r3, #32]
 8001762:	4a57      	ldr	r2, [pc, #348]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 8001764:	f023 0304 	bic.w	r3, r3, #4
 8001768:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d015      	beq.n	800179e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001772:	f7ff fa53 	bl	8000c1c <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001778:	e00a      	b.n	8001790 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800177a:	f7ff fa4f 	bl	8000c1c <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001788:	4293      	cmp	r3, r2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e0b1      	b.n	80018f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001790:	4b4b      	ldr	r3, [pc, #300]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 8001792:	6a1b      	ldr	r3, [r3, #32]
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d0ee      	beq.n	800177a <HAL_RCC_OscConfig+0x37e>
 800179c:	e014      	b.n	80017c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800179e:	f7ff fa3d 	bl	8000c1c <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a4:	e00a      	b.n	80017bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017a6:	f7ff fa39 	bl	8000c1c <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e09b      	b.n	80018f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017bc:	4b40      	ldr	r3, [pc, #256]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 80017be:	6a1b      	ldr	r3, [r3, #32]
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1ee      	bne.n	80017a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017c8:	7dfb      	ldrb	r3, [r7, #23]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d105      	bne.n	80017da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ce:	4b3c      	ldr	r3, [pc, #240]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	4a3b      	ldr	r2, [pc, #236]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 80017d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	69db      	ldr	r3, [r3, #28]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f000 8087 	beq.w	80018f2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017e4:	4b36      	ldr	r3, [pc, #216]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 030c 	and.w	r3, r3, #12
 80017ec:	2b08      	cmp	r3, #8
 80017ee:	d061      	beq.n	80018b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	69db      	ldr	r3, [r3, #28]
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d146      	bne.n	8001886 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f8:	4b33      	ldr	r3, [pc, #204]	@ (80018c8 <HAL_RCC_OscConfig+0x4cc>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fe:	f7ff fa0d 	bl	8000c1c <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001804:	e008      	b.n	8001818 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001806:	f7ff fa09 	bl	8000c1c <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e06d      	b.n	80018f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001818:	4b29      	ldr	r3, [pc, #164]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1f0      	bne.n	8001806 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a1b      	ldr	r3, [r3, #32]
 8001828:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800182c:	d108      	bne.n	8001840 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800182e:	4b24      	ldr	r3, [pc, #144]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	4921      	ldr	r1, [pc, #132]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 800183c:	4313      	orrs	r3, r2
 800183e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001840:	4b1f      	ldr	r3, [pc, #124]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a19      	ldr	r1, [r3, #32]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001850:	430b      	orrs	r3, r1
 8001852:	491b      	ldr	r1, [pc, #108]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 8001854:	4313      	orrs	r3, r2
 8001856:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001858:	4b1b      	ldr	r3, [pc, #108]	@ (80018c8 <HAL_RCC_OscConfig+0x4cc>)
 800185a:	2201      	movs	r2, #1
 800185c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185e:	f7ff f9dd 	bl	8000c1c <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001864:	e008      	b.n	8001878 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001866:	f7ff f9d9 	bl	8000c1c <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e03d      	b.n	80018f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001878:	4b11      	ldr	r3, [pc, #68]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d0f0      	beq.n	8001866 <HAL_RCC_OscConfig+0x46a>
 8001884:	e035      	b.n	80018f2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001886:	4b10      	ldr	r3, [pc, #64]	@ (80018c8 <HAL_RCC_OscConfig+0x4cc>)
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188c:	f7ff f9c6 	bl	8000c1c <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001894:	f7ff f9c2 	bl	8000c1c <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e026      	b.n	80018f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018a6:	4b06      	ldr	r3, [pc, #24]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f0      	bne.n	8001894 <HAL_RCC_OscConfig+0x498>
 80018b2:	e01e      	b.n	80018f2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	69db      	ldr	r3, [r3, #28]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d107      	bne.n	80018cc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e019      	b.n	80018f4 <HAL_RCC_OscConfig+0x4f8>
 80018c0:	40021000 	.word	0x40021000
 80018c4:	40007000 	.word	0x40007000
 80018c8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018cc:	4b0b      	ldr	r3, [pc, #44]	@ (80018fc <HAL_RCC_OscConfig+0x500>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a1b      	ldr	r3, [r3, #32]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d106      	bne.n	80018ee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d001      	beq.n	80018f2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e000      	b.n	80018f4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3718      	adds	r7, #24
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40021000 	.word	0x40021000

08001900 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d101      	bne.n	8001914 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e0d0      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001914:	4b6a      	ldr	r3, [pc, #424]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0307 	and.w	r3, r3, #7
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	429a      	cmp	r2, r3
 8001920:	d910      	bls.n	8001944 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001922:	4b67      	ldr	r3, [pc, #412]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f023 0207 	bic.w	r2, r3, #7
 800192a:	4965      	ldr	r1, [pc, #404]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1c0>)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	4313      	orrs	r3, r2
 8001930:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001932:	4b63      	ldr	r3, [pc, #396]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	683a      	ldr	r2, [r7, #0]
 800193c:	429a      	cmp	r2, r3
 800193e:	d001      	beq.n	8001944 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e0b8      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d020      	beq.n	8001992 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0304 	and.w	r3, r3, #4
 8001958:	2b00      	cmp	r3, #0
 800195a:	d005      	beq.n	8001968 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800195c:	4b59      	ldr	r3, [pc, #356]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	4a58      	ldr	r2, [pc, #352]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8001962:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001966:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0308 	and.w	r3, r3, #8
 8001970:	2b00      	cmp	r3, #0
 8001972:	d005      	beq.n	8001980 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001974:	4b53      	ldr	r3, [pc, #332]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	4a52      	ldr	r2, [pc, #328]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 800197a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800197e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001980:	4b50      	ldr	r3, [pc, #320]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	494d      	ldr	r1, [pc, #308]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 800198e:	4313      	orrs	r3, r2
 8001990:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	d040      	beq.n	8001a20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d107      	bne.n	80019b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a6:	4b47      	ldr	r3, [pc, #284]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d115      	bne.n	80019de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e07f      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d107      	bne.n	80019ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019be:	4b41      	ldr	r3, [pc, #260]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d109      	bne.n	80019de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e073      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ce:	4b3d      	ldr	r3, [pc, #244]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e06b      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019de:	4b39      	ldr	r3, [pc, #228]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f023 0203 	bic.w	r2, r3, #3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	4936      	ldr	r1, [pc, #216]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 80019ec:	4313      	orrs	r3, r2
 80019ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019f0:	f7ff f914 	bl	8000c1c <HAL_GetTick>
 80019f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f6:	e00a      	b.n	8001a0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f8:	f7ff f910 	bl	8000c1c <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e053      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a0e:	4b2d      	ldr	r3, [pc, #180]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f003 020c 	and.w	r2, r3, #12
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d1eb      	bne.n	80019f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a20:	4b27      	ldr	r3, [pc, #156]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0307 	and.w	r3, r3, #7
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d210      	bcs.n	8001a50 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2e:	4b24      	ldr	r3, [pc, #144]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f023 0207 	bic.w	r2, r3, #7
 8001a36:	4922      	ldr	r1, [pc, #136]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3e:	4b20      	ldr	r3, [pc, #128]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d001      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e032      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d008      	beq.n	8001a6e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a5c:	4b19      	ldr	r3, [pc, #100]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	4916      	ldr	r1, [pc, #88]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0308 	and.w	r3, r3, #8
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d009      	beq.n	8001a8e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a7a:	4b12      	ldr	r3, [pc, #72]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	490e      	ldr	r1, [pc, #56]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a8e:	f000 f821 	bl	8001ad4 <HAL_RCC_GetSysClockFreq>
 8001a92:	4602      	mov	r2, r0
 8001a94:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	091b      	lsrs	r3, r3, #4
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	490a      	ldr	r1, [pc, #40]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8001aa0:	5ccb      	ldrb	r3, [r1, r3]
 8001aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa6:	4a09      	ldr	r2, [pc, #36]	@ (8001acc <HAL_RCC_ClockConfig+0x1cc>)
 8001aa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001aaa:	4b09      	ldr	r3, [pc, #36]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1d0>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7fe ffaa 	bl	8000a08 <HAL_InitTick>

  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40022000 	.word	0x40022000
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	080081b4 	.word	0x080081b4
 8001acc:	20000004 	.word	0x20000004
 8001ad0:	20000008 	.word	0x20000008

08001ad4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b087      	sub	sp, #28
 8001ad8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60bb      	str	r3, [r7, #8]
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001aea:	2300      	movs	r3, #0
 8001aec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001aee:	4b1e      	ldr	r3, [pc, #120]	@ (8001b68 <HAL_RCC_GetSysClockFreq+0x94>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f003 030c 	and.w	r3, r3, #12
 8001afa:	2b04      	cmp	r3, #4
 8001afc:	d002      	beq.n	8001b04 <HAL_RCC_GetSysClockFreq+0x30>
 8001afe:	2b08      	cmp	r3, #8
 8001b00:	d003      	beq.n	8001b0a <HAL_RCC_GetSysClockFreq+0x36>
 8001b02:	e027      	b.n	8001b54 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b04:	4b19      	ldr	r3, [pc, #100]	@ (8001b6c <HAL_RCC_GetSysClockFreq+0x98>)
 8001b06:	613b      	str	r3, [r7, #16]
      break;
 8001b08:	e027      	b.n	8001b5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	0c9b      	lsrs	r3, r3, #18
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	4a17      	ldr	r2, [pc, #92]	@ (8001b70 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b14:	5cd3      	ldrb	r3, [r2, r3]
 8001b16:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d010      	beq.n	8001b44 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b22:	4b11      	ldr	r3, [pc, #68]	@ (8001b68 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	0c5b      	lsrs	r3, r3, #17
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	4a11      	ldr	r2, [pc, #68]	@ (8001b74 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b2e:	5cd3      	ldrb	r3, [r2, r3]
 8001b30:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a0d      	ldr	r2, [pc, #52]	@ (8001b6c <HAL_RCC_GetSysClockFreq+0x98>)
 8001b36:	fb03 f202 	mul.w	r2, r3, r2
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b40:	617b      	str	r3, [r7, #20]
 8001b42:	e004      	b.n	8001b4e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a0c      	ldr	r2, [pc, #48]	@ (8001b78 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b48:	fb02 f303 	mul.w	r3, r2, r3
 8001b4c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	613b      	str	r3, [r7, #16]
      break;
 8001b52:	e002      	b.n	8001b5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b54:	4b05      	ldr	r3, [pc, #20]	@ (8001b6c <HAL_RCC_GetSysClockFreq+0x98>)
 8001b56:	613b      	str	r3, [r7, #16]
      break;
 8001b58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b5a:	693b      	ldr	r3, [r7, #16]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	371c      	adds	r7, #28
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc80      	pop	{r7}
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	007a1200 	.word	0x007a1200
 8001b70:	080081cc 	.word	0x080081cc
 8001b74:	080081dc 	.word	0x080081dc
 8001b78:	003d0900 	.word	0x003d0900

08001b7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b80:	4b02      	ldr	r3, [pc, #8]	@ (8001b8c <HAL_RCC_GetHCLKFreq+0x10>)
 8001b82:	681b      	ldr	r3, [r3, #0]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr
 8001b8c:	20000004 	.word	0x20000004

08001b90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b94:	f7ff fff2 	bl	8001b7c <HAL_RCC_GetHCLKFreq>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	4b05      	ldr	r3, [pc, #20]	@ (8001bb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	0a1b      	lsrs	r3, r3, #8
 8001ba0:	f003 0307 	and.w	r3, r3, #7
 8001ba4:	4903      	ldr	r1, [pc, #12]	@ (8001bb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ba6:	5ccb      	ldrb	r3, [r1, r3]
 8001ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	080081c4 	.word	0x080081c4

08001bb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bbc:	f7ff ffde 	bl	8001b7c <HAL_RCC_GetHCLKFreq>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	4b05      	ldr	r3, [pc, #20]	@ (8001bd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	0adb      	lsrs	r3, r3, #11
 8001bc8:	f003 0307 	and.w	r3, r3, #7
 8001bcc:	4903      	ldr	r1, [pc, #12]	@ (8001bdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bce:	5ccb      	ldrb	r3, [r1, r3]
 8001bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	080081c4 	.word	0x080081c4

08001be0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	220f      	movs	r2, #15
 8001bee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001bf0:	4b11      	ldr	r3, [pc, #68]	@ (8001c38 <HAL_RCC_GetClockConfig+0x58>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f003 0203 	and.w	r2, r3, #3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bfc:	4b0e      	ldr	r3, [pc, #56]	@ (8001c38 <HAL_RCC_GetClockConfig+0x58>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c08:	4b0b      	ldr	r3, [pc, #44]	@ (8001c38 <HAL_RCC_GetClockConfig+0x58>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001c14:	4b08      	ldr	r3, [pc, #32]	@ (8001c38 <HAL_RCC_GetClockConfig+0x58>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	08db      	lsrs	r3, r3, #3
 8001c1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c22:	4b06      	ldr	r3, [pc, #24]	@ (8001c3c <HAL_RCC_GetClockConfig+0x5c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0207 	and.w	r2, r3, #7
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	40022000 	.word	0x40022000

08001c40 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c48:	4b0a      	ldr	r3, [pc, #40]	@ (8001c74 <RCC_Delay+0x34>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a0a      	ldr	r2, [pc, #40]	@ (8001c78 <RCC_Delay+0x38>)
 8001c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c52:	0a5b      	lsrs	r3, r3, #9
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	fb02 f303 	mul.w	r3, r2, r3
 8001c5a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c5c:	bf00      	nop
  }
  while (Delay --);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	1e5a      	subs	r2, r3, #1
 8001c62:	60fa      	str	r2, [r7, #12]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1f9      	bne.n	8001c5c <RCC_Delay+0x1c>
}
 8001c68:	bf00      	nop
 8001c6a:	bf00      	nop
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr
 8001c74:	20000004 	.word	0x20000004
 8001c78:	10624dd3 	.word	0x10624dd3

08001c7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e041      	b.n	8001d12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d106      	bne.n	8001ca8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 f839 	bl	8001d1a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2202      	movs	r2, #2
 8001cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3304      	adds	r3, #4
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4610      	mov	r0, r2
 8001cbc:	f000 f9c2 	bl	8002044 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr

08001d2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d001      	beq.n	8001d44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e044      	b.n	8001dce <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2202      	movs	r2, #2
 8001d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68da      	ldr	r2, [r3, #12]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f042 0201 	orr.w	r2, r2, #1
 8001d5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a1d      	ldr	r2, [pc, #116]	@ (8001dd8 <HAL_TIM_Base_Start_IT+0xac>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d018      	beq.n	8001d98 <HAL_TIM_Base_Start_IT+0x6c>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a1c      	ldr	r2, [pc, #112]	@ (8001ddc <HAL_TIM_Base_Start_IT+0xb0>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d013      	beq.n	8001d98 <HAL_TIM_Base_Start_IT+0x6c>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d78:	d00e      	beq.n	8001d98 <HAL_TIM_Base_Start_IT+0x6c>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a18      	ldr	r2, [pc, #96]	@ (8001de0 <HAL_TIM_Base_Start_IT+0xb4>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d009      	beq.n	8001d98 <HAL_TIM_Base_Start_IT+0x6c>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a16      	ldr	r2, [pc, #88]	@ (8001de4 <HAL_TIM_Base_Start_IT+0xb8>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d004      	beq.n	8001d98 <HAL_TIM_Base_Start_IT+0x6c>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a15      	ldr	r2, [pc, #84]	@ (8001de8 <HAL_TIM_Base_Start_IT+0xbc>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d111      	bne.n	8001dbc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2b06      	cmp	r3, #6
 8001da8:	d010      	beq.n	8001dcc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f042 0201 	orr.w	r2, r2, #1
 8001db8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dba:	e007      	b.n	8001dcc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f042 0201 	orr.w	r2, r2, #1
 8001dca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr
 8001dd8:	40012c00 	.word	0x40012c00
 8001ddc:	40013400 	.word	0x40013400
 8001de0:	40000400 	.word	0x40000400
 8001de4:	40000800 	.word	0x40000800
 8001de8:	40000c00 	.word	0x40000c00

08001dec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d122      	bne.n	8001e48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d11b      	bne.n	8001e48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f06f 0202 	mvn.w	r2, #2
 8001e18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 f8ed 	bl	800200e <HAL_TIM_IC_CaptureCallback>
 8001e34:	e005      	b.n	8001e42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f8e0 	bl	8001ffc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 f8ef 	bl	8002020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	f003 0304 	and.w	r3, r3, #4
 8001e52:	2b04      	cmp	r3, #4
 8001e54:	d122      	bne.n	8001e9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d11b      	bne.n	8001e9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f06f 0204 	mvn.w	r2, #4
 8001e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2202      	movs	r2, #2
 8001e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f8c3 	bl	800200e <HAL_TIM_IC_CaptureCallback>
 8001e88:	e005      	b.n	8001e96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f8b6 	bl	8001ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 f8c5 	bl	8002020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	f003 0308 	and.w	r3, r3, #8
 8001ea6:	2b08      	cmp	r3, #8
 8001ea8:	d122      	bne.n	8001ef0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	f003 0308 	and.w	r3, r3, #8
 8001eb4:	2b08      	cmp	r3, #8
 8001eb6:	d11b      	bne.n	8001ef0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f06f 0208 	mvn.w	r2, #8
 8001ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2204      	movs	r2, #4
 8001ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f899 	bl	800200e <HAL_TIM_IC_CaptureCallback>
 8001edc:	e005      	b.n	8001eea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f88c 	bl	8001ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 f89b 	bl	8002020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	f003 0310 	and.w	r3, r3, #16
 8001efa:	2b10      	cmp	r3, #16
 8001efc:	d122      	bne.n	8001f44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	f003 0310 	and.w	r3, r3, #16
 8001f08:	2b10      	cmp	r3, #16
 8001f0a:	d11b      	bne.n	8001f44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f06f 0210 	mvn.w	r2, #16
 8001f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2208      	movs	r2, #8
 8001f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f86f 	bl	800200e <HAL_TIM_IC_CaptureCallback>
 8001f30:	e005      	b.n	8001f3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f862 	bl	8001ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 f871 	bl	8002020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d10e      	bne.n	8001f70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d107      	bne.n	8001f70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f06f 0201 	mvn.w	r2, #1
 8001f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7fe fc64 	bl	8000838 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f7a:	2b80      	cmp	r3, #128	@ 0x80
 8001f7c:	d10e      	bne.n	8001f9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f88:	2b80      	cmp	r3, #128	@ 0x80
 8001f8a:	d107      	bne.n	8001f9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f8d7 	bl	800214a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fa6:	2b40      	cmp	r3, #64	@ 0x40
 8001fa8:	d10e      	bne.n	8001fc8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fb4:	2b40      	cmp	r3, #64	@ 0x40
 8001fb6:	d107      	bne.n	8001fc8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 f835 	bl	8002032 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	f003 0320 	and.w	r3, r3, #32
 8001fd2:	2b20      	cmp	r3, #32
 8001fd4:	d10e      	bne.n	8001ff4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	f003 0320 	and.w	r3, r3, #32
 8001fe0:	2b20      	cmp	r3, #32
 8001fe2:	d107      	bne.n	8001ff4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f06f 0220 	mvn.w	r2, #32
 8001fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f8a2 	bl	8002138 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ff4:	bf00      	nop
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	bc80      	pop	{r7}
 800200c:	4770      	bx	lr

0800200e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800200e:	b480      	push	{r7}
 8002010:	b083      	sub	sp, #12
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr

08002020 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	bc80      	pop	{r7}
 8002030:	4770      	bx	lr

08002032 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800203a:	bf00      	nop
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr

08002044 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a33      	ldr	r2, [pc, #204]	@ (8002124 <TIM_Base_SetConfig+0xe0>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d013      	beq.n	8002084 <TIM_Base_SetConfig+0x40>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a32      	ldr	r2, [pc, #200]	@ (8002128 <TIM_Base_SetConfig+0xe4>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d00f      	beq.n	8002084 <TIM_Base_SetConfig+0x40>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800206a:	d00b      	beq.n	8002084 <TIM_Base_SetConfig+0x40>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a2f      	ldr	r2, [pc, #188]	@ (800212c <TIM_Base_SetConfig+0xe8>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d007      	beq.n	8002084 <TIM_Base_SetConfig+0x40>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a2e      	ldr	r2, [pc, #184]	@ (8002130 <TIM_Base_SetConfig+0xec>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d003      	beq.n	8002084 <TIM_Base_SetConfig+0x40>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a2d      	ldr	r2, [pc, #180]	@ (8002134 <TIM_Base_SetConfig+0xf0>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d108      	bne.n	8002096 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800208a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	4313      	orrs	r3, r2
 8002094:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a22      	ldr	r2, [pc, #136]	@ (8002124 <TIM_Base_SetConfig+0xe0>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d013      	beq.n	80020c6 <TIM_Base_SetConfig+0x82>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a21      	ldr	r2, [pc, #132]	@ (8002128 <TIM_Base_SetConfig+0xe4>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d00f      	beq.n	80020c6 <TIM_Base_SetConfig+0x82>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020ac:	d00b      	beq.n	80020c6 <TIM_Base_SetConfig+0x82>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a1e      	ldr	r2, [pc, #120]	@ (800212c <TIM_Base_SetConfig+0xe8>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d007      	beq.n	80020c6 <TIM_Base_SetConfig+0x82>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a1d      	ldr	r2, [pc, #116]	@ (8002130 <TIM_Base_SetConfig+0xec>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d003      	beq.n	80020c6 <TIM_Base_SetConfig+0x82>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a1c      	ldr	r2, [pc, #112]	@ (8002134 <TIM_Base_SetConfig+0xf0>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d108      	bne.n	80020d8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a09      	ldr	r2, [pc, #36]	@ (8002124 <TIM_Base_SetConfig+0xe0>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d003      	beq.n	800210c <TIM_Base_SetConfig+0xc8>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a08      	ldr	r2, [pc, #32]	@ (8002128 <TIM_Base_SetConfig+0xe4>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d103      	bne.n	8002114 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	691a      	ldr	r2, [r3, #16]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	615a      	str	r2, [r3, #20]
}
 800211a:	bf00      	nop
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	bc80      	pop	{r7}
 8002122:	4770      	bx	lr
 8002124:	40012c00 	.word	0x40012c00
 8002128:	40013400 	.word	0x40013400
 800212c:	40000400 	.word	0x40000400
 8002130:	40000800 	.word	0x40000800
 8002134:	40000c00 	.word	0x40000c00

08002138 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr

0800214a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr

0800215c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e042      	b.n	80021f4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d106      	bne.n	8002188 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7fe fba8 	bl	80008d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2224      	movs	r2, #36	@ 0x24
 800218c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68da      	ldr	r2, [r3, #12]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800219e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 fe55 	bl	8002e50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	691a      	ldr	r2, [r3, #16]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80021b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	695a      	ldr	r2, [r3, #20]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80021c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68da      	ldr	r2, [r3, #12]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80021d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2220      	movs	r2, #32
 80021e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2220      	movs	r2, #32
 80021e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3708      	adds	r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	4613      	mov	r3, r2
 8002208:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b20      	cmp	r3, #32
 8002214:	d121      	bne.n	800225a <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d002      	beq.n	8002222 <HAL_UART_Transmit_IT+0x26>
 800221c:	88fb      	ldrh	r3, [r7, #6]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e01a      	b.n	800225c <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	68ba      	ldr	r2, [r7, #8]
 800222a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	88fa      	ldrh	r2, [r7, #6]
 8002230:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	88fa      	ldrh	r2, [r7, #6]
 8002236:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2200      	movs	r2, #0
 800223c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2221      	movs	r2, #33	@ 0x21
 8002242:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68da      	ldr	r2, [r3, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002254:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002256:	2300      	movs	r3, #0
 8002258:	e000      	b.n	800225c <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800225a:	2302      	movs	r3, #2
  }
}
 800225c:	4618      	mov	r0, r3
 800225e:	3714      	adds	r7, #20
 8002260:	46bd      	mov	sp, r7
 8002262:	bc80      	pop	{r7}
 8002264:	4770      	bx	lr

08002266 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b084      	sub	sp, #16
 800226a:	af00      	add	r7, sp, #0
 800226c:	60f8      	str	r0, [r7, #12]
 800226e:	60b9      	str	r1, [r7, #8]
 8002270:	4613      	mov	r3, r2
 8002272:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b20      	cmp	r3, #32
 800227e:	d112      	bne.n	80022a6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d002      	beq.n	800228c <HAL_UART_Receive_IT+0x26>
 8002286:	88fb      	ldrh	r3, [r7, #6]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d101      	bne.n	8002290 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e00b      	b.n	80022a8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002296:	88fb      	ldrh	r3, [r7, #6]
 8002298:	461a      	mov	r2, r3
 800229a:	68b9      	ldr	r1, [r7, #8]
 800229c:	68f8      	ldr	r0, [r7, #12]
 800229e:	f000 fbeb 	bl	8002a78 <UART_Start_Receive_IT>
 80022a2:	4603      	mov	r3, r0
 80022a4:	e000      	b.n	80022a8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80022a6:	2302      	movs	r3, #2
  }
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b09a      	sub	sp, #104	@ 0x68
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	330c      	adds	r3, #12
 80022be:	64bb      	str	r3, [r7, #72]	@ 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022c2:	e853 3f00 	ldrex	r3, [r3]
 80022c6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80022c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80022ce:	667b      	str	r3, [r7, #100]	@ 0x64
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	330c      	adds	r3, #12
 80022d6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80022d8:	657a      	str	r2, [r7, #84]	@ 0x54
 80022da:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022dc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80022de:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80022e0:	e841 2300 	strex	r3, r2, [r1]
 80022e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80022e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1e5      	bne.n	80022b8 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	3314      	adds	r3, #20
 80022f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022f6:	e853 3f00 	ldrex	r3, [r3]
 80022fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80022fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022fe:	f023 0301 	bic.w	r3, r3, #1
 8002302:	663b      	str	r3, [r7, #96]	@ 0x60
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	3314      	adds	r3, #20
 800230a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800230c:	643a      	str	r2, [r7, #64]	@ 0x40
 800230e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002310:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002312:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002314:	e841 2300 	strex	r3, r2, [r1]
 8002318:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800231a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1e5      	bne.n	80022ec <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002324:	2b01      	cmp	r3, #1
 8002326:	d119      	bne.n	800235c <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	330c      	adds	r3, #12
 800232e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	e853 3f00 	ldrex	r3, [r3]
 8002336:	61fb      	str	r3, [r7, #28]
   return(result);
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	f023 0310 	bic.w	r3, r3, #16
 800233e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	330c      	adds	r3, #12
 8002346:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002348:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800234a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800234c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800234e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002350:	e841 2300 	strex	r3, r2, [r1]
 8002354:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1e5      	bne.n	8002328 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002366:	2b00      	cmp	r3, #0
 8002368:	d03f      	beq.n	80023ea <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	3314      	adds	r3, #20
 8002370:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	e853 3f00 	ldrex	r3, [r3]
 8002378:	60bb      	str	r3, [r7, #8]
   return(result);
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002380:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	3314      	adds	r3, #20
 8002388:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800238a:	61ba      	str	r2, [r7, #24]
 800238c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800238e:	6979      	ldr	r1, [r7, #20]
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	e841 2300 	strex	r3, r2, [r1]
 8002396:	613b      	str	r3, [r7, #16]
   return(result);
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1e5      	bne.n	800236a <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d013      	beq.n	80023ce <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023aa:	4a19      	ldr	r2, [pc, #100]	@ (8002410 <HAL_UART_AbortReceive_IT+0x160>)
 80023ac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fe fd56 	bl	8000e64 <HAL_DMA_Abort_IT>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d022      	beq.n	8002404 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80023c8:	4610      	mov	r0, r2
 80023ca:	4798      	blx	r3
 80023cc:	e01a      	b.n	8002404 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	85da      	strh	r2, [r3, #46]	@ 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2220      	movs	r2, #32
 80023d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 fab1 	bl	800294a <HAL_UART_AbortReceiveCpltCallback>
 80023e8:	e00c      	b.n	8002404 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2220      	movs	r2, #32
 80023f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 faa3 	bl	800294a <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3768      	adds	r7, #104	@ 0x68
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	08002bd7 	.word	0x08002bd7

08002414 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b0ba      	sub	sp, #232	@ 0xe8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800243a:	2300      	movs	r3, #0
 800243c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002440:	2300      	movs	r3, #0
 8002442:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800244a:	f003 030f 	and.w	r3, r3, #15
 800244e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002452:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10f      	bne.n	800247a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800245a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800245e:	f003 0320 	and.w	r3, r3, #32
 8002462:	2b00      	cmp	r3, #0
 8002464:	d009      	beq.n	800247a <HAL_UART_IRQHandler+0x66>
 8002466:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800246a:	f003 0320 	and.w	r3, r3, #32
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 fc2e 	bl	8002cd4 <UART_Receive_IT>
      return;
 8002478:	e25b      	b.n	8002932 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800247a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800247e:	2b00      	cmp	r3, #0
 8002480:	f000 80de 	beq.w	8002640 <HAL_UART_IRQHandler+0x22c>
 8002484:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b00      	cmp	r3, #0
 800248e:	d106      	bne.n	800249e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002494:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 80d1 	beq.w	8002640 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800249e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00b      	beq.n	80024c2 <HAL_UART_IRQHandler+0xae>
 80024aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d005      	beq.n	80024c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ba:	f043 0201 	orr.w	r2, r3, #1
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024c6:	f003 0304 	and.w	r3, r3, #4
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00b      	beq.n	80024e6 <HAL_UART_IRQHandler+0xd2>
 80024ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d005      	beq.n	80024e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024de:	f043 0202 	orr.w	r2, r3, #2
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00b      	beq.n	800250a <HAL_UART_IRQHandler+0xf6>
 80024f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d005      	beq.n	800250a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002502:	f043 0204 	orr.w	r2, r3, #4
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800250a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800250e:	f003 0308 	and.w	r3, r3, #8
 8002512:	2b00      	cmp	r3, #0
 8002514:	d011      	beq.n	800253a <HAL_UART_IRQHandler+0x126>
 8002516:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800251a:	f003 0320 	and.w	r3, r3, #32
 800251e:	2b00      	cmp	r3, #0
 8002520:	d105      	bne.n	800252e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002522:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b00      	cmp	r3, #0
 800252c:	d005      	beq.n	800253a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002532:	f043 0208 	orr.w	r2, r3, #8
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800253e:	2b00      	cmp	r3, #0
 8002540:	f000 81f2 	beq.w	8002928 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002548:	f003 0320 	and.w	r3, r3, #32
 800254c:	2b00      	cmp	r3, #0
 800254e:	d008      	beq.n	8002562 <HAL_UART_IRQHandler+0x14e>
 8002550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002554:	f003 0320 	and.w	r3, r3, #32
 8002558:	2b00      	cmp	r3, #0
 800255a:	d002      	beq.n	8002562 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f000 fbb9 	bl	8002cd4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	695b      	ldr	r3, [r3, #20]
 8002568:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800256c:	2b00      	cmp	r3, #0
 800256e:	bf14      	ite	ne
 8002570:	2301      	movne	r3, #1
 8002572:	2300      	moveq	r3, #0
 8002574:	b2db      	uxtb	r3, r3
 8002576:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800257e:	f003 0308 	and.w	r3, r3, #8
 8002582:	2b00      	cmp	r3, #0
 8002584:	d103      	bne.n	800258e <HAL_UART_IRQHandler+0x17a>
 8002586:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800258a:	2b00      	cmp	r3, #0
 800258c:	d04f      	beq.n	800262e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 faab 	bl	8002aea <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d041      	beq.n	8002626 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	3314      	adds	r3, #20
 80025a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025b0:	e853 3f00 	ldrex	r3, [r3]
 80025b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80025b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80025bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80025c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	3314      	adds	r3, #20
 80025ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80025ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80025d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80025da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80025de:	e841 2300 	strex	r3, r2, [r1]
 80025e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80025e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1d9      	bne.n	80025a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d013      	beq.n	800261e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025fa:	4a7e      	ldr	r2, [pc, #504]	@ (80027f4 <HAL_UART_IRQHandler+0x3e0>)
 80025fc:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002602:	4618      	mov	r0, r3
 8002604:	f7fe fc2e 	bl	8000e64 <HAL_DMA_Abort_IT>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d016      	beq.n	800263c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002612:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002618:	4610      	mov	r0, r2
 800261a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800261c:	e00e      	b.n	800263c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f98a 	bl	8002938 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002624:	e00a      	b.n	800263c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f986 	bl	8002938 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800262c:	e006      	b.n	800263c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 f982 	bl	8002938 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800263a:	e175      	b.n	8002928 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800263c:	bf00      	nop
    return;
 800263e:	e173      	b.n	8002928 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002644:	2b01      	cmp	r3, #1
 8002646:	f040 814f 	bne.w	80028e8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800264a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800264e:	f003 0310 	and.w	r3, r3, #16
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 8148 	beq.w	80028e8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800265c:	f003 0310 	and.w	r3, r3, #16
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 8141 	beq.w	80028e8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002666:	2300      	movs	r3, #0
 8002668:	60bb      	str	r3, [r7, #8]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	60bb      	str	r3, [r7, #8]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002686:	2b00      	cmp	r3, #0
 8002688:	f000 80b6 	beq.w	80027f8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002698:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 8145 	beq.w	800292c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80026a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80026aa:	429a      	cmp	r2, r3
 80026ac:	f080 813e 	bcs.w	800292c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80026b6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	2b20      	cmp	r3, #32
 80026c0:	f000 8088 	beq.w	80027d4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	330c      	adds	r3, #12
 80026ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80026d2:	e853 3f00 	ldrex	r3, [r3]
 80026d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80026da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80026de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026e2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	330c      	adds	r3, #12
 80026ec:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80026f0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80026f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026f8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80026fc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002700:	e841 2300 	strex	r3, r2, [r1]
 8002704:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002708:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1d9      	bne.n	80026c4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	3314      	adds	r3, #20
 8002716:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002718:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800271a:	e853 3f00 	ldrex	r3, [r3]
 800271e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002720:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002722:	f023 0301 	bic.w	r3, r3, #1
 8002726:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	3314      	adds	r3, #20
 8002730:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002734:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002738:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800273a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800273c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002740:	e841 2300 	strex	r3, r2, [r1]
 8002744:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002746:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1e1      	bne.n	8002710 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	3314      	adds	r3, #20
 8002752:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002754:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002756:	e853 3f00 	ldrex	r3, [r3]
 800275a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800275c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800275e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002762:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	3314      	adds	r3, #20
 800276c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002770:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002772:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002774:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002776:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002778:	e841 2300 	strex	r3, r2, [r1]
 800277c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800277e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1e3      	bne.n	800274c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2220      	movs	r2, #32
 8002788:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	330c      	adds	r3, #12
 8002798:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800279a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800279c:	e853 3f00 	ldrex	r3, [r3]
 80027a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80027a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027a4:	f023 0310 	bic.w	r3, r3, #16
 80027a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	330c      	adds	r3, #12
 80027b2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80027b6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80027b8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80027bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80027be:	e841 2300 	strex	r3, r2, [r1]
 80027c2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80027c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1e3      	bne.n	8002792 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7fe fb0d 	bl	8000dee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2202      	movs	r2, #2
 80027d8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	4619      	mov	r1, r3
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 f8b6 	bl	800295c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80027f0:	e09c      	b.n	800292c <HAL_UART_IRQHandler+0x518>
 80027f2:	bf00      	nop
 80027f4:	08002baf 	.word	0x08002baf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002800:	b29b      	uxth	r3, r3
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800280c:	b29b      	uxth	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	f000 808e 	beq.w	8002930 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002814:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 8089 	beq.w	8002930 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	330c      	adds	r3, #12
 8002824:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002828:	e853 3f00 	ldrex	r3, [r3]
 800282c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800282e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002830:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002834:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	330c      	adds	r3, #12
 800283e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002842:	647a      	str	r2, [r7, #68]	@ 0x44
 8002844:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002846:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002848:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800284a:	e841 2300 	strex	r3, r2, [r1]
 800284e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002850:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1e3      	bne.n	800281e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	3314      	adds	r3, #20
 800285c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800285e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002860:	e853 3f00 	ldrex	r3, [r3]
 8002864:	623b      	str	r3, [r7, #32]
   return(result);
 8002866:	6a3b      	ldr	r3, [r7, #32]
 8002868:	f023 0301 	bic.w	r3, r3, #1
 800286c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	3314      	adds	r3, #20
 8002876:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800287a:	633a      	str	r2, [r7, #48]	@ 0x30
 800287c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800287e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002880:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002882:	e841 2300 	strex	r3, r2, [r1]
 8002886:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1e3      	bne.n	8002856 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2220      	movs	r2, #32
 8002892:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	330c      	adds	r3, #12
 80028a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	e853 3f00 	ldrex	r3, [r3]
 80028aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f023 0310 	bic.w	r3, r3, #16
 80028b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	330c      	adds	r3, #12
 80028bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80028c0:	61fa      	str	r2, [r7, #28]
 80028c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028c4:	69b9      	ldr	r1, [r7, #24]
 80028c6:	69fa      	ldr	r2, [r7, #28]
 80028c8:	e841 2300 	strex	r3, r2, [r1]
 80028cc:	617b      	str	r3, [r7, #20]
   return(result);
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1e3      	bne.n	800289c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2202      	movs	r2, #2
 80028d8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80028da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80028de:	4619      	mov	r1, r3
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 f83b 	bl	800295c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80028e6:	e023      	b.n	8002930 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80028e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d009      	beq.n	8002908 <HAL_UART_IRQHandler+0x4f4>
 80028f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 f980 	bl	8002c06 <UART_Transmit_IT>
    return;
 8002906:	e014      	b.n	8002932 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800290c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00e      	beq.n	8002932 <HAL_UART_IRQHandler+0x51e>
 8002914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002918:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800291c:	2b00      	cmp	r3, #0
 800291e:	d008      	beq.n	8002932 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 f9bf 	bl	8002ca4 <UART_EndTransmit_IT>
    return;
 8002926:	e004      	b.n	8002932 <HAL_UART_IRQHandler+0x51e>
    return;
 8002928:	bf00      	nop
 800292a:	e002      	b.n	8002932 <HAL_UART_IRQHandler+0x51e>
      return;
 800292c:	bf00      	nop
 800292e:	e000      	b.n	8002932 <HAL_UART_IRQHandler+0x51e>
      return;
 8002930:	bf00      	nop
  }
}
 8002932:	37e8      	adds	r7, #232	@ 0xe8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	bc80      	pop	{r7}
 8002948:	4770      	bx	lr

0800294a <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr

0800295c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	460b      	mov	r3, r1
 8002966:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	bc80      	pop	{r7}
 8002970:	4770      	bx	lr

08002972 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8002972:	b480      	push	{r7}
 8002974:	b085      	sub	sp, #20
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800297a:	2300      	movs	r3, #0
 800297c:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002984:	2b01      	cmp	r3, #1
 8002986:	d101      	bne.n	800298c <HAL_HalfDuplex_EnableTransmitter+0x1a>
 8002988:	2302      	movs	r3, #2
 800298a:	e020      	b.n	80029ce <HAL_HalfDuplex_EnableTransmitter+0x5c>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2224      	movs	r2, #36	@ 0x24
 8002998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f023 030c 	bic.w	r3, r3, #12
 80029aa:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f043 0308 	orr.w	r3, r3, #8
 80029b2:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2220      	movs	r2, #32
 80029c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3714      	adds	r7, #20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr

080029d8 <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80029e0:	2300      	movs	r3, #0
 80029e2:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d101      	bne.n	80029f2 <HAL_HalfDuplex_EnableReceiver+0x1a>
 80029ee:	2302      	movs	r3, #2
 80029f0:	e020      	b.n	8002a34 <HAL_HalfDuplex_EnableReceiver+0x5c>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2224      	movs	r2, #36	@ 0x24
 80029fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f023 030c 	bic.w	r3, r3, #12
 8002a10:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f043 0304 	orr.w	r3, r3, #4
 8002a18:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2220      	movs	r2, #32
 8002a26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bc80      	pop	{r7}
 8002a3c:	4770      	bx	lr

08002a3e <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b085      	sub	sp, #20
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8002a46:	2300      	movs	r3, #0
 8002a48:	60fb      	str	r3, [r7, #12]
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	b2db      	uxtb	r3, r3
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3714      	adds	r7, #20
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr

08002a78 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	4613      	mov	r3, r2
 8002a84:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	88fa      	ldrh	r2, [r7, #6]
 8002a90:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	88fa      	ldrh	r2, [r7, #6]
 8002a96:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2222      	movs	r2, #34	@ 0x22
 8002aa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d007      	beq.n	8002abe <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68da      	ldr	r2, [r3, #12]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002abc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	695a      	ldr	r2, [r3, #20]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f042 0201 	orr.w	r2, r2, #1
 8002acc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68da      	ldr	r2, [r3, #12]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f042 0220 	orr.w	r2, r2, #32
 8002adc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3714      	adds	r7, #20
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bc80      	pop	{r7}
 8002ae8:	4770      	bx	lr

08002aea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b095      	sub	sp, #84	@ 0x54
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	330c      	adds	r3, #12
 8002af8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002afa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002afc:	e853 3f00 	ldrex	r3, [r3]
 8002b00:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002b08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	330c      	adds	r3, #12
 8002b10:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b12:	643a      	str	r2, [r7, #64]	@ 0x40
 8002b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b16:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002b18:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002b1a:	e841 2300 	strex	r3, r2, [r1]
 8002b1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1e5      	bne.n	8002af2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	3314      	adds	r3, #20
 8002b2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b2e:	6a3b      	ldr	r3, [r7, #32]
 8002b30:	e853 3f00 	ldrex	r3, [r3]
 8002b34:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	f023 0301 	bic.w	r3, r3, #1
 8002b3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	3314      	adds	r3, #20
 8002b44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b48:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b4e:	e841 2300 	strex	r3, r2, [r1]
 8002b52:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1e5      	bne.n	8002b26 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d119      	bne.n	8002b96 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	330c      	adds	r3, #12
 8002b68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	e853 3f00 	ldrex	r3, [r3]
 8002b70:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	f023 0310 	bic.w	r3, r3, #16
 8002b78:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	330c      	adds	r3, #12
 8002b80:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002b82:	61ba      	str	r2, [r7, #24]
 8002b84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b86:	6979      	ldr	r1, [r7, #20]
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	e841 2300 	strex	r3, r2, [r1]
 8002b8e:	613b      	str	r3, [r7, #16]
   return(result);
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1e5      	bne.n	8002b62 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2220      	movs	r2, #32
 8002b9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002ba4:	bf00      	nop
 8002ba6:	3754      	adds	r7, #84	@ 0x54
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bc80      	pop	{r7}
 8002bac:	4770      	bx	lr

08002bae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b084      	sub	sp, #16
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f7ff feb5 	bl	8002938 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002bce:	bf00      	nop
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b084      	sub	sp, #16
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be2:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2220      	movs	r2, #32
 8002bee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f7ff fea6 	bl	800294a <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002bfe:	bf00      	nop
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b085      	sub	sp, #20
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b21      	cmp	r3, #33	@ 0x21
 8002c18:	d13e      	bne.n	8002c98 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c22:	d114      	bne.n	8002c4e <UART_Transmit_IT+0x48>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d110      	bne.n	8002c4e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	881b      	ldrh	r3, [r3, #0]
 8002c36:	461a      	mov	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c40:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	1c9a      	adds	r2, r3, #2
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	621a      	str	r2, [r3, #32]
 8002c4c:	e008      	b.n	8002c60 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	1c59      	adds	r1, r3, #1
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6211      	str	r1, [r2, #32]
 8002c58:	781a      	ldrb	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	3b01      	subs	r3, #1
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10f      	bne.n	8002c94 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68da      	ldr	r2, [r3, #12]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c82:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68da      	ldr	r2, [r3, #12]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c92:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002c94:	2300      	movs	r3, #0
 8002c96:	e000      	b.n	8002c9a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002c98:	2302      	movs	r3, #2
  }
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3714      	adds	r7, #20
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bc80      	pop	{r7}
 8002ca2:	4770      	bx	lr

08002ca4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68da      	ldr	r2, [r3, #12]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002cba:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f005 f903 	bl	8007ed0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b08c      	sub	sp, #48	@ 0x30
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b22      	cmp	r3, #34	@ 0x22
 8002ce6:	f040 80ae 	bne.w	8002e46 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cf2:	d117      	bne.n	8002d24 <UART_Receive_IT+0x50>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d113      	bne.n	8002d24 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d04:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d16:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d1c:	1c9a      	adds	r2, r3, #2
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d22:	e026      	b.n	8002d72 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d36:	d007      	beq.n	8002d48 <UART_Receive_IT+0x74>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d10a      	bne.n	8002d56 <UART_Receive_IT+0x82>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d106      	bne.n	8002d56 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d52:	701a      	strb	r2, [r3, #0]
 8002d54:	e008      	b.n	8002d68 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d66:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d6c:	1c5a      	adds	r2, r3, #1
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	4619      	mov	r1, r3
 8002d80:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d15d      	bne.n	8002e42 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68da      	ldr	r2, [r3, #12]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f022 0220 	bic.w	r2, r2, #32
 8002d94:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68da      	ldr	r2, [r3, #12]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002da4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	695a      	ldr	r2, [r3, #20]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 0201 	bic.w	r2, r2, #1
 8002db4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2220      	movs	r2, #32
 8002dba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d135      	bne.n	8002e38 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	330c      	adds	r3, #12
 8002dd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	e853 3f00 	ldrex	r3, [r3]
 8002de0:	613b      	str	r3, [r7, #16]
   return(result);
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	f023 0310 	bic.w	r3, r3, #16
 8002de8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	330c      	adds	r3, #12
 8002df0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002df2:	623a      	str	r2, [r7, #32]
 8002df4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df6:	69f9      	ldr	r1, [r7, #28]
 8002df8:	6a3a      	ldr	r2, [r7, #32]
 8002dfa:	e841 2300 	strex	r3, r2, [r1]
 8002dfe:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1e5      	bne.n	8002dd2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0310 	and.w	r3, r3, #16
 8002e10:	2b10      	cmp	r3, #16
 8002e12:	d10a      	bne.n	8002e2a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e14:	2300      	movs	r3, #0
 8002e16:	60fb      	str	r3, [r7, #12]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	60fb      	str	r3, [r7, #12]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002e2e:	4619      	mov	r1, r3
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f7ff fd93 	bl	800295c <HAL_UARTEx_RxEventCallback>
 8002e36:	e002      	b.n	8002e3e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f005 f887 	bl	8007f4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	e002      	b.n	8002e48 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002e42:	2300      	movs	r3, #0
 8002e44:	e000      	b.n	8002e48 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002e46:	2302      	movs	r3, #2
  }
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3730      	adds	r7, #48	@ 0x30
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68da      	ldr	r2, [r3, #12]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689a      	ldr	r2, [r3, #8]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002e8a:	f023 030c 	bic.w	r3, r3, #12
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	6812      	ldr	r2, [r2, #0]
 8002e92:	68b9      	ldr	r1, [r7, #8]
 8002e94:	430b      	orrs	r3, r1
 8002e96:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	699a      	ldr	r2, [r3, #24]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a2c      	ldr	r2, [pc, #176]	@ (8002f64 <UART_SetConfig+0x114>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d103      	bne.n	8002ec0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002eb8:	f7fe fe7e 	bl	8001bb8 <HAL_RCC_GetPCLK2Freq>
 8002ebc:	60f8      	str	r0, [r7, #12]
 8002ebe:	e002      	b.n	8002ec6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ec0:	f7fe fe66 	bl	8001b90 <HAL_RCC_GetPCLK1Freq>
 8002ec4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4413      	add	r3, r2
 8002ece:	009a      	lsls	r2, r3, #2
 8002ed0:	441a      	add	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002edc:	4a22      	ldr	r2, [pc, #136]	@ (8002f68 <UART_SetConfig+0x118>)
 8002ede:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee2:	095b      	lsrs	r3, r3, #5
 8002ee4:	0119      	lsls	r1, r3, #4
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	4413      	add	r3, r2
 8002eee:	009a      	lsls	r2, r3, #2
 8002ef0:	441a      	add	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002efc:	4b1a      	ldr	r3, [pc, #104]	@ (8002f68 <UART_SetConfig+0x118>)
 8002efe:	fba3 0302 	umull	r0, r3, r3, r2
 8002f02:	095b      	lsrs	r3, r3, #5
 8002f04:	2064      	movs	r0, #100	@ 0x64
 8002f06:	fb00 f303 	mul.w	r3, r0, r3
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	011b      	lsls	r3, r3, #4
 8002f0e:	3332      	adds	r3, #50	@ 0x32
 8002f10:	4a15      	ldr	r2, [pc, #84]	@ (8002f68 <UART_SetConfig+0x118>)
 8002f12:	fba2 2303 	umull	r2, r3, r2, r3
 8002f16:	095b      	lsrs	r3, r3, #5
 8002f18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f1c:	4419      	add	r1, r3
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	4613      	mov	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4413      	add	r3, r2
 8002f26:	009a      	lsls	r2, r3, #2
 8002f28:	441a      	add	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f34:	4b0c      	ldr	r3, [pc, #48]	@ (8002f68 <UART_SetConfig+0x118>)
 8002f36:	fba3 0302 	umull	r0, r3, r3, r2
 8002f3a:	095b      	lsrs	r3, r3, #5
 8002f3c:	2064      	movs	r0, #100	@ 0x64
 8002f3e:	fb00 f303 	mul.w	r3, r0, r3
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	011b      	lsls	r3, r3, #4
 8002f46:	3332      	adds	r3, #50	@ 0x32
 8002f48:	4a07      	ldr	r2, [pc, #28]	@ (8002f68 <UART_SetConfig+0x118>)
 8002f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4e:	095b      	lsrs	r3, r3, #5
 8002f50:	f003 020f 	and.w	r2, r3, #15
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	440a      	add	r2, r1
 8002f5a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002f5c:	bf00      	nop
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40013800 	.word	0x40013800
 8002f68:	51eb851f 	.word	0x51eb851f

08002f6c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f72:	f3ef 8305 	mrs	r3, IPSR
 8002f76:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f78:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10f      	bne.n	8002f9e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f7e:	f3ef 8310 	mrs	r3, PRIMASK
 8002f82:	607b      	str	r3, [r7, #4]
  return(result);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d109      	bne.n	8002f9e <osKernelInitialize+0x32>
 8002f8a:	4b10      	ldr	r3, [pc, #64]	@ (8002fcc <osKernelInitialize+0x60>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d109      	bne.n	8002fa6 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002f92:	f3ef 8311 	mrs	r3, BASEPRI
 8002f96:	603b      	str	r3, [r7, #0]
  return(result);
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002f9e:	f06f 0305 	mvn.w	r3, #5
 8002fa2:	60fb      	str	r3, [r7, #12]
 8002fa4:	e00c      	b.n	8002fc0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002fa6:	4b09      	ldr	r3, [pc, #36]	@ (8002fcc <osKernelInitialize+0x60>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d105      	bne.n	8002fba <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002fae:	4b07      	ldr	r3, [pc, #28]	@ (8002fcc <osKernelInitialize+0x60>)
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	e002      	b.n	8002fc0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002fba:	f04f 33ff 	mov.w	r3, #4294967295
 8002fbe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3714      	adds	r7, #20
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bc80      	pop	{r7}
 8002fca:	4770      	bx	lr
 8002fcc:	200003dc 	.word	0x200003dc

08002fd0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002fd6:	f3ef 8305 	mrs	r3, IPSR
 8002fda:	60bb      	str	r3, [r7, #8]
  return(result);
 8002fdc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10f      	bne.n	8003002 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fe2:	f3ef 8310 	mrs	r3, PRIMASK
 8002fe6:	607b      	str	r3, [r7, #4]
  return(result);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d109      	bne.n	8003002 <osKernelStart+0x32>
 8002fee:	4b11      	ldr	r3, [pc, #68]	@ (8003034 <osKernelStart+0x64>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d109      	bne.n	800300a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002ff6:	f3ef 8311 	mrs	r3, BASEPRI
 8002ffa:	603b      	str	r3, [r7, #0]
  return(result);
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <osKernelStart+0x3a>
    stat = osErrorISR;
 8003002:	f06f 0305 	mvn.w	r3, #5
 8003006:	60fb      	str	r3, [r7, #12]
 8003008:	e00e      	b.n	8003028 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800300a:	4b0a      	ldr	r3, [pc, #40]	@ (8003034 <osKernelStart+0x64>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d107      	bne.n	8003022 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003012:	4b08      	ldr	r3, [pc, #32]	@ (8003034 <osKernelStart+0x64>)
 8003014:	2202      	movs	r2, #2
 8003016:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003018:	f001 fbf8 	bl	800480c <vTaskStartScheduler>
      stat = osOK;
 800301c:	2300      	movs	r3, #0
 800301e:	60fb      	str	r3, [r7, #12]
 8003020:	e002      	b.n	8003028 <osKernelStart+0x58>
    } else {
      stat = osError;
 8003022:	f04f 33ff 	mov.w	r3, #4294967295
 8003026:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003028:	68fb      	ldr	r3, [r7, #12]
}
 800302a:	4618      	mov	r0, r3
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	200003dc 	.word	0x200003dc

08003038 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003038:	b580      	push	{r7, lr}
 800303a:	b092      	sub	sp, #72	@ 0x48
 800303c:	af04      	add	r7, sp, #16
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003044:	2300      	movs	r3, #0
 8003046:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003048:	f3ef 8305 	mrs	r3, IPSR
 800304c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800304e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003050:	2b00      	cmp	r3, #0
 8003052:	f040 8094 	bne.w	800317e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003056:	f3ef 8310 	mrs	r3, PRIMASK
 800305a:	623b      	str	r3, [r7, #32]
  return(result);
 800305c:	6a3b      	ldr	r3, [r7, #32]
 800305e:	2b00      	cmp	r3, #0
 8003060:	f040 808d 	bne.w	800317e <osThreadNew+0x146>
 8003064:	4b48      	ldr	r3, [pc, #288]	@ (8003188 <osThreadNew+0x150>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2b02      	cmp	r3, #2
 800306a:	d106      	bne.n	800307a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800306c:	f3ef 8311 	mrs	r3, BASEPRI
 8003070:	61fb      	str	r3, [r7, #28]
  return(result);
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	2b00      	cmp	r3, #0
 8003076:	f040 8082 	bne.w	800317e <osThreadNew+0x146>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d07e      	beq.n	800317e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003080:	2340      	movs	r3, #64	@ 0x40
 8003082:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003084:	2318      	movs	r3, #24
 8003086:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8003088:	2300      	movs	r3, #0
 800308a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800308c:	f107 031b 	add.w	r3, r7, #27
 8003090:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 8003092:	f04f 33ff 	mov.w	r3, #4294967295
 8003096:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d045      	beq.n	800312a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d002      	beq.n	80030ac <osThreadNew+0x74>
        name = attr->name;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d002      	beq.n	80030ba <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80030ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d008      	beq.n	80030d2 <osThreadNew+0x9a>
 80030c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030c2:	2b38      	cmp	r3, #56	@ 0x38
 80030c4:	d805      	bhi.n	80030d2 <osThreadNew+0x9a>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <osThreadNew+0x9e>
        return (NULL);
 80030d2:	2300      	movs	r3, #0
 80030d4:	e054      	b.n	8003180 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	089b      	lsrs	r3, r3, #2
 80030e4:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00e      	beq.n	800310c <osThreadNew+0xd4>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	2b5b      	cmp	r3, #91	@ 0x5b
 80030f4:	d90a      	bls.n	800310c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d006      	beq.n	800310c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d002      	beq.n	800310c <osThreadNew+0xd4>
        mem = 1;
 8003106:	2301      	movs	r3, #1
 8003108:	62bb      	str	r3, [r7, #40]	@ 0x28
 800310a:	e010      	b.n	800312e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d10c      	bne.n	800312e <osThreadNew+0xf6>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d108      	bne.n	800312e <osThreadNew+0xf6>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d104      	bne.n	800312e <osThreadNew+0xf6>
          mem = 0;
 8003124:	2300      	movs	r3, #0
 8003126:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003128:	e001      	b.n	800312e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800312a:	2300      	movs	r3, #0
 800312c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 800312e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003130:	2b01      	cmp	r3, #1
 8003132:	d110      	bne.n	8003156 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800313c:	9202      	str	r2, [sp, #8]
 800313e:	9301      	str	r3, [sp, #4]
 8003140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003142:	9300      	str	r3, [sp, #0]
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003148:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f001 f98c 	bl	8004468 <xTaskCreateStatic>
 8003150:	4603      	mov	r3, r0
 8003152:	617b      	str	r3, [r7, #20]
 8003154:	e013      	b.n	800317e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003158:	2b00      	cmp	r3, #0
 800315a:	d110      	bne.n	800317e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800315c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800315e:	b29a      	uxth	r2, r3
 8003160:	f107 0314 	add.w	r3, r7, #20
 8003164:	9301      	str	r3, [sp, #4]
 8003166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f001 f9d9 	bl	8004526 <xTaskCreate>
 8003174:	4603      	mov	r3, r0
 8003176:	2b01      	cmp	r3, #1
 8003178:	d001      	beq.n	800317e <osThreadNew+0x146>
          hTask = NULL;
 800317a:	2300      	movs	r3, #0
 800317c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800317e:	697b      	ldr	r3, [r7, #20]
}
 8003180:	4618      	mov	r0, r3
 8003182:	3738      	adds	r7, #56	@ 0x38
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	200003dc 	.word	0x200003dc

0800318c <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003192:	f3ef 8305 	mrs	r3, IPSR
 8003196:	60bb      	str	r3, [r7, #8]
  return(result);
 8003198:	68bb      	ldr	r3, [r7, #8]
  osThreadId_t id;

  if (IS_IRQ()) {
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10f      	bne.n	80031be <osThreadGetId+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800319e:	f3ef 8310 	mrs	r3, PRIMASK
 80031a2:	607b      	str	r3, [r7, #4]
  return(result);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d109      	bne.n	80031be <osThreadGetId+0x32>
 80031aa:	4b0a      	ldr	r3, [pc, #40]	@ (80031d4 <osThreadGetId+0x48>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d108      	bne.n	80031c4 <osThreadGetId+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80031b2:	f3ef 8311 	mrs	r3, BASEPRI
 80031b6:	603b      	str	r3, [r7, #0]
  return(result);
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d002      	beq.n	80031c4 <osThreadGetId+0x38>
    id = NULL;
 80031be:	2300      	movs	r3, #0
 80031c0:	60fb      	str	r3, [r7, #12]
 80031c2:	e002      	b.n	80031ca <osThreadGetId+0x3e>
  } else {
    id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 80031c4:	f001 ff8a 	bl	80050dc <xTaskGetCurrentTaskHandle>
 80031c8:	60f8      	str	r0, [r7, #12]
  }

  return (id);
 80031ca:	68fb      	ldr	r3, [r7, #12]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	200003dc 	.word	0x200003dc

080031d8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031e0:	f3ef 8305 	mrs	r3, IPSR
 80031e4:	613b      	str	r3, [r7, #16]
  return(result);
 80031e6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d10f      	bne.n	800320c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031ec:	f3ef 8310 	mrs	r3, PRIMASK
 80031f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d109      	bne.n	800320c <osDelay+0x34>
 80031f8:	4b0d      	ldr	r3, [pc, #52]	@ (8003230 <osDelay+0x58>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d109      	bne.n	8003214 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003200:	f3ef 8311 	mrs	r3, BASEPRI
 8003204:	60bb      	str	r3, [r7, #8]
  return(result);
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d003      	beq.n	8003214 <osDelay+0x3c>
    stat = osErrorISR;
 800320c:	f06f 0305 	mvn.w	r3, #5
 8003210:	617b      	str	r3, [r7, #20]
 8003212:	e007      	b.n	8003224 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003214:	2300      	movs	r3, #0
 8003216:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d002      	beq.n	8003224 <osDelay+0x4c>
      vTaskDelay(ticks);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f001 fabe 	bl	80047a0 <vTaskDelay>
    }
  }

  return (stat);
 8003224:	697b      	ldr	r3, [r7, #20]
}
 8003226:	4618      	mov	r0, r3
 8003228:	3718      	adds	r7, #24
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	200003dc 	.word	0x200003dc

08003234 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8003234:	b580      	push	{r7, lr}
 8003236:	b08c      	sub	sp, #48	@ 0x30
 8003238:	af02      	add	r7, sp, #8
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8003240:	2300      	movs	r3, #0
 8003242:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003244:	f3ef 8305 	mrs	r3, IPSR
 8003248:	61bb      	str	r3, [r7, #24]
  return(result);
 800324a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800324c:	2b00      	cmp	r3, #0
 800324e:	f040 8086 	bne.w	800335e <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003252:	f3ef 8310 	mrs	r3, PRIMASK
 8003256:	617b      	str	r3, [r7, #20]
  return(result);
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d17f      	bne.n	800335e <osSemaphoreNew+0x12a>
 800325e:	4b42      	ldr	r3, [pc, #264]	@ (8003368 <osSemaphoreNew+0x134>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2b02      	cmp	r3, #2
 8003264:	d105      	bne.n	8003272 <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003266:	f3ef 8311 	mrs	r3, BASEPRI
 800326a:	613b      	str	r3, [r7, #16]
  return(result);
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d175      	bne.n	800335e <osSemaphoreNew+0x12a>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d072      	beq.n	800335e <osSemaphoreNew+0x12a>
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	429a      	cmp	r2, r3
 800327e:	d86e      	bhi.n	800335e <osSemaphoreNew+0x12a>
    mem = -1;
 8003280:	f04f 33ff 	mov.w	r3, #4294967295
 8003284:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d015      	beq.n	80032b8 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d006      	beq.n	80032a2 <osSemaphoreNew+0x6e>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	2b4f      	cmp	r3, #79	@ 0x4f
 800329a:	d902      	bls.n	80032a2 <osSemaphoreNew+0x6e>
        mem = 1;
 800329c:	2301      	movs	r3, #1
 800329e:	623b      	str	r3, [r7, #32]
 80032a0:	e00c      	b.n	80032bc <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d108      	bne.n	80032bc <osSemaphoreNew+0x88>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d104      	bne.n	80032bc <osSemaphoreNew+0x88>
          mem = 0;
 80032b2:	2300      	movs	r3, #0
 80032b4:	623b      	str	r3, [r7, #32]
 80032b6:	e001      	b.n	80032bc <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80032b8:	2300      	movs	r3, #0
 80032ba:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80032bc:	6a3b      	ldr	r3, [r7, #32]
 80032be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c2:	d04c      	beq.n	800335e <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d128      	bne.n	800331c <osSemaphoreNew+0xe8>
        if (mem == 1) {
 80032ca:	6a3b      	ldr	r3, [r7, #32]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d10a      	bne.n	80032e6 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	2203      	movs	r2, #3
 80032d6:	9200      	str	r2, [sp, #0]
 80032d8:	2200      	movs	r2, #0
 80032da:	2100      	movs	r1, #0
 80032dc:	2001      	movs	r0, #1
 80032de:	f000 fa15 	bl	800370c <xQueueGenericCreateStatic>
 80032e2:	6278      	str	r0, [r7, #36]	@ 0x24
 80032e4:	e005      	b.n	80032f2 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80032e6:	2203      	movs	r2, #3
 80032e8:	2100      	movs	r1, #0
 80032ea:	2001      	movs	r0, #1
 80032ec:	f000 fa8a 	bl	8003804 <xQueueGenericCreate>
 80032f0:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80032f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d022      	beq.n	800333e <osSemaphoreNew+0x10a>
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d01f      	beq.n	800333e <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80032fe:	2300      	movs	r3, #0
 8003300:	2200      	movs	r2, #0
 8003302:	2100      	movs	r1, #0
 8003304:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003306:	f000 fb4d 	bl	80039a4 <xQueueGenericSend>
 800330a:	4603      	mov	r3, r0
 800330c:	2b01      	cmp	r3, #1
 800330e:	d016      	beq.n	800333e <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8003310:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003312:	f000 fed7 	bl	80040c4 <vQueueDelete>
            hSemaphore = NULL;
 8003316:	2300      	movs	r3, #0
 8003318:	627b      	str	r3, [r7, #36]	@ 0x24
 800331a:	e010      	b.n	800333e <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800331c:	6a3b      	ldr	r3, [r7, #32]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d108      	bne.n	8003334 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	461a      	mov	r2, r3
 8003328:	68b9      	ldr	r1, [r7, #8]
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f000 facc 	bl	80038c8 <xQueueCreateCountingSemaphoreStatic>
 8003330:	6278      	str	r0, [r7, #36]	@ 0x24
 8003332:	e004      	b.n	800333e <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003334:	68b9      	ldr	r1, [r7, #8]
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f000 faff 	bl	800393a <xQueueCreateCountingSemaphore>
 800333c:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800333e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00c      	beq.n	800335e <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <osSemaphoreNew+0x11e>
          name = attr->name;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	61fb      	str	r3, [r7, #28]
 8003350:	e001      	b.n	8003356 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8003352:	2300      	movs	r3, #0
 8003354:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8003356:	69f9      	ldr	r1, [r7, #28]
 8003358:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800335a:	f000 ffff 	bl	800435c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800335e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003360:	4618      	mov	r0, r3
 8003362:	3728      	adds	r7, #40	@ 0x28
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	200003dc 	.word	0x200003dc

0800336c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800336c:	b580      	push	{r7, lr}
 800336e:	b08c      	sub	sp, #48	@ 0x30
 8003370:	af02      	add	r7, sp, #8
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003378:	2300      	movs	r3, #0
 800337a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800337c:	f3ef 8305 	mrs	r3, IPSR
 8003380:	61bb      	str	r3, [r7, #24]
  return(result);
 8003382:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003384:	2b00      	cmp	r3, #0
 8003386:	d16f      	bne.n	8003468 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003388:	f3ef 8310 	mrs	r3, PRIMASK
 800338c:	617b      	str	r3, [r7, #20]
  return(result);
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d169      	bne.n	8003468 <osMessageQueueNew+0xfc>
 8003394:	4b37      	ldr	r3, [pc, #220]	@ (8003474 <osMessageQueueNew+0x108>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2b02      	cmp	r3, #2
 800339a:	d105      	bne.n	80033a8 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800339c:	f3ef 8311 	mrs	r3, BASEPRI
 80033a0:	613b      	str	r3, [r7, #16]
  return(result);
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d15f      	bne.n	8003468 <osMessageQueueNew+0xfc>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d05c      	beq.n	8003468 <osMessageQueueNew+0xfc>
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d059      	beq.n	8003468 <osMessageQueueNew+0xfc>
    mem = -1;
 80033b4:	f04f 33ff 	mov.w	r3, #4294967295
 80033b8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d029      	beq.n	8003414 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d012      	beq.n	80033ee <osMessageQueueNew+0x82>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	2b4f      	cmp	r3, #79	@ 0x4f
 80033ce:	d90e      	bls.n	80033ee <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00a      	beq.n	80033ee <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	695a      	ldr	r2, [r3, #20]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	68b9      	ldr	r1, [r7, #8]
 80033e0:	fb01 f303 	mul.w	r3, r1, r3
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d302      	bcc.n	80033ee <osMessageQueueNew+0x82>
        mem = 1;
 80033e8:	2301      	movs	r3, #1
 80033ea:	623b      	str	r3, [r7, #32]
 80033ec:	e014      	b.n	8003418 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d110      	bne.n	8003418 <osMessageQueueNew+0xac>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10c      	bne.n	8003418 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003402:	2b00      	cmp	r3, #0
 8003404:	d108      	bne.n	8003418 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d104      	bne.n	8003418 <osMessageQueueNew+0xac>
          mem = 0;
 800340e:	2300      	movs	r3, #0
 8003410:	623b      	str	r3, [r7, #32]
 8003412:	e001      	b.n	8003418 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8003414:	2300      	movs	r3, #0
 8003416:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003418:	6a3b      	ldr	r3, [r7, #32]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d10b      	bne.n	8003436 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	691a      	ldr	r2, [r3, #16]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	2100      	movs	r1, #0
 8003428:	9100      	str	r1, [sp, #0]
 800342a:	68b9      	ldr	r1, [r7, #8]
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	f000 f96d 	bl	800370c <xQueueGenericCreateStatic>
 8003432:	6278      	str	r0, [r7, #36]	@ 0x24
 8003434:	e008      	b.n	8003448 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d105      	bne.n	8003448 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800343c:	2200      	movs	r2, #0
 800343e:	68b9      	ldr	r1, [r7, #8]
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f000 f9df 	bl	8003804 <xQueueGenericCreate>
 8003446:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00c      	beq.n	8003468 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <osMessageQueueNew+0xf0>
        name = attr->name;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	61fb      	str	r3, [r7, #28]
 800345a:	e001      	b.n	8003460 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800345c:	2300      	movs	r3, #0
 800345e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8003460:	69f9      	ldr	r1, [r7, #28]
 8003462:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003464:	f000 ff7a 	bl	800435c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800346a:	4618      	mov	r0, r3
 800346c:	3728      	adds	r7, #40	@ 0x28
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	200003dc 	.word	0x200003dc

08003478 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	4a06      	ldr	r2, [pc, #24]	@ (80034a0 <vApplicationGetIdleTaskMemory+0x28>)
 8003488:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	4a05      	ldr	r2, [pc, #20]	@ (80034a4 <vApplicationGetIdleTaskMemory+0x2c>)
 800348e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2240      	movs	r2, #64	@ 0x40
 8003494:	601a      	str	r2, [r3, #0]
}
 8003496:	bf00      	nop
 8003498:	3714      	adds	r7, #20
 800349a:	46bd      	mov	sp, r7
 800349c:	bc80      	pop	{r7}
 800349e:	4770      	bx	lr
 80034a0:	200003e0 	.word	0x200003e0
 80034a4:	2000043c 	.word	0x2000043c

080034a8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	4a06      	ldr	r2, [pc, #24]	@ (80034d0 <vApplicationGetTimerTaskMemory+0x28>)
 80034b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	4a05      	ldr	r2, [pc, #20]	@ (80034d4 <vApplicationGetTimerTaskMemory+0x2c>)
 80034be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2240      	movs	r2, #64	@ 0x40
 80034c4:	601a      	str	r2, [r3, #0]
}
 80034c6:	bf00      	nop
 80034c8:	3714      	adds	r7, #20
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bc80      	pop	{r7}
 80034ce:	4770      	bx	lr
 80034d0:	2000053c 	.word	0x2000053c
 80034d4:	20000598 	.word	0x20000598

080034d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f103 0208 	add.w	r2, r3, #8
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f04f 32ff 	mov.w	r2, #4294967295
 80034f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f103 0208 	add.w	r2, r3, #8
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f103 0208 	add.w	r2, r3, #8
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	bc80      	pop	{r7}
 8003514:	4770      	bx	lr

08003516 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003516:	b480      	push	{r7}
 8003518:	b083      	sub	sp, #12
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	bc80      	pop	{r7}
 800352c:	4770      	bx	lr

0800352e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800352e:	b480      	push	{r7}
 8003530:	b085      	sub	sp, #20
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
 8003536:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	1c5a      	adds	r2, r3, #1
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	601a      	str	r2, [r3, #0]
}
 800356a:	bf00      	nop
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	bc80      	pop	{r7}
 8003572:	4770      	bx	lr

08003574 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800358a:	d103      	bne.n	8003594 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	e00c      	b.n	80035ae <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	3308      	adds	r3, #8
 8003598:	60fb      	str	r3, [r7, #12]
 800359a:	e002      	b.n	80035a2 <vListInsert+0x2e>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	60fb      	str	r3, [r7, #12]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68ba      	ldr	r2, [r7, #8]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d2f6      	bcs.n	800359c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	685a      	ldr	r2, [r3, #4]
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	1c5a      	adds	r2, r3, #1
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	601a      	str	r2, [r3, #0]
}
 80035da:	bf00      	nop
 80035dc:	3714      	adds	r7, #20
 80035de:	46bd      	mov	sp, r7
 80035e0:	bc80      	pop	{r7}
 80035e2:	4770      	bx	lr

080035e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	6892      	ldr	r2, [r2, #8]
 80035fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	6852      	ldr	r2, [r2, #4]
 8003604:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	429a      	cmp	r2, r3
 800360e:	d103      	bne.n	8003618 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	1e5a      	subs	r2, r3, #1
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
}
 800362c:	4618      	mov	r0, r3
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	bc80      	pop	{r7}
 8003634:	4770      	bx	lr
	...

08003638 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10b      	bne.n	8003664 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800364c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003650:	f383 8811 	msr	BASEPRI, r3
 8003654:	f3bf 8f6f 	isb	sy
 8003658:	f3bf 8f4f 	dsb	sy
 800365c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800365e:	bf00      	nop
 8003660:	bf00      	nop
 8003662:	e7fd      	b.n	8003660 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003664:	f002 fd52 	bl	800610c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003670:	68f9      	ldr	r1, [r7, #12]
 8003672:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003674:	fb01 f303 	mul.w	r3, r1, r3
 8003678:	441a      	add	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003694:	3b01      	subs	r3, #1
 8003696:	68f9      	ldr	r1, [r7, #12]
 8003698:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800369a:	fb01 f303 	mul.w	r3, r1, r3
 800369e:	441a      	add	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	22ff      	movs	r2, #255	@ 0xff
 80036a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	22ff      	movs	r2, #255	@ 0xff
 80036b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d114      	bne.n	80036e4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d01a      	beq.n	80036f8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	3310      	adds	r3, #16
 80036c6:	4618      	mov	r0, r3
 80036c8:	f001 fb44 	bl	8004d54 <xTaskRemoveFromEventList>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d012      	beq.n	80036f8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80036d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003708 <xQueueGenericReset+0xd0>)
 80036d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	f3bf 8f4f 	dsb	sy
 80036de:	f3bf 8f6f 	isb	sy
 80036e2:	e009      	b.n	80036f8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	3310      	adds	r3, #16
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7ff fef5 	bl	80034d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	3324      	adds	r3, #36	@ 0x24
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7ff fef0 	bl	80034d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80036f8:	f002 fd38 	bl	800616c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80036fc:	2301      	movs	r3, #1
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	e000ed04 	.word	0xe000ed04

0800370c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800370c:	b580      	push	{r7, lr}
 800370e:	b08e      	sub	sp, #56	@ 0x38
 8003710:	af02      	add	r7, sp, #8
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
 8003718:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10b      	bne.n	8003738 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003724:	f383 8811 	msr	BASEPRI, r3
 8003728:	f3bf 8f6f 	isb	sy
 800372c:	f3bf 8f4f 	dsb	sy
 8003730:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003732:	bf00      	nop
 8003734:	bf00      	nop
 8003736:	e7fd      	b.n	8003734 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10b      	bne.n	8003756 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800373e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003742:	f383 8811 	msr	BASEPRI, r3
 8003746:	f3bf 8f6f 	isb	sy
 800374a:	f3bf 8f4f 	dsb	sy
 800374e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003750:	bf00      	nop
 8003752:	bf00      	nop
 8003754:	e7fd      	b.n	8003752 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d002      	beq.n	8003762 <xQueueGenericCreateStatic+0x56>
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <xQueueGenericCreateStatic+0x5a>
 8003762:	2301      	movs	r3, #1
 8003764:	e000      	b.n	8003768 <xQueueGenericCreateStatic+0x5c>
 8003766:	2300      	movs	r3, #0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10b      	bne.n	8003784 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800376c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003770:	f383 8811 	msr	BASEPRI, r3
 8003774:	f3bf 8f6f 	isb	sy
 8003778:	f3bf 8f4f 	dsb	sy
 800377c:	623b      	str	r3, [r7, #32]
}
 800377e:	bf00      	nop
 8003780:	bf00      	nop
 8003782:	e7fd      	b.n	8003780 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d102      	bne.n	8003790 <xQueueGenericCreateStatic+0x84>
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d101      	bne.n	8003794 <xQueueGenericCreateStatic+0x88>
 8003790:	2301      	movs	r3, #1
 8003792:	e000      	b.n	8003796 <xQueueGenericCreateStatic+0x8a>
 8003794:	2300      	movs	r3, #0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10b      	bne.n	80037b2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800379a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800379e:	f383 8811 	msr	BASEPRI, r3
 80037a2:	f3bf 8f6f 	isb	sy
 80037a6:	f3bf 8f4f 	dsb	sy
 80037aa:	61fb      	str	r3, [r7, #28]
}
 80037ac:	bf00      	nop
 80037ae:	bf00      	nop
 80037b0:	e7fd      	b.n	80037ae <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80037b2:	2350      	movs	r3, #80	@ 0x50
 80037b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	2b50      	cmp	r3, #80	@ 0x50
 80037ba:	d00b      	beq.n	80037d4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80037bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037c0:	f383 8811 	msr	BASEPRI, r3
 80037c4:	f3bf 8f6f 	isb	sy
 80037c8:	f3bf 8f4f 	dsb	sy
 80037cc:	61bb      	str	r3, [r7, #24]
}
 80037ce:	bf00      	nop
 80037d0:	bf00      	nop
 80037d2:	e7fd      	b.n	80037d0 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80037d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00d      	beq.n	80037fa <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80037de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80037e6:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80037ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	4613      	mov	r3, r2
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	68b9      	ldr	r1, [r7, #8]
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f000 f844 	bl	8003882 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80037fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3730      	adds	r7, #48	@ 0x30
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003804:	b580      	push	{r7, lr}
 8003806:	b08a      	sub	sp, #40	@ 0x28
 8003808:	af02      	add	r7, sp, #8
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	4613      	mov	r3, r2
 8003810:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10b      	bne.n	8003830 <xQueueGenericCreate+0x2c>
	__asm volatile
 8003818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800381c:	f383 8811 	msr	BASEPRI, r3
 8003820:	f3bf 8f6f 	isb	sy
 8003824:	f3bf 8f4f 	dsb	sy
 8003828:	613b      	str	r3, [r7, #16]
}
 800382a:	bf00      	nop
 800382c:	bf00      	nop
 800382e:	e7fd      	b.n	800382c <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d102      	bne.n	800383c <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003836:	2300      	movs	r3, #0
 8003838:	61fb      	str	r3, [r7, #28]
 800383a:	e004      	b.n	8003846 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	fb02 f303 	mul.w	r3, r2, r3
 8003844:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	3350      	adds	r3, #80	@ 0x50
 800384a:	4618      	mov	r0, r3
 800384c:	f002 fd60 	bl	8006310 <pvPortMalloc>
 8003850:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00f      	beq.n	8003878 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	3350      	adds	r3, #80	@ 0x50
 800385c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003866:	79fa      	ldrb	r2, [r7, #7]
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	9300      	str	r3, [sp, #0]
 800386c:	4613      	mov	r3, r2
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	68b9      	ldr	r1, [r7, #8]
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f000 f805 	bl	8003882 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003878:	69bb      	ldr	r3, [r7, #24]
	}
 800387a:	4618      	mov	r0, r3
 800387c:	3720      	adds	r7, #32
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003882:	b580      	push	{r7, lr}
 8003884:	b084      	sub	sp, #16
 8003886:	af00      	add	r7, sp, #0
 8003888:	60f8      	str	r0, [r7, #12]
 800388a:	60b9      	str	r1, [r7, #8]
 800388c:	607a      	str	r2, [r7, #4]
 800388e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d103      	bne.n	800389e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	e002      	b.n	80038a4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80038b0:	2101      	movs	r1, #1
 80038b2:	69b8      	ldr	r0, [r7, #24]
 80038b4:	f7ff fec0 	bl	8003638 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	78fa      	ldrb	r2, [r7, #3]
 80038bc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80038c0:	bf00      	nop
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b08a      	sub	sp, #40	@ 0x28
 80038cc:	af02      	add	r7, sp, #8
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d10b      	bne.n	80038f2 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 80038da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038de:	f383 8811 	msr	BASEPRI, r3
 80038e2:	f3bf 8f6f 	isb	sy
 80038e6:	f3bf 8f4f 	dsb	sy
 80038ea:	61bb      	str	r3, [r7, #24]
}
 80038ec:	bf00      	nop
 80038ee:	bf00      	nop
 80038f0:	e7fd      	b.n	80038ee <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80038f2:	68ba      	ldr	r2, [r7, #8]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d90b      	bls.n	8003912 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 80038fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038fe:	f383 8811 	msr	BASEPRI, r3
 8003902:	f3bf 8f6f 	isb	sy
 8003906:	f3bf 8f4f 	dsb	sy
 800390a:	617b      	str	r3, [r7, #20]
}
 800390c:	bf00      	nop
 800390e:	bf00      	nop
 8003910:	e7fd      	b.n	800390e <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003912:	2302      	movs	r3, #2
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	2100      	movs	r1, #0
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f7ff fef5 	bl	800370c <xQueueGenericCreateStatic>
 8003922:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d002      	beq.n	8003930 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003930:	69fb      	ldr	r3, [r7, #28]
	}
 8003932:	4618      	mov	r0, r3
 8003934:	3720      	adds	r7, #32
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800393a:	b580      	push	{r7, lr}
 800393c:	b086      	sub	sp, #24
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
 8003942:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10b      	bne.n	8003962 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800394a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800394e:	f383 8811 	msr	BASEPRI, r3
 8003952:	f3bf 8f6f 	isb	sy
 8003956:	f3bf 8f4f 	dsb	sy
 800395a:	613b      	str	r3, [r7, #16]
}
 800395c:	bf00      	nop
 800395e:	bf00      	nop
 8003960:	e7fd      	b.n	800395e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	429a      	cmp	r2, r3
 8003968:	d90b      	bls.n	8003982 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800396a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800396e:	f383 8811 	msr	BASEPRI, r3
 8003972:	f3bf 8f6f 	isb	sy
 8003976:	f3bf 8f4f 	dsb	sy
 800397a:	60fb      	str	r3, [r7, #12]
}
 800397c:	bf00      	nop
 800397e:	bf00      	nop
 8003980:	e7fd      	b.n	800397e <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003982:	2202      	movs	r2, #2
 8003984:	2100      	movs	r1, #0
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7ff ff3c 	bl	8003804 <xQueueGenericCreate>
 800398c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d002      	beq.n	800399a <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800399a:	697b      	ldr	r3, [r7, #20]
	}
 800399c:	4618      	mov	r0, r3
 800399e:	3718      	adds	r7, #24
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b08e      	sub	sp, #56	@ 0x38
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
 80039b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80039b2:	2300      	movs	r3, #0
 80039b4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80039ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d10b      	bne.n	80039d8 <xQueueGenericSend+0x34>
	__asm volatile
 80039c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039c4:	f383 8811 	msr	BASEPRI, r3
 80039c8:	f3bf 8f6f 	isb	sy
 80039cc:	f3bf 8f4f 	dsb	sy
 80039d0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80039d2:	bf00      	nop
 80039d4:	bf00      	nop
 80039d6:	e7fd      	b.n	80039d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d103      	bne.n	80039e6 <xQueueGenericSend+0x42>
 80039de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <xQueueGenericSend+0x46>
 80039e6:	2301      	movs	r3, #1
 80039e8:	e000      	b.n	80039ec <xQueueGenericSend+0x48>
 80039ea:	2300      	movs	r3, #0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10b      	bne.n	8003a08 <xQueueGenericSend+0x64>
	__asm volatile
 80039f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039f4:	f383 8811 	msr	BASEPRI, r3
 80039f8:	f3bf 8f6f 	isb	sy
 80039fc:	f3bf 8f4f 	dsb	sy
 8003a00:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003a02:	bf00      	nop
 8003a04:	bf00      	nop
 8003a06:	e7fd      	b.n	8003a04 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d103      	bne.n	8003a16 <xQueueGenericSend+0x72>
 8003a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d101      	bne.n	8003a1a <xQueueGenericSend+0x76>
 8003a16:	2301      	movs	r3, #1
 8003a18:	e000      	b.n	8003a1c <xQueueGenericSend+0x78>
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10b      	bne.n	8003a38 <xQueueGenericSend+0x94>
	__asm volatile
 8003a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a24:	f383 8811 	msr	BASEPRI, r3
 8003a28:	f3bf 8f6f 	isb	sy
 8003a2c:	f3bf 8f4f 	dsb	sy
 8003a30:	623b      	str	r3, [r7, #32]
}
 8003a32:	bf00      	nop
 8003a34:	bf00      	nop
 8003a36:	e7fd      	b.n	8003a34 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a38:	f001 fb5e 	bl	80050f8 <xTaskGetSchedulerState>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d102      	bne.n	8003a48 <xQueueGenericSend+0xa4>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d101      	bne.n	8003a4c <xQueueGenericSend+0xa8>
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e000      	b.n	8003a4e <xQueueGenericSend+0xaa>
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10b      	bne.n	8003a6a <xQueueGenericSend+0xc6>
	__asm volatile
 8003a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a56:	f383 8811 	msr	BASEPRI, r3
 8003a5a:	f3bf 8f6f 	isb	sy
 8003a5e:	f3bf 8f4f 	dsb	sy
 8003a62:	61fb      	str	r3, [r7, #28]
}
 8003a64:	bf00      	nop
 8003a66:	bf00      	nop
 8003a68:	e7fd      	b.n	8003a66 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a6a:	f002 fb4f 	bl	800610c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d302      	bcc.n	8003a80 <xQueueGenericSend+0xdc>
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d129      	bne.n	8003ad4 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	68b9      	ldr	r1, [r7, #8]
 8003a84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a86:	f000 fb58 	bl	800413a <prvCopyDataToQueue>
 8003a8a:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d010      	beq.n	8003ab6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a96:	3324      	adds	r3, #36	@ 0x24
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f001 f95b 	bl	8004d54 <xTaskRemoveFromEventList>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d013      	beq.n	8003acc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003aa4:	4b3f      	ldr	r3, [pc, #252]	@ (8003ba4 <xQueueGenericSend+0x200>)
 8003aa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003aaa:	601a      	str	r2, [r3, #0]
 8003aac:	f3bf 8f4f 	dsb	sy
 8003ab0:	f3bf 8f6f 	isb	sy
 8003ab4:	e00a      	b.n	8003acc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d007      	beq.n	8003acc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003abc:	4b39      	ldr	r3, [pc, #228]	@ (8003ba4 <xQueueGenericSend+0x200>)
 8003abe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	f3bf 8f4f 	dsb	sy
 8003ac8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003acc:	f002 fb4e 	bl	800616c <vPortExitCritical>
				return pdPASS;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e063      	b.n	8003b9c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d103      	bne.n	8003ae2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003ada:	f002 fb47 	bl	800616c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	e05c      	b.n	8003b9c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d106      	bne.n	8003af6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ae8:	f107 0314 	add.w	r3, r7, #20
 8003aec:	4618      	mov	r0, r3
 8003aee:	f001 f995 	bl	8004e1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003af2:	2301      	movs	r3, #1
 8003af4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003af6:	f002 fb39 	bl	800616c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003afa:	f000 feef 	bl	80048dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003afe:	f002 fb05 	bl	800610c <vPortEnterCritical>
 8003b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b08:	b25b      	sxtb	r3, r3
 8003b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b0e:	d103      	bne.n	8003b18 <xQueueGenericSend+0x174>
 8003b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b1a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b1e:	b25b      	sxtb	r3, r3
 8003b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b24:	d103      	bne.n	8003b2e <xQueueGenericSend+0x18a>
 8003b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b2e:	f002 fb1d 	bl	800616c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b32:	1d3a      	adds	r2, r7, #4
 8003b34:	f107 0314 	add.w	r3, r7, #20
 8003b38:	4611      	mov	r1, r2
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f001 f984 	bl	8004e48 <xTaskCheckForTimeOut>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d124      	bne.n	8003b90 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003b46:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003b48:	f000 fbef 	bl	800432a <prvIsQueueFull>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d018      	beq.n	8003b84 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b54:	3310      	adds	r3, #16
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	4611      	mov	r1, r2
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f001 f8a8 	bl	8004cb0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003b60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003b62:	f000 fb7a 	bl	800425a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003b66:	f000 fec7 	bl	80048f8 <xTaskResumeAll>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f47f af7c 	bne.w	8003a6a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003b72:	4b0c      	ldr	r3, [pc, #48]	@ (8003ba4 <xQueueGenericSend+0x200>)
 8003b74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	f3bf 8f4f 	dsb	sy
 8003b7e:	f3bf 8f6f 	isb	sy
 8003b82:	e772      	b.n	8003a6a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003b84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003b86:	f000 fb68 	bl	800425a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b8a:	f000 feb5 	bl	80048f8 <xTaskResumeAll>
 8003b8e:	e76c      	b.n	8003a6a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003b90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003b92:	f000 fb62 	bl	800425a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b96:	f000 feaf 	bl	80048f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003b9a:	2300      	movs	r3, #0
		}
	}
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3738      	adds	r7, #56	@ 0x38
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	e000ed04 	.word	0xe000ed04

08003ba8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b08e      	sub	sp, #56	@ 0x38
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
 8003bb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10b      	bne.n	8003bd8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bc4:	f383 8811 	msr	BASEPRI, r3
 8003bc8:	f3bf 8f6f 	isb	sy
 8003bcc:	f3bf 8f4f 	dsb	sy
 8003bd0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003bd2:	bf00      	nop
 8003bd4:	bf00      	nop
 8003bd6:	e7fd      	b.n	8003bd4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d103      	bne.n	8003be6 <xQueueGenericSendFromISR+0x3e>
 8003bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <xQueueGenericSendFromISR+0x42>
 8003be6:	2301      	movs	r3, #1
 8003be8:	e000      	b.n	8003bec <xQueueGenericSendFromISR+0x44>
 8003bea:	2300      	movs	r3, #0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10b      	bne.n	8003c08 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bf4:	f383 8811 	msr	BASEPRI, r3
 8003bf8:	f3bf 8f6f 	isb	sy
 8003bfc:	f3bf 8f4f 	dsb	sy
 8003c00:	623b      	str	r3, [r7, #32]
}
 8003c02:	bf00      	nop
 8003c04:	bf00      	nop
 8003c06:	e7fd      	b.n	8003c04 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d103      	bne.n	8003c16 <xQueueGenericSendFromISR+0x6e>
 8003c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d101      	bne.n	8003c1a <xQueueGenericSendFromISR+0x72>
 8003c16:	2301      	movs	r3, #1
 8003c18:	e000      	b.n	8003c1c <xQueueGenericSendFromISR+0x74>
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10b      	bne.n	8003c38 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c24:	f383 8811 	msr	BASEPRI, r3
 8003c28:	f3bf 8f6f 	isb	sy
 8003c2c:	f3bf 8f4f 	dsb	sy
 8003c30:	61fb      	str	r3, [r7, #28]
}
 8003c32:	bf00      	nop
 8003c34:	bf00      	nop
 8003c36:	e7fd      	b.n	8003c34 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c38:	f002 fb2a 	bl	8006290 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003c3c:	f3ef 8211 	mrs	r2, BASEPRI
 8003c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c44:	f383 8811 	msr	BASEPRI, r3
 8003c48:	f3bf 8f6f 	isb	sy
 8003c4c:	f3bf 8f4f 	dsb	sy
 8003c50:	61ba      	str	r2, [r7, #24]
 8003c52:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003c54:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d302      	bcc.n	8003c6a <xQueueGenericSendFromISR+0xc2>
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d12c      	bne.n	8003cc4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c6c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003c70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	68b9      	ldr	r1, [r7, #8]
 8003c78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003c7a:	f000 fa5e 	bl	800413a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003c7e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8003c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c86:	d112      	bne.n	8003cae <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d016      	beq.n	8003cbe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c92:	3324      	adds	r3, #36	@ 0x24
 8003c94:	4618      	mov	r0, r3
 8003c96:	f001 f85d 	bl	8004d54 <xTaskRemoveFromEventList>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00e      	beq.n	8003cbe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00b      	beq.n	8003cbe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	601a      	str	r2, [r3, #0]
 8003cac:	e007      	b.n	8003cbe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003cae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	b25a      	sxtb	r2, r3
 8003cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8003cc2:	e001      	b.n	8003cc8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cca:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003cd2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003cd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3738      	adds	r7, #56	@ 0x38
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
	...

08003ce0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b08c      	sub	sp, #48	@ 0x30
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003cec:	2300      	movs	r3, #0
 8003cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10b      	bne.n	8003d12 <xQueueReceive+0x32>
	__asm volatile
 8003cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cfe:	f383 8811 	msr	BASEPRI, r3
 8003d02:	f3bf 8f6f 	isb	sy
 8003d06:	f3bf 8f4f 	dsb	sy
 8003d0a:	623b      	str	r3, [r7, #32]
}
 8003d0c:	bf00      	nop
 8003d0e:	bf00      	nop
 8003d10:	e7fd      	b.n	8003d0e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d103      	bne.n	8003d20 <xQueueReceive+0x40>
 8003d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d101      	bne.n	8003d24 <xQueueReceive+0x44>
 8003d20:	2301      	movs	r3, #1
 8003d22:	e000      	b.n	8003d26 <xQueueReceive+0x46>
 8003d24:	2300      	movs	r3, #0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10b      	bne.n	8003d42 <xQueueReceive+0x62>
	__asm volatile
 8003d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d2e:	f383 8811 	msr	BASEPRI, r3
 8003d32:	f3bf 8f6f 	isb	sy
 8003d36:	f3bf 8f4f 	dsb	sy
 8003d3a:	61fb      	str	r3, [r7, #28]
}
 8003d3c:	bf00      	nop
 8003d3e:	bf00      	nop
 8003d40:	e7fd      	b.n	8003d3e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d42:	f001 f9d9 	bl	80050f8 <xTaskGetSchedulerState>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d102      	bne.n	8003d52 <xQueueReceive+0x72>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <xQueueReceive+0x76>
 8003d52:	2301      	movs	r3, #1
 8003d54:	e000      	b.n	8003d58 <xQueueReceive+0x78>
 8003d56:	2300      	movs	r3, #0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d10b      	bne.n	8003d74 <xQueueReceive+0x94>
	__asm volatile
 8003d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d60:	f383 8811 	msr	BASEPRI, r3
 8003d64:	f3bf 8f6f 	isb	sy
 8003d68:	f3bf 8f4f 	dsb	sy
 8003d6c:	61bb      	str	r3, [r7, #24]
}
 8003d6e:	bf00      	nop
 8003d70:	bf00      	nop
 8003d72:	e7fd      	b.n	8003d70 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d74:	f002 f9ca 	bl	800610c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d7c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d01f      	beq.n	8003dc4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003d84:	68b9      	ldr	r1, [r7, #8]
 8003d86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d88:	f000 fa41 	bl	800420e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8e:	1e5a      	subs	r2, r3, #1
 8003d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d92:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00f      	beq.n	8003dbc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d9e:	3310      	adds	r3, #16
 8003da0:	4618      	mov	r0, r3
 8003da2:	f000 ffd7 	bl	8004d54 <xTaskRemoveFromEventList>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d007      	beq.n	8003dbc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003dac:	4b3c      	ldr	r3, [pc, #240]	@ (8003ea0 <xQueueReceive+0x1c0>)
 8003dae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	f3bf 8f4f 	dsb	sy
 8003db8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003dbc:	f002 f9d6 	bl	800616c <vPortExitCritical>
				return pdPASS;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e069      	b.n	8003e98 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d103      	bne.n	8003dd2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003dca:	f002 f9cf 	bl	800616c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	e062      	b.n	8003e98 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d106      	bne.n	8003de6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003dd8:	f107 0310 	add.w	r3, r7, #16
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f001 f81d 	bl	8004e1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003de2:	2301      	movs	r3, #1
 8003de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003de6:	f002 f9c1 	bl	800616c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003dea:	f000 fd77 	bl	80048dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003dee:	f002 f98d 	bl	800610c <vPortEnterCritical>
 8003df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003df4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003df8:	b25b      	sxtb	r3, r3
 8003dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dfe:	d103      	bne.n	8003e08 <xQueueReceive+0x128>
 8003e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e0a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e0e:	b25b      	sxtb	r3, r3
 8003e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e14:	d103      	bne.n	8003e1e <xQueueReceive+0x13e>
 8003e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e1e:	f002 f9a5 	bl	800616c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e22:	1d3a      	adds	r2, r7, #4
 8003e24:	f107 0310 	add.w	r3, r7, #16
 8003e28:	4611      	mov	r1, r2
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f001 f80c 	bl	8004e48 <xTaskCheckForTimeOut>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d123      	bne.n	8003e7e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e38:	f000 fa61 	bl	80042fe <prvIsQueueEmpty>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d017      	beq.n	8003e72 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e44:	3324      	adds	r3, #36	@ 0x24
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	4611      	mov	r1, r2
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 ff30 	bl	8004cb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003e50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e52:	f000 fa02 	bl	800425a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003e56:	f000 fd4f 	bl	80048f8 <xTaskResumeAll>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d189      	bne.n	8003d74 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003e60:	4b0f      	ldr	r3, [pc, #60]	@ (8003ea0 <xQueueReceive+0x1c0>)
 8003e62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e66:	601a      	str	r2, [r3, #0]
 8003e68:	f3bf 8f4f 	dsb	sy
 8003e6c:	f3bf 8f6f 	isb	sy
 8003e70:	e780      	b.n	8003d74 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003e72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e74:	f000 f9f1 	bl	800425a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e78:	f000 fd3e 	bl	80048f8 <xTaskResumeAll>
 8003e7c:	e77a      	b.n	8003d74 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003e7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e80:	f000 f9eb 	bl	800425a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e84:	f000 fd38 	bl	80048f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e8a:	f000 fa38 	bl	80042fe <prvIsQueueEmpty>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f43f af6f 	beq.w	8003d74 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003e96:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3730      	adds	r7, #48	@ 0x30
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	e000ed04 	.word	0xe000ed04

08003ea4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b08e      	sub	sp, #56	@ 0x38
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d10b      	bne.n	8003ed8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8003ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ec4:	f383 8811 	msr	BASEPRI, r3
 8003ec8:	f3bf 8f6f 	isb	sy
 8003ecc:	f3bf 8f4f 	dsb	sy
 8003ed0:	623b      	str	r3, [r7, #32]
}
 8003ed2:	bf00      	nop
 8003ed4:	bf00      	nop
 8003ed6:	e7fd      	b.n	8003ed4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00b      	beq.n	8003ef8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8003ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ee4:	f383 8811 	msr	BASEPRI, r3
 8003ee8:	f3bf 8f6f 	isb	sy
 8003eec:	f3bf 8f4f 	dsb	sy
 8003ef0:	61fb      	str	r3, [r7, #28]
}
 8003ef2:	bf00      	nop
 8003ef4:	bf00      	nop
 8003ef6:	e7fd      	b.n	8003ef4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ef8:	f001 f8fe 	bl	80050f8 <xTaskGetSchedulerState>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d102      	bne.n	8003f08 <xQueueSemaphoreTake+0x64>
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d101      	bne.n	8003f0c <xQueueSemaphoreTake+0x68>
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e000      	b.n	8003f0e <xQueueSemaphoreTake+0x6a>
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10b      	bne.n	8003f2a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8003f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f16:	f383 8811 	msr	BASEPRI, r3
 8003f1a:	f3bf 8f6f 	isb	sy
 8003f1e:	f3bf 8f4f 	dsb	sy
 8003f22:	61bb      	str	r3, [r7, #24]
}
 8003f24:	bf00      	nop
 8003f26:	bf00      	nop
 8003f28:	e7fd      	b.n	8003f26 <xQueueSemaphoreTake+0x82>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f2a:	f002 f8ef 	bl	800610c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f32:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d024      	beq.n	8003f84 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f3c:	1e5a      	subs	r2, r3, #1
 8003f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f40:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d104      	bne.n	8003f54 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003f4a:	f001 fa59 	bl	8005400 <pvTaskIncrementMutexHeldCount>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f52:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00f      	beq.n	8003f7c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f5e:	3310      	adds	r3, #16
 8003f60:	4618      	mov	r0, r3
 8003f62:	f000 fef7 	bl	8004d54 <xTaskRemoveFromEventList>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d007      	beq.n	8003f7c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003f6c:	4b54      	ldr	r3, [pc, #336]	@ (80040c0 <xQueueSemaphoreTake+0x21c>)
 8003f6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f72:	601a      	str	r2, [r3, #0]
 8003f74:	f3bf 8f4f 	dsb	sy
 8003f78:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003f7c:	f002 f8f6 	bl	800616c <vPortExitCritical>
				return pdPASS;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e098      	b.n	80040b6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d112      	bne.n	8003fb0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00b      	beq.n	8003fa8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8003f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f94:	f383 8811 	msr	BASEPRI, r3
 8003f98:	f3bf 8f6f 	isb	sy
 8003f9c:	f3bf 8f4f 	dsb	sy
 8003fa0:	617b      	str	r3, [r7, #20]
}
 8003fa2:	bf00      	nop
 8003fa4:	bf00      	nop
 8003fa6:	e7fd      	b.n	8003fa4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003fa8:	f002 f8e0 	bl	800616c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003fac:	2300      	movs	r3, #0
 8003fae:	e082      	b.n	80040b6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003fb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d106      	bne.n	8003fc4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003fb6:	f107 030c 	add.w	r3, r7, #12
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 ff2e 	bl	8004e1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003fc4:	f002 f8d2 	bl	800616c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003fc8:	f000 fc88 	bl	80048dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003fcc:	f002 f89e 	bl	800610c <vPortEnterCritical>
 8003fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fd2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003fd6:	b25b      	sxtb	r3, r3
 8003fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fdc:	d103      	bne.n	8003fe6 <xQueueSemaphoreTake+0x142>
 8003fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fe8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003fec:	b25b      	sxtb	r3, r3
 8003fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff2:	d103      	bne.n	8003ffc <xQueueSemaphoreTake+0x158>
 8003ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ffc:	f002 f8b6 	bl	800616c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004000:	463a      	mov	r2, r7
 8004002:	f107 030c 	add.w	r3, r7, #12
 8004006:	4611      	mov	r1, r2
 8004008:	4618      	mov	r0, r3
 800400a:	f000 ff1d 	bl	8004e48 <xTaskCheckForTimeOut>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d132      	bne.n	800407a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004014:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004016:	f000 f972 	bl	80042fe <prvIsQueueEmpty>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d026      	beq.n	800406e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d109      	bne.n	800403c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004028:	f002 f870 	bl	800610c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800402c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	4618      	mov	r0, r3
 8004032:	f001 f87f 	bl	8005134 <xTaskPriorityInherit>
 8004036:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004038:	f002 f898 	bl	800616c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800403c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800403e:	3324      	adds	r3, #36	@ 0x24
 8004040:	683a      	ldr	r2, [r7, #0]
 8004042:	4611      	mov	r1, r2
 8004044:	4618      	mov	r0, r3
 8004046:	f000 fe33 	bl	8004cb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800404a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800404c:	f000 f905 	bl	800425a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004050:	f000 fc52 	bl	80048f8 <xTaskResumeAll>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	f47f af67 	bne.w	8003f2a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800405c:	4b18      	ldr	r3, [pc, #96]	@ (80040c0 <xQueueSemaphoreTake+0x21c>)
 800405e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004062:	601a      	str	r2, [r3, #0]
 8004064:	f3bf 8f4f 	dsb	sy
 8004068:	f3bf 8f6f 	isb	sy
 800406c:	e75d      	b.n	8003f2a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800406e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004070:	f000 f8f3 	bl	800425a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004074:	f000 fc40 	bl	80048f8 <xTaskResumeAll>
 8004078:	e757      	b.n	8003f2a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800407a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800407c:	f000 f8ed 	bl	800425a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004080:	f000 fc3a 	bl	80048f8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004084:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004086:	f000 f93a 	bl	80042fe <prvIsQueueEmpty>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	f43f af4c 	beq.w	8003f2a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00d      	beq.n	80040b4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004098:	f002 f838 	bl	800610c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800409c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800409e:	f000 f835 	bl	800410c <prvGetDisinheritPriorityAfterTimeout>
 80040a2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80040a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80040aa:	4618      	mov	r0, r3
 80040ac:	f001 f920 	bl	80052f0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80040b0:	f002 f85c 	bl	800616c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80040b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3738      	adds	r7, #56	@ 0x38
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	e000ed04 	.word	0xe000ed04

080040c4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10b      	bne.n	80040ee <vQueueDelete+0x2a>
	__asm volatile
 80040d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040da:	f383 8811 	msr	BASEPRI, r3
 80040de:	f3bf 8f6f 	isb	sy
 80040e2:	f3bf 8f4f 	dsb	sy
 80040e6:	60bb      	str	r3, [r7, #8]
}
 80040e8:	bf00      	nop
 80040ea:	bf00      	nop
 80040ec:	e7fd      	b.n	80040ea <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f000 f95c 	bl	80043ac <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d102      	bne.n	8004104 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f002 f9ce 	bl	80064a0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004104:	bf00      	nop
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004118:	2b00      	cmp	r3, #0
 800411a:	d006      	beq.n	800412a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8004126:	60fb      	str	r3, [r7, #12]
 8004128:	e001      	b.n	800412e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800412a:	2300      	movs	r3, #0
 800412c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800412e:	68fb      	ldr	r3, [r7, #12]
	}
 8004130:	4618      	mov	r0, r3
 8004132:	3714      	adds	r7, #20
 8004134:	46bd      	mov	sp, r7
 8004136:	bc80      	pop	{r7}
 8004138:	4770      	bx	lr

0800413a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800413a:	b580      	push	{r7, lr}
 800413c:	b086      	sub	sp, #24
 800413e:	af00      	add	r7, sp, #0
 8004140:	60f8      	str	r0, [r7, #12]
 8004142:	60b9      	str	r1, [r7, #8]
 8004144:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004146:	2300      	movs	r3, #0
 8004148:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800414e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10d      	bne.n	8004174 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d14d      	bne.n	80041fc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	4618      	mov	r0, r3
 8004166:	f001 f853 	bl	8005210 <xTaskPriorityDisinherit>
 800416a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	605a      	str	r2, [r3, #4]
 8004172:	e043      	b.n	80041fc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d119      	bne.n	80041ae <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6898      	ldr	r0, [r3, #8]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004182:	461a      	mov	r2, r3
 8004184:	68b9      	ldr	r1, [r7, #8]
 8004186:	f003 ff77 	bl	8008078 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	689a      	ldr	r2, [r3, #8]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004192:	441a      	add	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	689a      	ldr	r2, [r3, #8]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d32b      	bcc.n	80041fc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	609a      	str	r2, [r3, #8]
 80041ac:	e026      	b.n	80041fc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	68d8      	ldr	r0, [r3, #12]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b6:	461a      	mov	r2, r3
 80041b8:	68b9      	ldr	r1, [r7, #8]
 80041ba:	f003 ff5d 	bl	8008078 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	68da      	ldr	r2, [r3, #12]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c6:	425b      	negs	r3, r3
 80041c8:	441a      	add	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	68da      	ldr	r2, [r3, #12]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d207      	bcs.n	80041ea <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e2:	425b      	negs	r3, r3
 80041e4:	441a      	add	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d105      	bne.n	80041fc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d002      	beq.n	80041fc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	3b01      	subs	r3, #1
 80041fa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	1c5a      	adds	r2, r3, #1
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004204:	697b      	ldr	r3, [r7, #20]
}
 8004206:	4618      	mov	r0, r3
 8004208:	3718      	adds	r7, #24
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b082      	sub	sp, #8
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
 8004216:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421c:	2b00      	cmp	r3, #0
 800421e:	d018      	beq.n	8004252 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	68da      	ldr	r2, [r3, #12]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004228:	441a      	add	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	68da      	ldr	r2, [r3, #12]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	429a      	cmp	r2, r3
 8004238:	d303      	bcc.n	8004242 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68d9      	ldr	r1, [r3, #12]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424a:	461a      	mov	r2, r3
 800424c:	6838      	ldr	r0, [r7, #0]
 800424e:	f003 ff13 	bl	8008078 <memcpy>
	}
}
 8004252:	bf00      	nop
 8004254:	3708      	adds	r7, #8
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b084      	sub	sp, #16
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004262:	f001 ff53 	bl	800610c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800426c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800426e:	e011      	b.n	8004294 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004274:	2b00      	cmp	r3, #0
 8004276:	d012      	beq.n	800429e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	3324      	adds	r3, #36	@ 0x24
 800427c:	4618      	mov	r0, r3
 800427e:	f000 fd69 	bl	8004d54 <xTaskRemoveFromEventList>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d001      	beq.n	800428c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004288:	f000 fe42 	bl	8004f10 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800428c:	7bfb      	ldrb	r3, [r7, #15]
 800428e:	3b01      	subs	r3, #1
 8004290:	b2db      	uxtb	r3, r3
 8004292:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004294:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004298:	2b00      	cmp	r3, #0
 800429a:	dce9      	bgt.n	8004270 <prvUnlockQueue+0x16>
 800429c:	e000      	b.n	80042a0 <prvUnlockQueue+0x46>
					break;
 800429e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	22ff      	movs	r2, #255	@ 0xff
 80042a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80042a8:	f001 ff60 	bl	800616c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80042ac:	f001 ff2e 	bl	800610c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80042b6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80042b8:	e011      	b.n	80042de <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d012      	beq.n	80042e8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	3310      	adds	r3, #16
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 fd44 	bl	8004d54 <xTaskRemoveFromEventList>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80042d2:	f000 fe1d 	bl	8004f10 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80042d6:	7bbb      	ldrb	r3, [r7, #14]
 80042d8:	3b01      	subs	r3, #1
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80042de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	dce9      	bgt.n	80042ba <prvUnlockQueue+0x60>
 80042e6:	e000      	b.n	80042ea <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80042e8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	22ff      	movs	r2, #255	@ 0xff
 80042ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80042f2:	f001 ff3b 	bl	800616c <vPortExitCritical>
}
 80042f6:	bf00      	nop
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b084      	sub	sp, #16
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004306:	f001 ff01 	bl	800610c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800430e:	2b00      	cmp	r3, #0
 8004310:	d102      	bne.n	8004318 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004312:	2301      	movs	r3, #1
 8004314:	60fb      	str	r3, [r7, #12]
 8004316:	e001      	b.n	800431c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004318:	2300      	movs	r3, #0
 800431a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800431c:	f001 ff26 	bl	800616c <vPortExitCritical>

	return xReturn;
 8004320:	68fb      	ldr	r3, [r7, #12]
}
 8004322:	4618      	mov	r0, r3
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b084      	sub	sp, #16
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004332:	f001 feeb 	bl	800610c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800433e:	429a      	cmp	r2, r3
 8004340:	d102      	bne.n	8004348 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004342:	2301      	movs	r3, #1
 8004344:	60fb      	str	r3, [r7, #12]
 8004346:	e001      	b.n	800434c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004348:	2300      	movs	r3, #0
 800434a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800434c:	f001 ff0e 	bl	800616c <vPortExitCritical>

	return xReturn;
 8004350:	68fb      	ldr	r3, [r7, #12]
}
 8004352:	4618      	mov	r0, r3
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
	...

0800435c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004366:	2300      	movs	r3, #0
 8004368:	60fb      	str	r3, [r7, #12]
 800436a:	e014      	b.n	8004396 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800436c:	4a0e      	ldr	r2, [pc, #56]	@ (80043a8 <vQueueAddToRegistry+0x4c>)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d10b      	bne.n	8004390 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004378:	490b      	ldr	r1, [pc, #44]	@ (80043a8 <vQueueAddToRegistry+0x4c>)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	683a      	ldr	r2, [r7, #0]
 800437e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004382:	4a09      	ldr	r2, [pc, #36]	@ (80043a8 <vQueueAddToRegistry+0x4c>)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	4413      	add	r3, r2
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800438e:	e006      	b.n	800439e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	3301      	adds	r3, #1
 8004394:	60fb      	str	r3, [r7, #12]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2b07      	cmp	r3, #7
 800439a:	d9e7      	bls.n	800436c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800439c:	bf00      	nop
 800439e:	bf00      	nop
 80043a0:	3714      	adds	r7, #20
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bc80      	pop	{r7}
 80043a6:	4770      	bx	lr
 80043a8:	20000698 	.word	0x20000698

080043ac <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80043b4:	2300      	movs	r3, #0
 80043b6:	60fb      	str	r3, [r7, #12]
 80043b8:	e016      	b.n	80043e8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80043ba:	4a10      	ldr	r2, [pc, #64]	@ (80043fc <vQueueUnregisterQueue+0x50>)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	00db      	lsls	r3, r3, #3
 80043c0:	4413      	add	r3, r2
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d10b      	bne.n	80043e2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80043ca:	4a0c      	ldr	r2, [pc, #48]	@ (80043fc <vQueueUnregisterQueue+0x50>)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2100      	movs	r1, #0
 80043d0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80043d4:	4a09      	ldr	r2, [pc, #36]	@ (80043fc <vQueueUnregisterQueue+0x50>)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	00db      	lsls	r3, r3, #3
 80043da:	4413      	add	r3, r2
 80043dc:	2200      	movs	r2, #0
 80043de:	605a      	str	r2, [r3, #4]
				break;
 80043e0:	e006      	b.n	80043f0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	3301      	adds	r3, #1
 80043e6:	60fb      	str	r3, [r7, #12]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2b07      	cmp	r3, #7
 80043ec:	d9e5      	bls.n	80043ba <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80043ee:	bf00      	nop
 80043f0:	bf00      	nop
 80043f2:	3714      	adds	r7, #20
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bc80      	pop	{r7}
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	20000698 	.word	0x20000698

08004400 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004410:	f001 fe7c 	bl	800610c <vPortEnterCritical>
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800441a:	b25b      	sxtb	r3, r3
 800441c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004420:	d103      	bne.n	800442a <vQueueWaitForMessageRestricted+0x2a>
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004430:	b25b      	sxtb	r3, r3
 8004432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004436:	d103      	bne.n	8004440 <vQueueWaitForMessageRestricted+0x40>
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004440:	f001 fe94 	bl	800616c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004448:	2b00      	cmp	r3, #0
 800444a:	d106      	bne.n	800445a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	3324      	adds	r3, #36	@ 0x24
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	68b9      	ldr	r1, [r7, #8]
 8004454:	4618      	mov	r0, r3
 8004456:	f000 fc51 	bl	8004cfc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800445a:	6978      	ldr	r0, [r7, #20]
 800445c:	f7ff fefd 	bl	800425a <prvUnlockQueue>
	}
 8004460:	bf00      	nop
 8004462:	3718      	adds	r7, #24
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004468:	b580      	push	{r7, lr}
 800446a:	b08e      	sub	sp, #56	@ 0x38
 800446c:	af04      	add	r7, sp, #16
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
 8004474:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004476:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10b      	bne.n	8004494 <xTaskCreateStatic+0x2c>
	__asm volatile
 800447c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004480:	f383 8811 	msr	BASEPRI, r3
 8004484:	f3bf 8f6f 	isb	sy
 8004488:	f3bf 8f4f 	dsb	sy
 800448c:	623b      	str	r3, [r7, #32]
}
 800448e:	bf00      	nop
 8004490:	bf00      	nop
 8004492:	e7fd      	b.n	8004490 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10b      	bne.n	80044b2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800449a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800449e:	f383 8811 	msr	BASEPRI, r3
 80044a2:	f3bf 8f6f 	isb	sy
 80044a6:	f3bf 8f4f 	dsb	sy
 80044aa:	61fb      	str	r3, [r7, #28]
}
 80044ac:	bf00      	nop
 80044ae:	bf00      	nop
 80044b0:	e7fd      	b.n	80044ae <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80044b2:	235c      	movs	r3, #92	@ 0x5c
 80044b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	2b5c      	cmp	r3, #92	@ 0x5c
 80044ba:	d00b      	beq.n	80044d4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80044bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044c0:	f383 8811 	msr	BASEPRI, r3
 80044c4:	f3bf 8f6f 	isb	sy
 80044c8:	f3bf 8f4f 	dsb	sy
 80044cc:	61bb      	str	r3, [r7, #24]
}
 80044ce:	bf00      	nop
 80044d0:	bf00      	nop
 80044d2:	e7fd      	b.n	80044d0 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80044d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d01e      	beq.n	8004518 <xTaskCreateStatic+0xb0>
 80044da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d01b      	beq.n	8004518 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80044e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044e2:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80044e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80044e8:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80044ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ec:	2202      	movs	r2, #2
 80044ee:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80044f2:	2300      	movs	r3, #0
 80044f4:	9303      	str	r3, [sp, #12]
 80044f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f8:	9302      	str	r3, [sp, #8]
 80044fa:	f107 0314 	add.w	r3, r7, #20
 80044fe:	9301      	str	r3, [sp, #4]
 8004500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	68b9      	ldr	r1, [r7, #8]
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f000 f850 	bl	80045b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004510:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004512:	f000 f8d5 	bl	80046c0 <prvAddNewTaskToReadyList>
 8004516:	e001      	b.n	800451c <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8004518:	2300      	movs	r3, #0
 800451a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800451c:	697b      	ldr	r3, [r7, #20]
	}
 800451e:	4618      	mov	r0, r3
 8004520:	3728      	adds	r7, #40	@ 0x28
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004526:	b580      	push	{r7, lr}
 8004528:	b08c      	sub	sp, #48	@ 0x30
 800452a:	af04      	add	r7, sp, #16
 800452c:	60f8      	str	r0, [r7, #12]
 800452e:	60b9      	str	r1, [r7, #8]
 8004530:	603b      	str	r3, [r7, #0]
 8004532:	4613      	mov	r3, r2
 8004534:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004536:	88fb      	ldrh	r3, [r7, #6]
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	4618      	mov	r0, r3
 800453c:	f001 fee8 	bl	8006310 <pvPortMalloc>
 8004540:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00e      	beq.n	8004566 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004548:	205c      	movs	r0, #92	@ 0x5c
 800454a:	f001 fee1 	bl	8006310 <pvPortMalloc>
 800454e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d003      	beq.n	800455e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	697a      	ldr	r2, [r7, #20]
 800455a:	631a      	str	r2, [r3, #48]	@ 0x30
 800455c:	e005      	b.n	800456a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800455e:	6978      	ldr	r0, [r7, #20]
 8004560:	f001 ff9e 	bl	80064a0 <vPortFree>
 8004564:	e001      	b.n	800456a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004566:	2300      	movs	r3, #0
 8004568:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d017      	beq.n	80045a0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004578:	88fa      	ldrh	r2, [r7, #6]
 800457a:	2300      	movs	r3, #0
 800457c:	9303      	str	r3, [sp, #12]
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	9302      	str	r3, [sp, #8]
 8004582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004584:	9301      	str	r3, [sp, #4]
 8004586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004588:	9300      	str	r3, [sp, #0]
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	68b9      	ldr	r1, [r7, #8]
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f000 f80e 	bl	80045b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004594:	69f8      	ldr	r0, [r7, #28]
 8004596:	f000 f893 	bl	80046c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800459a:	2301      	movs	r3, #1
 800459c:	61bb      	str	r3, [r7, #24]
 800459e:	e002      	b.n	80045a6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80045a0:	f04f 33ff 	mov.w	r3, #4294967295
 80045a4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80045a6:	69bb      	ldr	r3, [r7, #24]
	}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3720      	adds	r7, #32
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b088      	sub	sp, #32
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
 80045bc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80045be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045c0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	461a      	mov	r2, r3
 80045c8:	21a5      	movs	r1, #165	@ 0xa5
 80045ca:	f003 fd29 	bl	8008020 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80045ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80045d8:	3b01      	subs	r3, #1
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4413      	add	r3, r2
 80045de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	f023 0307 	bic.w	r3, r3, #7
 80045e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	f003 0307 	and.w	r3, r3, #7
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00b      	beq.n	800460a <prvInitialiseNewTask+0x5a>
	__asm volatile
 80045f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045f6:	f383 8811 	msr	BASEPRI, r3
 80045fa:	f3bf 8f6f 	isb	sy
 80045fe:	f3bf 8f4f 	dsb	sy
 8004602:	617b      	str	r3, [r7, #20]
}
 8004604:	bf00      	nop
 8004606:	bf00      	nop
 8004608:	e7fd      	b.n	8004606 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800460a:	2300      	movs	r3, #0
 800460c:	61fb      	str	r3, [r7, #28]
 800460e:	e012      	b.n	8004636 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004610:	68ba      	ldr	r2, [r7, #8]
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	4413      	add	r3, r2
 8004616:	7819      	ldrb	r1, [r3, #0]
 8004618:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	4413      	add	r3, r2
 800461e:	3334      	adds	r3, #52	@ 0x34
 8004620:	460a      	mov	r2, r1
 8004622:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	4413      	add	r3, r2
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d006      	beq.n	800463e <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	3301      	adds	r3, #1
 8004634:	61fb      	str	r3, [r7, #28]
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	2b0f      	cmp	r3, #15
 800463a:	d9e9      	bls.n	8004610 <prvInitialiseNewTask+0x60>
 800463c:	e000      	b.n	8004640 <prvInitialiseNewTask+0x90>
		{
			break;
 800463e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004642:	2200      	movs	r2, #0
 8004644:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800464a:	2b37      	cmp	r3, #55	@ 0x37
 800464c:	d901      	bls.n	8004652 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800464e:	2337      	movs	r3, #55	@ 0x37
 8004650:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004654:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004656:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800465a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800465c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800465e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004660:	2200      	movs	r2, #0
 8004662:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004666:	3304      	adds	r3, #4
 8004668:	4618      	mov	r0, r3
 800466a:	f7fe ff54 	bl	8003516 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800466e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004670:	3318      	adds	r3, #24
 8004672:	4618      	mov	r0, r3
 8004674:	f7fe ff4f 	bl	8003516 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800467a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800467c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800467e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004680:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004686:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800468a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800468c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800468e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004690:	2200      	movs	r2, #0
 8004692:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004696:	2200      	movs	r2, #0
 8004698:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800469c:	683a      	ldr	r2, [r7, #0]
 800469e:	68f9      	ldr	r1, [r7, #12]
 80046a0:	69b8      	ldr	r0, [r7, #24]
 80046a2:	f001 fc43 	bl	8005f2c <pxPortInitialiseStack>
 80046a6:	4602      	mov	r2, r0
 80046a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046aa:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80046ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d002      	beq.n	80046b8 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80046b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046b8:	bf00      	nop
 80046ba:	3720      	adds	r7, #32
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80046c8:	f001 fd20 	bl	800610c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80046cc:	4b2d      	ldr	r3, [pc, #180]	@ (8004784 <prvAddNewTaskToReadyList+0xc4>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	3301      	adds	r3, #1
 80046d2:	4a2c      	ldr	r2, [pc, #176]	@ (8004784 <prvAddNewTaskToReadyList+0xc4>)
 80046d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80046d6:	4b2c      	ldr	r3, [pc, #176]	@ (8004788 <prvAddNewTaskToReadyList+0xc8>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d109      	bne.n	80046f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80046de:	4a2a      	ldr	r2, [pc, #168]	@ (8004788 <prvAddNewTaskToReadyList+0xc8>)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80046e4:	4b27      	ldr	r3, [pc, #156]	@ (8004784 <prvAddNewTaskToReadyList+0xc4>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d110      	bne.n	800470e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80046ec:	f000 fc34 	bl	8004f58 <prvInitialiseTaskLists>
 80046f0:	e00d      	b.n	800470e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80046f2:	4b26      	ldr	r3, [pc, #152]	@ (800478c <prvAddNewTaskToReadyList+0xcc>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d109      	bne.n	800470e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80046fa:	4b23      	ldr	r3, [pc, #140]	@ (8004788 <prvAddNewTaskToReadyList+0xc8>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004704:	429a      	cmp	r2, r3
 8004706:	d802      	bhi.n	800470e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004708:	4a1f      	ldr	r2, [pc, #124]	@ (8004788 <prvAddNewTaskToReadyList+0xc8>)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800470e:	4b20      	ldr	r3, [pc, #128]	@ (8004790 <prvAddNewTaskToReadyList+0xd0>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	3301      	adds	r3, #1
 8004714:	4a1e      	ldr	r2, [pc, #120]	@ (8004790 <prvAddNewTaskToReadyList+0xd0>)
 8004716:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004718:	4b1d      	ldr	r3, [pc, #116]	@ (8004790 <prvAddNewTaskToReadyList+0xd0>)
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004724:	4b1b      	ldr	r3, [pc, #108]	@ (8004794 <prvAddNewTaskToReadyList+0xd4>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	429a      	cmp	r2, r3
 800472a:	d903      	bls.n	8004734 <prvAddNewTaskToReadyList+0x74>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004730:	4a18      	ldr	r2, [pc, #96]	@ (8004794 <prvAddNewTaskToReadyList+0xd4>)
 8004732:	6013      	str	r3, [r2, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004738:	4613      	mov	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4413      	add	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4a15      	ldr	r2, [pc, #84]	@ (8004798 <prvAddNewTaskToReadyList+0xd8>)
 8004742:	441a      	add	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	3304      	adds	r3, #4
 8004748:	4619      	mov	r1, r3
 800474a:	4610      	mov	r0, r2
 800474c:	f7fe feef 	bl	800352e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004750:	f001 fd0c 	bl	800616c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004754:	4b0d      	ldr	r3, [pc, #52]	@ (800478c <prvAddNewTaskToReadyList+0xcc>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00e      	beq.n	800477a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800475c:	4b0a      	ldr	r3, [pc, #40]	@ (8004788 <prvAddNewTaskToReadyList+0xc8>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004766:	429a      	cmp	r2, r3
 8004768:	d207      	bcs.n	800477a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800476a:	4b0c      	ldr	r3, [pc, #48]	@ (800479c <prvAddNewTaskToReadyList+0xdc>)
 800476c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	f3bf 8f4f 	dsb	sy
 8004776:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800477a:	bf00      	nop
 800477c:	3708      	adds	r7, #8
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	20000bac 	.word	0x20000bac
 8004788:	200006d8 	.word	0x200006d8
 800478c:	20000bb8 	.word	0x20000bb8
 8004790:	20000bc8 	.word	0x20000bc8
 8004794:	20000bb4 	.word	0x20000bb4
 8004798:	200006dc 	.word	0x200006dc
 800479c:	e000ed04 	.word	0xe000ed04

080047a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80047a8:	2300      	movs	r3, #0
 80047aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d018      	beq.n	80047e4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80047b2:	4b14      	ldr	r3, [pc, #80]	@ (8004804 <vTaskDelay+0x64>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00b      	beq.n	80047d2 <vTaskDelay+0x32>
	__asm volatile
 80047ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047be:	f383 8811 	msr	BASEPRI, r3
 80047c2:	f3bf 8f6f 	isb	sy
 80047c6:	f3bf 8f4f 	dsb	sy
 80047ca:	60bb      	str	r3, [r7, #8]
}
 80047cc:	bf00      	nop
 80047ce:	bf00      	nop
 80047d0:	e7fd      	b.n	80047ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80047d2:	f000 f883 	bl	80048dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80047d6:	2100      	movs	r1, #0
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 ffdf 	bl	800579c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80047de:	f000 f88b 	bl	80048f8 <xTaskResumeAll>
 80047e2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d107      	bne.n	80047fa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80047ea:	4b07      	ldr	r3, [pc, #28]	@ (8004808 <vTaskDelay+0x68>)
 80047ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047f0:	601a      	str	r2, [r3, #0]
 80047f2:	f3bf 8f4f 	dsb	sy
 80047f6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80047fa:	bf00      	nop
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	20000bd4 	.word	0x20000bd4
 8004808:	e000ed04 	.word	0xe000ed04

0800480c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b08a      	sub	sp, #40	@ 0x28
 8004810:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004812:	2300      	movs	r3, #0
 8004814:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004816:	2300      	movs	r3, #0
 8004818:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800481a:	463a      	mov	r2, r7
 800481c:	1d39      	adds	r1, r7, #4
 800481e:	f107 0308 	add.w	r3, r7, #8
 8004822:	4618      	mov	r0, r3
 8004824:	f7fe fe28 	bl	8003478 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004828:	6839      	ldr	r1, [r7, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68ba      	ldr	r2, [r7, #8]
 800482e:	9202      	str	r2, [sp, #8]
 8004830:	9301      	str	r3, [sp, #4]
 8004832:	2300      	movs	r3, #0
 8004834:	9300      	str	r3, [sp, #0]
 8004836:	2300      	movs	r3, #0
 8004838:	460a      	mov	r2, r1
 800483a:	4922      	ldr	r1, [pc, #136]	@ (80048c4 <vTaskStartScheduler+0xb8>)
 800483c:	4822      	ldr	r0, [pc, #136]	@ (80048c8 <vTaskStartScheduler+0xbc>)
 800483e:	f7ff fe13 	bl	8004468 <xTaskCreateStatic>
 8004842:	4603      	mov	r3, r0
 8004844:	4a21      	ldr	r2, [pc, #132]	@ (80048cc <vTaskStartScheduler+0xc0>)
 8004846:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004848:	4b20      	ldr	r3, [pc, #128]	@ (80048cc <vTaskStartScheduler+0xc0>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d002      	beq.n	8004856 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004850:	2301      	movs	r3, #1
 8004852:	617b      	str	r3, [r7, #20]
 8004854:	e001      	b.n	800485a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004856:	2300      	movs	r3, #0
 8004858:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d102      	bne.n	8004866 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004860:	f000 fff0 	bl	8005844 <xTimerCreateTimerTask>
 8004864:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d116      	bne.n	800489a <vTaskStartScheduler+0x8e>
	__asm volatile
 800486c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004870:	f383 8811 	msr	BASEPRI, r3
 8004874:	f3bf 8f6f 	isb	sy
 8004878:	f3bf 8f4f 	dsb	sy
 800487c:	613b      	str	r3, [r7, #16]
}
 800487e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004880:	4b13      	ldr	r3, [pc, #76]	@ (80048d0 <vTaskStartScheduler+0xc4>)
 8004882:	f04f 32ff 	mov.w	r2, #4294967295
 8004886:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004888:	4b12      	ldr	r3, [pc, #72]	@ (80048d4 <vTaskStartScheduler+0xc8>)
 800488a:	2201      	movs	r2, #1
 800488c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800488e:	4b12      	ldr	r3, [pc, #72]	@ (80048d8 <vTaskStartScheduler+0xcc>)
 8004890:	2200      	movs	r2, #0
 8004892:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004894:	f001 fbc8 	bl	8006028 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004898:	e00f      	b.n	80048ba <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a0:	d10b      	bne.n	80048ba <vTaskStartScheduler+0xae>
	__asm volatile
 80048a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048a6:	f383 8811 	msr	BASEPRI, r3
 80048aa:	f3bf 8f6f 	isb	sy
 80048ae:	f3bf 8f4f 	dsb	sy
 80048b2:	60fb      	str	r3, [r7, #12]
}
 80048b4:	bf00      	nop
 80048b6:	bf00      	nop
 80048b8:	e7fd      	b.n	80048b6 <vTaskStartScheduler+0xaa>
}
 80048ba:	bf00      	nop
 80048bc:	3718      	adds	r7, #24
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	080080d0 	.word	0x080080d0
 80048c8:	08004f29 	.word	0x08004f29
 80048cc:	20000bd0 	.word	0x20000bd0
 80048d0:	20000bcc 	.word	0x20000bcc
 80048d4:	20000bb8 	.word	0x20000bb8
 80048d8:	20000bb0 	.word	0x20000bb0

080048dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80048dc:	b480      	push	{r7}
 80048de:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80048e0:	4b04      	ldr	r3, [pc, #16]	@ (80048f4 <vTaskSuspendAll+0x18>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	3301      	adds	r3, #1
 80048e6:	4a03      	ldr	r2, [pc, #12]	@ (80048f4 <vTaskSuspendAll+0x18>)
 80048e8:	6013      	str	r3, [r2, #0]
}
 80048ea:	bf00      	nop
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bc80      	pop	{r7}
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	20000bd4 	.word	0x20000bd4

080048f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80048fe:	2300      	movs	r3, #0
 8004900:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004902:	2300      	movs	r3, #0
 8004904:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004906:	4b42      	ldr	r3, [pc, #264]	@ (8004a10 <xTaskResumeAll+0x118>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10b      	bne.n	8004926 <xTaskResumeAll+0x2e>
	__asm volatile
 800490e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004912:	f383 8811 	msr	BASEPRI, r3
 8004916:	f3bf 8f6f 	isb	sy
 800491a:	f3bf 8f4f 	dsb	sy
 800491e:	603b      	str	r3, [r7, #0]
}
 8004920:	bf00      	nop
 8004922:	bf00      	nop
 8004924:	e7fd      	b.n	8004922 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004926:	f001 fbf1 	bl	800610c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800492a:	4b39      	ldr	r3, [pc, #228]	@ (8004a10 <xTaskResumeAll+0x118>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	3b01      	subs	r3, #1
 8004930:	4a37      	ldr	r2, [pc, #220]	@ (8004a10 <xTaskResumeAll+0x118>)
 8004932:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004934:	4b36      	ldr	r3, [pc, #216]	@ (8004a10 <xTaskResumeAll+0x118>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d162      	bne.n	8004a02 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800493c:	4b35      	ldr	r3, [pc, #212]	@ (8004a14 <xTaskResumeAll+0x11c>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d05e      	beq.n	8004a02 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004944:	e02f      	b.n	80049a6 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004946:	4b34      	ldr	r3, [pc, #208]	@ (8004a18 <xTaskResumeAll+0x120>)
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	3318      	adds	r3, #24
 8004952:	4618      	mov	r0, r3
 8004954:	f7fe fe46 	bl	80035e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	3304      	adds	r3, #4
 800495c:	4618      	mov	r0, r3
 800495e:	f7fe fe41 	bl	80035e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004966:	4b2d      	ldr	r3, [pc, #180]	@ (8004a1c <xTaskResumeAll+0x124>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	429a      	cmp	r2, r3
 800496c:	d903      	bls.n	8004976 <xTaskResumeAll+0x7e>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004972:	4a2a      	ldr	r2, [pc, #168]	@ (8004a1c <xTaskResumeAll+0x124>)
 8004974:	6013      	str	r3, [r2, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800497a:	4613      	mov	r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	4413      	add	r3, r2
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	4a27      	ldr	r2, [pc, #156]	@ (8004a20 <xTaskResumeAll+0x128>)
 8004984:	441a      	add	r2, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	3304      	adds	r3, #4
 800498a:	4619      	mov	r1, r3
 800498c:	4610      	mov	r0, r2
 800498e:	f7fe fdce 	bl	800352e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004996:	4b23      	ldr	r3, [pc, #140]	@ (8004a24 <xTaskResumeAll+0x12c>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800499c:	429a      	cmp	r2, r3
 800499e:	d302      	bcc.n	80049a6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80049a0:	4b21      	ldr	r3, [pc, #132]	@ (8004a28 <xTaskResumeAll+0x130>)
 80049a2:	2201      	movs	r2, #1
 80049a4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80049a6:	4b1c      	ldr	r3, [pc, #112]	@ (8004a18 <xTaskResumeAll+0x120>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1cb      	bne.n	8004946 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d001      	beq.n	80049b8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80049b4:	f000 fb6e 	bl	8005094 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80049b8:	4b1c      	ldr	r3, [pc, #112]	@ (8004a2c <xTaskResumeAll+0x134>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d010      	beq.n	80049e6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80049c4:	f000 f856 	bl	8004a74 <xTaskIncrementTick>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d002      	beq.n	80049d4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80049ce:	4b16      	ldr	r3, [pc, #88]	@ (8004a28 <xTaskResumeAll+0x130>)
 80049d0:	2201      	movs	r2, #1
 80049d2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	3b01      	subs	r3, #1
 80049d8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1f1      	bne.n	80049c4 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80049e0:	4b12      	ldr	r3, [pc, #72]	@ (8004a2c <xTaskResumeAll+0x134>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80049e6:	4b10      	ldr	r3, [pc, #64]	@ (8004a28 <xTaskResumeAll+0x130>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d009      	beq.n	8004a02 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80049ee:	2301      	movs	r3, #1
 80049f0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80049f2:	4b0f      	ldr	r3, [pc, #60]	@ (8004a30 <xTaskResumeAll+0x138>)
 80049f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049f8:	601a      	str	r2, [r3, #0]
 80049fa:	f3bf 8f4f 	dsb	sy
 80049fe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a02:	f001 fbb3 	bl	800616c <vPortExitCritical>

	return xAlreadyYielded;
 8004a06:	68bb      	ldr	r3, [r7, #8]
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3710      	adds	r7, #16
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	20000bd4 	.word	0x20000bd4
 8004a14:	20000bac 	.word	0x20000bac
 8004a18:	20000b6c 	.word	0x20000b6c
 8004a1c:	20000bb4 	.word	0x20000bb4
 8004a20:	200006dc 	.word	0x200006dc
 8004a24:	200006d8 	.word	0x200006d8
 8004a28:	20000bc0 	.word	0x20000bc0
 8004a2c:	20000bbc 	.word	0x20000bbc
 8004a30:	e000ed04 	.word	0xe000ed04

08004a34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004a3a:	4b04      	ldr	r3, [pc, #16]	@ (8004a4c <xTaskGetTickCount+0x18>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004a40:	687b      	ldr	r3, [r7, #4]
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bc80      	pop	{r7}
 8004a4a:	4770      	bx	lr
 8004a4c:	20000bb0 	.word	0x20000bb0

08004a50 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a56:	f001 fc1b 	bl	8006290 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8004a5e:	4b04      	ldr	r3, [pc, #16]	@ (8004a70 <xTaskGetTickCountFromISR+0x20>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004a64:	683b      	ldr	r3, [r7, #0]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3708      	adds	r7, #8
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	20000bb0 	.word	0x20000bb0

08004a74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b086      	sub	sp, #24
 8004a78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a7e:	4b52      	ldr	r3, [pc, #328]	@ (8004bc8 <xTaskIncrementTick+0x154>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f040 808f 	bne.w	8004ba6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004a88:	4b50      	ldr	r3, [pc, #320]	@ (8004bcc <xTaskIncrementTick+0x158>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004a90:	4a4e      	ldr	r2, [pc, #312]	@ (8004bcc <xTaskIncrementTick+0x158>)
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d121      	bne.n	8004ae0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004a9c:	4b4c      	ldr	r3, [pc, #304]	@ (8004bd0 <xTaskIncrementTick+0x15c>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00b      	beq.n	8004abe <xTaskIncrementTick+0x4a>
	__asm volatile
 8004aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aaa:	f383 8811 	msr	BASEPRI, r3
 8004aae:	f3bf 8f6f 	isb	sy
 8004ab2:	f3bf 8f4f 	dsb	sy
 8004ab6:	603b      	str	r3, [r7, #0]
}
 8004ab8:	bf00      	nop
 8004aba:	bf00      	nop
 8004abc:	e7fd      	b.n	8004aba <xTaskIncrementTick+0x46>
 8004abe:	4b44      	ldr	r3, [pc, #272]	@ (8004bd0 <xTaskIncrementTick+0x15c>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	60fb      	str	r3, [r7, #12]
 8004ac4:	4b43      	ldr	r3, [pc, #268]	@ (8004bd4 <xTaskIncrementTick+0x160>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a41      	ldr	r2, [pc, #260]	@ (8004bd0 <xTaskIncrementTick+0x15c>)
 8004aca:	6013      	str	r3, [r2, #0]
 8004acc:	4a41      	ldr	r2, [pc, #260]	@ (8004bd4 <xTaskIncrementTick+0x160>)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6013      	str	r3, [r2, #0]
 8004ad2:	4b41      	ldr	r3, [pc, #260]	@ (8004bd8 <xTaskIncrementTick+0x164>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	4a3f      	ldr	r2, [pc, #252]	@ (8004bd8 <xTaskIncrementTick+0x164>)
 8004ada:	6013      	str	r3, [r2, #0]
 8004adc:	f000 fada 	bl	8005094 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004ae0:	4b3e      	ldr	r3, [pc, #248]	@ (8004bdc <xTaskIncrementTick+0x168>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d34e      	bcc.n	8004b88 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004aea:	4b39      	ldr	r3, [pc, #228]	@ (8004bd0 <xTaskIncrementTick+0x15c>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d101      	bne.n	8004af8 <xTaskIncrementTick+0x84>
 8004af4:	2301      	movs	r3, #1
 8004af6:	e000      	b.n	8004afa <xTaskIncrementTick+0x86>
 8004af8:	2300      	movs	r3, #0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d004      	beq.n	8004b08 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004afe:	4b37      	ldr	r3, [pc, #220]	@ (8004bdc <xTaskIncrementTick+0x168>)
 8004b00:	f04f 32ff 	mov.w	r2, #4294967295
 8004b04:	601a      	str	r2, [r3, #0]
					break;
 8004b06:	e03f      	b.n	8004b88 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004b08:	4b31      	ldr	r3, [pc, #196]	@ (8004bd0 <xTaskIncrementTick+0x15c>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d203      	bcs.n	8004b28 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004b20:	4a2e      	ldr	r2, [pc, #184]	@ (8004bdc <xTaskIncrementTick+0x168>)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6013      	str	r3, [r2, #0]
						break;
 8004b26:	e02f      	b.n	8004b88 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	3304      	adds	r3, #4
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7fe fd59 	bl	80035e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d004      	beq.n	8004b44 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	3318      	adds	r3, #24
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7fe fd50 	bl	80035e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b48:	4b25      	ldr	r3, [pc, #148]	@ (8004be0 <xTaskIncrementTick+0x16c>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d903      	bls.n	8004b58 <xTaskIncrementTick+0xe4>
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b54:	4a22      	ldr	r2, [pc, #136]	@ (8004be0 <xTaskIncrementTick+0x16c>)
 8004b56:	6013      	str	r3, [r2, #0]
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4a1f      	ldr	r2, [pc, #124]	@ (8004be4 <xTaskIncrementTick+0x170>)
 8004b66:	441a      	add	r2, r3
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	3304      	adds	r3, #4
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	4610      	mov	r0, r2
 8004b70:	f7fe fcdd 	bl	800352e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b78:	4b1b      	ldr	r3, [pc, #108]	@ (8004be8 <xTaskIncrementTick+0x174>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d3b3      	bcc.n	8004aea <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004b82:	2301      	movs	r3, #1
 8004b84:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b86:	e7b0      	b.n	8004aea <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004b88:	4b17      	ldr	r3, [pc, #92]	@ (8004be8 <xTaskIncrementTick+0x174>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b8e:	4915      	ldr	r1, [pc, #84]	@ (8004be4 <xTaskIncrementTick+0x170>)
 8004b90:	4613      	mov	r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	4413      	add	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	440b      	add	r3, r1
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d907      	bls.n	8004bb0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	617b      	str	r3, [r7, #20]
 8004ba4:	e004      	b.n	8004bb0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004ba6:	4b11      	ldr	r3, [pc, #68]	@ (8004bec <xTaskIncrementTick+0x178>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	3301      	adds	r3, #1
 8004bac:	4a0f      	ldr	r2, [pc, #60]	@ (8004bec <xTaskIncrementTick+0x178>)
 8004bae:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8004bf0 <xTaskIncrementTick+0x17c>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d001      	beq.n	8004bbc <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004bbc:	697b      	ldr	r3, [r7, #20]
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3718      	adds	r7, #24
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	20000bd4 	.word	0x20000bd4
 8004bcc:	20000bb0 	.word	0x20000bb0
 8004bd0:	20000b64 	.word	0x20000b64
 8004bd4:	20000b68 	.word	0x20000b68
 8004bd8:	20000bc4 	.word	0x20000bc4
 8004bdc:	20000bcc 	.word	0x20000bcc
 8004be0:	20000bb4 	.word	0x20000bb4
 8004be4:	200006dc 	.word	0x200006dc
 8004be8:	200006d8 	.word	0x200006d8
 8004bec:	20000bbc 	.word	0x20000bbc
 8004bf0:	20000bc0 	.word	0x20000bc0

08004bf4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004bfa:	4b28      	ldr	r3, [pc, #160]	@ (8004c9c <vTaskSwitchContext+0xa8>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d003      	beq.n	8004c0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004c02:	4b27      	ldr	r3, [pc, #156]	@ (8004ca0 <vTaskSwitchContext+0xac>)
 8004c04:	2201      	movs	r2, #1
 8004c06:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004c08:	e042      	b.n	8004c90 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8004c0a:	4b25      	ldr	r3, [pc, #148]	@ (8004ca0 <vTaskSwitchContext+0xac>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004c10:	4b24      	ldr	r3, [pc, #144]	@ (8004ca4 <vTaskSwitchContext+0xb0>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	60fb      	str	r3, [r7, #12]
 8004c16:	e011      	b.n	8004c3c <vTaskSwitchContext+0x48>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10b      	bne.n	8004c36 <vTaskSwitchContext+0x42>
	__asm volatile
 8004c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c22:	f383 8811 	msr	BASEPRI, r3
 8004c26:	f3bf 8f6f 	isb	sy
 8004c2a:	f3bf 8f4f 	dsb	sy
 8004c2e:	607b      	str	r3, [r7, #4]
}
 8004c30:	bf00      	nop
 8004c32:	bf00      	nop
 8004c34:	e7fd      	b.n	8004c32 <vTaskSwitchContext+0x3e>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	60fb      	str	r3, [r7, #12]
 8004c3c:	491a      	ldr	r1, [pc, #104]	@ (8004ca8 <vTaskSwitchContext+0xb4>)
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	4613      	mov	r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	4413      	add	r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	440b      	add	r3, r1
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d0e3      	beq.n	8004c18 <vTaskSwitchContext+0x24>
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	4613      	mov	r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	4413      	add	r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	4a13      	ldr	r2, [pc, #76]	@ (8004ca8 <vTaskSwitchContext+0xb4>)
 8004c5c:	4413      	add	r3, r2
 8004c5e:	60bb      	str	r3, [r7, #8]
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	685a      	ldr	r2, [r3, #4]
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	605a      	str	r2, [r3, #4]
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	685a      	ldr	r2, [r3, #4]
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	3308      	adds	r3, #8
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d104      	bne.n	8004c80 <vTaskSwitchContext+0x8c>
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	685a      	ldr	r2, [r3, #4]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	605a      	str	r2, [r3, #4]
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	4a09      	ldr	r2, [pc, #36]	@ (8004cac <vTaskSwitchContext+0xb8>)
 8004c88:	6013      	str	r3, [r2, #0]
 8004c8a:	4a06      	ldr	r2, [pc, #24]	@ (8004ca4 <vTaskSwitchContext+0xb0>)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6013      	str	r3, [r2, #0]
}
 8004c90:	bf00      	nop
 8004c92:	3714      	adds	r7, #20
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bc80      	pop	{r7}
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	20000bd4 	.word	0x20000bd4
 8004ca0:	20000bc0 	.word	0x20000bc0
 8004ca4:	20000bb4 	.word	0x20000bb4
 8004ca8:	200006dc 	.word	0x200006dc
 8004cac:	200006d8 	.word	0x200006d8

08004cb0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10b      	bne.n	8004cd8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cc4:	f383 8811 	msr	BASEPRI, r3
 8004cc8:	f3bf 8f6f 	isb	sy
 8004ccc:	f3bf 8f4f 	dsb	sy
 8004cd0:	60fb      	str	r3, [r7, #12]
}
 8004cd2:	bf00      	nop
 8004cd4:	bf00      	nop
 8004cd6:	e7fd      	b.n	8004cd4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004cd8:	4b07      	ldr	r3, [pc, #28]	@ (8004cf8 <vTaskPlaceOnEventList+0x48>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	3318      	adds	r3, #24
 8004cde:	4619      	mov	r1, r3
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f7fe fc47 	bl	8003574 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004ce6:	2101      	movs	r1, #1
 8004ce8:	6838      	ldr	r0, [r7, #0]
 8004cea:	f000 fd57 	bl	800579c <prvAddCurrentTaskToDelayedList>
}
 8004cee:	bf00      	nop
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	200006d8 	.word	0x200006d8

08004cfc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b086      	sub	sp, #24
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10b      	bne.n	8004d26 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d12:	f383 8811 	msr	BASEPRI, r3
 8004d16:	f3bf 8f6f 	isb	sy
 8004d1a:	f3bf 8f4f 	dsb	sy
 8004d1e:	617b      	str	r3, [r7, #20]
}
 8004d20:	bf00      	nop
 8004d22:	bf00      	nop
 8004d24:	e7fd      	b.n	8004d22 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004d26:	4b0a      	ldr	r3, [pc, #40]	@ (8004d50 <vTaskPlaceOnEventListRestricted+0x54>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	3318      	adds	r3, #24
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	68f8      	ldr	r0, [r7, #12]
 8004d30:	f7fe fbfd 	bl	800352e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d002      	beq.n	8004d40 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d3e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004d40:	6879      	ldr	r1, [r7, #4]
 8004d42:	68b8      	ldr	r0, [r7, #8]
 8004d44:	f000 fd2a 	bl	800579c <prvAddCurrentTaskToDelayedList>
	}
 8004d48:	bf00      	nop
 8004d4a:	3718      	adds	r7, #24
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	200006d8 	.word	0x200006d8

08004d54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b086      	sub	sp, #24
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10b      	bne.n	8004d82 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d6e:	f383 8811 	msr	BASEPRI, r3
 8004d72:	f3bf 8f6f 	isb	sy
 8004d76:	f3bf 8f4f 	dsb	sy
 8004d7a:	60fb      	str	r3, [r7, #12]
}
 8004d7c:	bf00      	nop
 8004d7e:	bf00      	nop
 8004d80:	e7fd      	b.n	8004d7e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	3318      	adds	r3, #24
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7fe fc2c 	bl	80035e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d8c:	4b1d      	ldr	r3, [pc, #116]	@ (8004e04 <xTaskRemoveFromEventList+0xb0>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d11d      	bne.n	8004dd0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	3304      	adds	r3, #4
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7fe fc23 	bl	80035e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004da2:	4b19      	ldr	r3, [pc, #100]	@ (8004e08 <xTaskRemoveFromEventList+0xb4>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d903      	bls.n	8004db2 <xTaskRemoveFromEventList+0x5e>
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dae:	4a16      	ldr	r2, [pc, #88]	@ (8004e08 <xTaskRemoveFromEventList+0xb4>)
 8004db0:	6013      	str	r3, [r2, #0]
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004db6:	4613      	mov	r3, r2
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	4413      	add	r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	4a13      	ldr	r2, [pc, #76]	@ (8004e0c <xTaskRemoveFromEventList+0xb8>)
 8004dc0:	441a      	add	r2, r3
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	3304      	adds	r3, #4
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	4610      	mov	r0, r2
 8004dca:	f7fe fbb0 	bl	800352e <vListInsertEnd>
 8004dce:	e005      	b.n	8004ddc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	3318      	adds	r3, #24
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	480e      	ldr	r0, [pc, #56]	@ (8004e10 <xTaskRemoveFromEventList+0xbc>)
 8004dd8:	f7fe fba9 	bl	800352e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004de0:	4b0c      	ldr	r3, [pc, #48]	@ (8004e14 <xTaskRemoveFromEventList+0xc0>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d905      	bls.n	8004df6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004dea:	2301      	movs	r3, #1
 8004dec:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004dee:	4b0a      	ldr	r3, [pc, #40]	@ (8004e18 <xTaskRemoveFromEventList+0xc4>)
 8004df0:	2201      	movs	r2, #1
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	e001      	b.n	8004dfa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004df6:	2300      	movs	r3, #0
 8004df8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004dfa:	697b      	ldr	r3, [r7, #20]
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3718      	adds	r7, #24
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	20000bd4 	.word	0x20000bd4
 8004e08:	20000bb4 	.word	0x20000bb4
 8004e0c:	200006dc 	.word	0x200006dc
 8004e10:	20000b6c 	.word	0x20000b6c
 8004e14:	200006d8 	.word	0x200006d8
 8004e18:	20000bc0 	.word	0x20000bc0

08004e1c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004e24:	4b06      	ldr	r3, [pc, #24]	@ (8004e40 <vTaskInternalSetTimeOutState+0x24>)
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004e2c:	4b05      	ldr	r3, [pc, #20]	@ (8004e44 <vTaskInternalSetTimeOutState+0x28>)
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	605a      	str	r2, [r3, #4]
}
 8004e34:	bf00      	nop
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bc80      	pop	{r7}
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	20000bc4 	.word	0x20000bc4
 8004e44:	20000bb0 	.word	0x20000bb0

08004e48 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b088      	sub	sp, #32
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d10b      	bne.n	8004e70 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e5c:	f383 8811 	msr	BASEPRI, r3
 8004e60:	f3bf 8f6f 	isb	sy
 8004e64:	f3bf 8f4f 	dsb	sy
 8004e68:	613b      	str	r3, [r7, #16]
}
 8004e6a:	bf00      	nop
 8004e6c:	bf00      	nop
 8004e6e:	e7fd      	b.n	8004e6c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d10b      	bne.n	8004e8e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e7a:	f383 8811 	msr	BASEPRI, r3
 8004e7e:	f3bf 8f6f 	isb	sy
 8004e82:	f3bf 8f4f 	dsb	sy
 8004e86:	60fb      	str	r3, [r7, #12]
}
 8004e88:	bf00      	nop
 8004e8a:	bf00      	nop
 8004e8c:	e7fd      	b.n	8004e8a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004e8e:	f001 f93d 	bl	800610c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004e92:	4b1d      	ldr	r3, [pc, #116]	@ (8004f08 <xTaskCheckForTimeOut+0xc0>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	69ba      	ldr	r2, [r7, #24]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eaa:	d102      	bne.n	8004eb2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004eac:	2300      	movs	r3, #0
 8004eae:	61fb      	str	r3, [r7, #28]
 8004eb0:	e023      	b.n	8004efa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	4b15      	ldr	r3, [pc, #84]	@ (8004f0c <xTaskCheckForTimeOut+0xc4>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d007      	beq.n	8004ece <xTaskCheckForTimeOut+0x86>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	69ba      	ldr	r2, [r7, #24]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d302      	bcc.n	8004ece <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	61fb      	str	r3, [r7, #28]
 8004ecc:	e015      	b.n	8004efa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d20b      	bcs.n	8004ef0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	1ad2      	subs	r2, r2, r3
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f7ff ff99 	bl	8004e1c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004eea:	2300      	movs	r3, #0
 8004eec:	61fb      	str	r3, [r7, #28]
 8004eee:	e004      	b.n	8004efa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004efa:	f001 f937 	bl	800616c <vPortExitCritical>

	return xReturn;
 8004efe:	69fb      	ldr	r3, [r7, #28]
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3720      	adds	r7, #32
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	20000bb0 	.word	0x20000bb0
 8004f0c:	20000bc4 	.word	0x20000bc4

08004f10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004f10:	b480      	push	{r7}
 8004f12:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004f14:	4b03      	ldr	r3, [pc, #12]	@ (8004f24 <vTaskMissedYield+0x14>)
 8004f16:	2201      	movs	r2, #1
 8004f18:	601a      	str	r2, [r3, #0]
}
 8004f1a:	bf00      	nop
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bc80      	pop	{r7}
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	20000bc0 	.word	0x20000bc0

08004f28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004f30:	f000 f852 	bl	8004fd8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004f34:	4b06      	ldr	r3, [pc, #24]	@ (8004f50 <prvIdleTask+0x28>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d9f9      	bls.n	8004f30 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004f3c:	4b05      	ldr	r3, [pc, #20]	@ (8004f54 <prvIdleTask+0x2c>)
 8004f3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f42:	601a      	str	r2, [r3, #0]
 8004f44:	f3bf 8f4f 	dsb	sy
 8004f48:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004f4c:	e7f0      	b.n	8004f30 <prvIdleTask+0x8>
 8004f4e:	bf00      	nop
 8004f50:	200006dc 	.word	0x200006dc
 8004f54:	e000ed04 	.word	0xe000ed04

08004f58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f5e:	2300      	movs	r3, #0
 8004f60:	607b      	str	r3, [r7, #4]
 8004f62:	e00c      	b.n	8004f7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	4613      	mov	r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	4413      	add	r3, r2
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	4a12      	ldr	r2, [pc, #72]	@ (8004fb8 <prvInitialiseTaskLists+0x60>)
 8004f70:	4413      	add	r3, r2
 8004f72:	4618      	mov	r0, r3
 8004f74:	f7fe fab0 	bl	80034d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	607b      	str	r3, [r7, #4]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b37      	cmp	r3, #55	@ 0x37
 8004f82:	d9ef      	bls.n	8004f64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004f84:	480d      	ldr	r0, [pc, #52]	@ (8004fbc <prvInitialiseTaskLists+0x64>)
 8004f86:	f7fe faa7 	bl	80034d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004f8a:	480d      	ldr	r0, [pc, #52]	@ (8004fc0 <prvInitialiseTaskLists+0x68>)
 8004f8c:	f7fe faa4 	bl	80034d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004f90:	480c      	ldr	r0, [pc, #48]	@ (8004fc4 <prvInitialiseTaskLists+0x6c>)
 8004f92:	f7fe faa1 	bl	80034d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004f96:	480c      	ldr	r0, [pc, #48]	@ (8004fc8 <prvInitialiseTaskLists+0x70>)
 8004f98:	f7fe fa9e 	bl	80034d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004f9c:	480b      	ldr	r0, [pc, #44]	@ (8004fcc <prvInitialiseTaskLists+0x74>)
 8004f9e:	f7fe fa9b 	bl	80034d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8004fd0 <prvInitialiseTaskLists+0x78>)
 8004fa4:	4a05      	ldr	r2, [pc, #20]	@ (8004fbc <prvInitialiseTaskLists+0x64>)
 8004fa6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8004fd4 <prvInitialiseTaskLists+0x7c>)
 8004faa:	4a05      	ldr	r2, [pc, #20]	@ (8004fc0 <prvInitialiseTaskLists+0x68>)
 8004fac:	601a      	str	r2, [r3, #0]
}
 8004fae:	bf00      	nop
 8004fb0:	3708      	adds	r7, #8
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	200006dc 	.word	0x200006dc
 8004fbc:	20000b3c 	.word	0x20000b3c
 8004fc0:	20000b50 	.word	0x20000b50
 8004fc4:	20000b6c 	.word	0x20000b6c
 8004fc8:	20000b80 	.word	0x20000b80
 8004fcc:	20000b98 	.word	0x20000b98
 8004fd0:	20000b64 	.word	0x20000b64
 8004fd4:	20000b68 	.word	0x20000b68

08004fd8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004fde:	e019      	b.n	8005014 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004fe0:	f001 f894 	bl	800610c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004fe4:	4b10      	ldr	r3, [pc, #64]	@ (8005028 <prvCheckTasksWaitingTermination+0x50>)
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	3304      	adds	r3, #4
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7fe faf7 	bl	80035e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800502c <prvCheckTasksWaitingTermination+0x54>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	4a0b      	ldr	r2, [pc, #44]	@ (800502c <prvCheckTasksWaitingTermination+0x54>)
 8004ffe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005000:	4b0b      	ldr	r3, [pc, #44]	@ (8005030 <prvCheckTasksWaitingTermination+0x58>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	3b01      	subs	r3, #1
 8005006:	4a0a      	ldr	r2, [pc, #40]	@ (8005030 <prvCheckTasksWaitingTermination+0x58>)
 8005008:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800500a:	f001 f8af 	bl	800616c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f810 	bl	8005034 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005014:	4b06      	ldr	r3, [pc, #24]	@ (8005030 <prvCheckTasksWaitingTermination+0x58>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1e1      	bne.n	8004fe0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800501c:	bf00      	nop
 800501e:	bf00      	nop
 8005020:	3708      	adds	r7, #8
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	20000b80 	.word	0x20000b80
 800502c:	20000bac 	.word	0x20000bac
 8005030:	20000b94 	.word	0x20000b94

08005034 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005042:	2b00      	cmp	r3, #0
 8005044:	d108      	bne.n	8005058 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800504a:	4618      	mov	r0, r3
 800504c:	f001 fa28 	bl	80064a0 <vPortFree>
				vPortFree( pxTCB );
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f001 fa25 	bl	80064a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005056:	e019      	b.n	800508c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800505e:	2b01      	cmp	r3, #1
 8005060:	d103      	bne.n	800506a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f001 fa1c 	bl	80064a0 <vPortFree>
	}
 8005068:	e010      	b.n	800508c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005070:	2b02      	cmp	r3, #2
 8005072:	d00b      	beq.n	800508c <prvDeleteTCB+0x58>
	__asm volatile
 8005074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005078:	f383 8811 	msr	BASEPRI, r3
 800507c:	f3bf 8f6f 	isb	sy
 8005080:	f3bf 8f4f 	dsb	sy
 8005084:	60fb      	str	r3, [r7, #12]
}
 8005086:	bf00      	nop
 8005088:	bf00      	nop
 800508a:	e7fd      	b.n	8005088 <prvDeleteTCB+0x54>
	}
 800508c:	bf00      	nop
 800508e:	3710      	adds	r7, #16
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800509a:	4b0e      	ldr	r3, [pc, #56]	@ (80050d4 <prvResetNextTaskUnblockTime+0x40>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d101      	bne.n	80050a8 <prvResetNextTaskUnblockTime+0x14>
 80050a4:	2301      	movs	r3, #1
 80050a6:	e000      	b.n	80050aa <prvResetNextTaskUnblockTime+0x16>
 80050a8:	2300      	movs	r3, #0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d004      	beq.n	80050b8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80050ae:	4b0a      	ldr	r3, [pc, #40]	@ (80050d8 <prvResetNextTaskUnblockTime+0x44>)
 80050b0:	f04f 32ff 	mov.w	r2, #4294967295
 80050b4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80050b6:	e008      	b.n	80050ca <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80050b8:	4b06      	ldr	r3, [pc, #24]	@ (80050d4 <prvResetNextTaskUnblockTime+0x40>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	4a04      	ldr	r2, [pc, #16]	@ (80050d8 <prvResetNextTaskUnblockTime+0x44>)
 80050c8:	6013      	str	r3, [r2, #0]
}
 80050ca:	bf00      	nop
 80050cc:	370c      	adds	r7, #12
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bc80      	pop	{r7}
 80050d2:	4770      	bx	lr
 80050d4:	20000b64 	.word	0x20000b64
 80050d8:	20000bcc 	.word	0x20000bcc

080050dc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80050e2:	4b04      	ldr	r3, [pc, #16]	@ (80050f4 <xTaskGetCurrentTaskHandle+0x18>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	607b      	str	r3, [r7, #4]

		return xReturn;
 80050e8:	687b      	ldr	r3, [r7, #4]
	}
 80050ea:	4618      	mov	r0, r3
 80050ec:	370c      	adds	r7, #12
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bc80      	pop	{r7}
 80050f2:	4770      	bx	lr
 80050f4:	200006d8 	.word	0x200006d8

080050f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80050fe:	4b0b      	ldr	r3, [pc, #44]	@ (800512c <xTaskGetSchedulerState+0x34>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d102      	bne.n	800510c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005106:	2301      	movs	r3, #1
 8005108:	607b      	str	r3, [r7, #4]
 800510a:	e008      	b.n	800511e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800510c:	4b08      	ldr	r3, [pc, #32]	@ (8005130 <xTaskGetSchedulerState+0x38>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d102      	bne.n	800511a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005114:	2302      	movs	r3, #2
 8005116:	607b      	str	r3, [r7, #4]
 8005118:	e001      	b.n	800511e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800511a:	2300      	movs	r3, #0
 800511c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800511e:	687b      	ldr	r3, [r7, #4]
	}
 8005120:	4618      	mov	r0, r3
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	bc80      	pop	{r7}
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	20000bb8 	.word	0x20000bb8
 8005130:	20000bd4 	.word	0x20000bd4

08005134 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005140:	2300      	movs	r3, #0
 8005142:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d056      	beq.n	80051f8 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800514e:	4b2d      	ldr	r3, [pc, #180]	@ (8005204 <xTaskPriorityInherit+0xd0>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005154:	429a      	cmp	r2, r3
 8005156:	d246      	bcs.n	80051e6 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	2b00      	cmp	r3, #0
 800515e:	db06      	blt.n	800516e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005160:	4b28      	ldr	r3, [pc, #160]	@ (8005204 <xTaskPriorityInherit+0xd0>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005166:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	6959      	ldr	r1, [r3, #20]
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005176:	4613      	mov	r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	4413      	add	r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	4a22      	ldr	r2, [pc, #136]	@ (8005208 <xTaskPriorityInherit+0xd4>)
 8005180:	4413      	add	r3, r2
 8005182:	4299      	cmp	r1, r3
 8005184:	d101      	bne.n	800518a <xTaskPriorityInherit+0x56>
 8005186:	2301      	movs	r3, #1
 8005188:	e000      	b.n	800518c <xTaskPriorityInherit+0x58>
 800518a:	2300      	movs	r3, #0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d022      	beq.n	80051d6 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	3304      	adds	r3, #4
 8005194:	4618      	mov	r0, r3
 8005196:	f7fe fa25 	bl	80035e4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800519a:	4b1a      	ldr	r3, [pc, #104]	@ (8005204 <xTaskPriorityInherit+0xd0>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051a8:	4b18      	ldr	r3, [pc, #96]	@ (800520c <xTaskPriorityInherit+0xd8>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d903      	bls.n	80051b8 <xTaskPriorityInherit+0x84>
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b4:	4a15      	ldr	r2, [pc, #84]	@ (800520c <xTaskPriorityInherit+0xd8>)
 80051b6:	6013      	str	r3, [r2, #0]
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051bc:	4613      	mov	r3, r2
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	4413      	add	r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	4a10      	ldr	r2, [pc, #64]	@ (8005208 <xTaskPriorityInherit+0xd4>)
 80051c6:	441a      	add	r2, r3
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	3304      	adds	r3, #4
 80051cc:	4619      	mov	r1, r3
 80051ce:	4610      	mov	r0, r2
 80051d0:	f7fe f9ad 	bl	800352e <vListInsertEnd>
 80051d4:	e004      	b.n	80051e0 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80051d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005204 <xTaskPriorityInherit+0xd0>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80051e0:	2301      	movs	r3, #1
 80051e2:	60fb      	str	r3, [r7, #12]
 80051e4:	e008      	b.n	80051f8 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80051ea:	4b06      	ldr	r3, [pc, #24]	@ (8005204 <xTaskPriorityInherit+0xd0>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d201      	bcs.n	80051f8 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80051f4:	2301      	movs	r3, #1
 80051f6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80051f8:	68fb      	ldr	r3, [r7, #12]
	}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	200006d8 	.word	0x200006d8
 8005208:	200006dc 	.word	0x200006dc
 800520c:	20000bb4 	.word	0x20000bb4

08005210 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005210:	b580      	push	{r7, lr}
 8005212:	b086      	sub	sp, #24
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800521c:	2300      	movs	r3, #0
 800521e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d058      	beq.n	80052d8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005226:	4b2f      	ldr	r3, [pc, #188]	@ (80052e4 <xTaskPriorityDisinherit+0xd4>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	429a      	cmp	r2, r3
 800522e:	d00b      	beq.n	8005248 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005234:	f383 8811 	msr	BASEPRI, r3
 8005238:	f3bf 8f6f 	isb	sy
 800523c:	f3bf 8f4f 	dsb	sy
 8005240:	60fb      	str	r3, [r7, #12]
}
 8005242:	bf00      	nop
 8005244:	bf00      	nop
 8005246:	e7fd      	b.n	8005244 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10b      	bne.n	8005268 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005254:	f383 8811 	msr	BASEPRI, r3
 8005258:	f3bf 8f6f 	isb	sy
 800525c:	f3bf 8f4f 	dsb	sy
 8005260:	60bb      	str	r3, [r7, #8]
}
 8005262:	bf00      	nop
 8005264:	bf00      	nop
 8005266:	e7fd      	b.n	8005264 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800526c:	1e5a      	subs	r2, r3, #1
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800527a:	429a      	cmp	r2, r3
 800527c:	d02c      	beq.n	80052d8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005282:	2b00      	cmp	r3, #0
 8005284:	d128      	bne.n	80052d8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	3304      	adds	r3, #4
 800528a:	4618      	mov	r0, r3
 800528c:	f7fe f9aa 	bl	80035e4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800529c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052a8:	4b0f      	ldr	r3, [pc, #60]	@ (80052e8 <xTaskPriorityDisinherit+0xd8>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d903      	bls.n	80052b8 <xTaskPriorityDisinherit+0xa8>
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052b4:	4a0c      	ldr	r2, [pc, #48]	@ (80052e8 <xTaskPriorityDisinherit+0xd8>)
 80052b6:	6013      	str	r3, [r2, #0]
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052bc:	4613      	mov	r3, r2
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	4413      	add	r3, r2
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	4a09      	ldr	r2, [pc, #36]	@ (80052ec <xTaskPriorityDisinherit+0xdc>)
 80052c6:	441a      	add	r2, r3
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	3304      	adds	r3, #4
 80052cc:	4619      	mov	r1, r3
 80052ce:	4610      	mov	r0, r2
 80052d0:	f7fe f92d 	bl	800352e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80052d4:	2301      	movs	r3, #1
 80052d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80052d8:	697b      	ldr	r3, [r7, #20]
	}
 80052da:	4618      	mov	r0, r3
 80052dc:	3718      	adds	r7, #24
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	200006d8 	.word	0x200006d8
 80052e8:	20000bb4 	.word	0x20000bb4
 80052ec:	200006dc 	.word	0x200006dc

080052f0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b088      	sub	sp, #32
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80052fe:	2301      	movs	r3, #1
 8005300:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d071      	beq.n	80053ec <vTaskPriorityDisinheritAfterTimeout+0xfc>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800530c:	2b00      	cmp	r3, #0
 800530e:	d10b      	bne.n	8005328 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005314:	f383 8811 	msr	BASEPRI, r3
 8005318:	f3bf 8f6f 	isb	sy
 800531c:	f3bf 8f4f 	dsb	sy
 8005320:	60fb      	str	r3, [r7, #12]
}
 8005322:	bf00      	nop
 8005324:	bf00      	nop
 8005326:	e7fd      	b.n	8005324 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800532c:	683a      	ldr	r2, [r7, #0]
 800532e:	429a      	cmp	r2, r3
 8005330:	d902      	bls.n	8005338 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	61fb      	str	r3, [r7, #28]
 8005336:	e002      	b.n	800533e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800533c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005342:	69fa      	ldr	r2, [r7, #28]
 8005344:	429a      	cmp	r2, r3
 8005346:	d051      	beq.n	80053ec <vTaskPriorityDisinheritAfterTimeout+0xfc>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	429a      	cmp	r2, r3
 8005350:	d14c      	bne.n	80053ec <vTaskPriorityDisinheritAfterTimeout+0xfc>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005352:	4b28      	ldr	r3, [pc, #160]	@ (80053f4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	69ba      	ldr	r2, [r7, #24]
 8005358:	429a      	cmp	r2, r3
 800535a:	d10b      	bne.n	8005374 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800535c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005360:	f383 8811 	msr	BASEPRI, r3
 8005364:	f3bf 8f6f 	isb	sy
 8005368:	f3bf 8f4f 	dsb	sy
 800536c:	60bb      	str	r3, [r7, #8]
}
 800536e:	bf00      	nop
 8005370:	bf00      	nop
 8005372:	e7fd      	b.n	8005370 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005378:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	69fa      	ldr	r2, [r7, #28]
 800537e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	2b00      	cmp	r3, #0
 8005386:	db04      	blt.n	8005392 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	6959      	ldr	r1, [r3, #20]
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	4613      	mov	r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	4413      	add	r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	4a15      	ldr	r2, [pc, #84]	@ (80053f8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80053a2:	4413      	add	r3, r2
 80053a4:	4299      	cmp	r1, r3
 80053a6:	d101      	bne.n	80053ac <vTaskPriorityDisinheritAfterTimeout+0xbc>
 80053a8:	2301      	movs	r3, #1
 80053aa:	e000      	b.n	80053ae <vTaskPriorityDisinheritAfterTimeout+0xbe>
 80053ac:	2300      	movs	r3, #0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d01c      	beq.n	80053ec <vTaskPriorityDisinheritAfterTimeout+0xfc>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	3304      	adds	r3, #4
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7fe f914 	bl	80035e4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053c0:	4b0e      	ldr	r3, [pc, #56]	@ (80053fc <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d903      	bls.n	80053d0 <vTaskPriorityDisinheritAfterTimeout+0xe0>
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053cc:	4a0b      	ldr	r2, [pc, #44]	@ (80053fc <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80053ce:	6013      	str	r3, [r2, #0]
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053d4:	4613      	mov	r3, r2
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	4413      	add	r3, r2
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	4a06      	ldr	r2, [pc, #24]	@ (80053f8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80053de:	441a      	add	r2, r3
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	3304      	adds	r3, #4
 80053e4:	4619      	mov	r1, r3
 80053e6:	4610      	mov	r0, r2
 80053e8:	f7fe f8a1 	bl	800352e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80053ec:	bf00      	nop
 80053ee:	3720      	adds	r7, #32
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	200006d8 	.word	0x200006d8
 80053f8:	200006dc 	.word	0x200006dc
 80053fc:	20000bb4 	.word	0x20000bb4

08005400 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8005400:	b480      	push	{r7}
 8005402:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005404:	4b07      	ldr	r3, [pc, #28]	@ (8005424 <pvTaskIncrementMutexHeldCount+0x24>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d004      	beq.n	8005416 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800540c:	4b05      	ldr	r3, [pc, #20]	@ (8005424 <pvTaskIncrementMutexHeldCount+0x24>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005412:	3201      	adds	r2, #1
 8005414:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8005416:	4b03      	ldr	r3, [pc, #12]	@ (8005424 <pvTaskIncrementMutexHeldCount+0x24>)
 8005418:	681b      	ldr	r3, [r3, #0]
	}
 800541a:	4618      	mov	r0, r3
 800541c:	46bd      	mov	sp, r7
 800541e:	bc80      	pop	{r7}
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	200006d8 	.word	0x200006d8

08005428 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8005432:	f000 fe6b 	bl	800610c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8005436:	4b1e      	ldr	r3, [pc, #120]	@ (80054b0 <ulTaskNotifyTake+0x88>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800543c:	2b00      	cmp	r3, #0
 800543e:	d113      	bne.n	8005468 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8005440:	4b1b      	ldr	r3, [pc, #108]	@ (80054b0 <ulTaskNotifyTake+0x88>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00b      	beq.n	8005468 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005450:	2101      	movs	r1, #1
 8005452:	6838      	ldr	r0, [r7, #0]
 8005454:	f000 f9a2 	bl	800579c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8005458:	4b16      	ldr	r3, [pc, #88]	@ (80054b4 <ulTaskNotifyTake+0x8c>)
 800545a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800545e:	601a      	str	r2, [r3, #0]
 8005460:	f3bf 8f4f 	dsb	sy
 8005464:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005468:	f000 fe80 	bl	800616c <vPortExitCritical>

		taskENTER_CRITICAL();
 800546c:	f000 fe4e 	bl	800610c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8005470:	4b0f      	ldr	r3, [pc, #60]	@ (80054b0 <ulTaskNotifyTake+0x88>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005476:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00c      	beq.n	8005498 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d004      	beq.n	800548e <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8005484:	4b0a      	ldr	r3, [pc, #40]	@ (80054b0 <ulTaskNotifyTake+0x88>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2200      	movs	r2, #0
 800548a:	655a      	str	r2, [r3, #84]	@ 0x54
 800548c:	e004      	b.n	8005498 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800548e:	4b08      	ldr	r3, [pc, #32]	@ (80054b0 <ulTaskNotifyTake+0x88>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	3a01      	subs	r2, #1
 8005496:	655a      	str	r2, [r3, #84]	@ 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005498:	4b05      	ldr	r3, [pc, #20]	@ (80054b0 <ulTaskNotifyTake+0x88>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		}
		taskEXIT_CRITICAL();
 80054a2:	f000 fe63 	bl	800616c <vPortExitCritical>

		return ulReturn;
 80054a6:	68fb      	ldr	r3, [r7, #12]
	}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3710      	adds	r7, #16
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	200006d8 	.word	0x200006d8
 80054b4:	e000ed04 	.word	0xe000ed04

080054b8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b08a      	sub	sp, #40	@ 0x28
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	603b      	str	r3, [r7, #0]
 80054c4:	4613      	mov	r3, r2
 80054c6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80054c8:	2301      	movs	r3, #1
 80054ca:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d10b      	bne.n	80054ea <xTaskGenericNotify+0x32>
	__asm volatile
 80054d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d6:	f383 8811 	msr	BASEPRI, r3
 80054da:	f3bf 8f6f 	isb	sy
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	61bb      	str	r3, [r7, #24]
}
 80054e4:	bf00      	nop
 80054e6:	bf00      	nop
 80054e8:	e7fd      	b.n	80054e6 <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80054ee:	f000 fe0d 	bl	800610c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d003      	beq.n	8005500 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80054f8:	6a3b      	ldr	r3, [r7, #32]
 80054fa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005500:	6a3b      	ldr	r3, [r7, #32]
 8005502:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005506:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005508:	6a3b      	ldr	r3, [r7, #32]
 800550a:	2202      	movs	r2, #2
 800550c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 8005510:	79fb      	ldrb	r3, [r7, #7]
 8005512:	2b04      	cmp	r3, #4
 8005514:	d827      	bhi.n	8005566 <xTaskGenericNotify+0xae>
 8005516:	a201      	add	r2, pc, #4	@ (adr r2, 800551c <xTaskGenericNotify+0x64>)
 8005518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800551c:	08005567 	.word	0x08005567
 8005520:	08005531 	.word	0x08005531
 8005524:	0800553f 	.word	0x0800553f
 8005528:	0800554b 	.word	0x0800554b
 800552c:	08005553 	.word	0x08005553
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005530:	6a3b      	ldr	r3, [r7, #32]
 8005532:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	431a      	orrs	r2, r3
 8005538:	6a3b      	ldr	r3, [r7, #32]
 800553a:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 800553c:	e013      	b.n	8005566 <xTaskGenericNotify+0xae>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800553e:	6a3b      	ldr	r3, [r7, #32]
 8005540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005542:	1c5a      	adds	r2, r3, #1
 8005544:	6a3b      	ldr	r3, [r7, #32]
 8005546:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8005548:	e00d      	b.n	8005566 <xTaskGenericNotify+0xae>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800554a:	6a3b      	ldr	r3, [r7, #32]
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8005550:	e009      	b.n	8005566 <xTaskGenericNotify+0xae>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005552:	7ffb      	ldrb	r3, [r7, #31]
 8005554:	2b02      	cmp	r3, #2
 8005556:	d003      	beq.n	8005560 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005558:	6a3b      	ldr	r3, [r7, #32]
 800555a:	68ba      	ldr	r2, [r7, #8]
 800555c:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800555e:	e001      	b.n	8005564 <xTaskGenericNotify+0xac>
						xReturn = pdFAIL;
 8005560:	2300      	movs	r3, #0
 8005562:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8005564:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005566:	7ffb      	ldrb	r3, [r7, #31]
 8005568:	2b01      	cmp	r3, #1
 800556a:	d13b      	bne.n	80055e4 <xTaskGenericNotify+0x12c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800556c:	6a3b      	ldr	r3, [r7, #32]
 800556e:	3304      	adds	r3, #4
 8005570:	4618      	mov	r0, r3
 8005572:	f7fe f837 	bl	80035e4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8005576:	6a3b      	ldr	r3, [r7, #32]
 8005578:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800557a:	4b1e      	ldr	r3, [pc, #120]	@ (80055f4 <xTaskGenericNotify+0x13c>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	429a      	cmp	r2, r3
 8005580:	d903      	bls.n	800558a <xTaskGenericNotify+0xd2>
 8005582:	6a3b      	ldr	r3, [r7, #32]
 8005584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005586:	4a1b      	ldr	r2, [pc, #108]	@ (80055f4 <xTaskGenericNotify+0x13c>)
 8005588:	6013      	str	r3, [r2, #0]
 800558a:	6a3b      	ldr	r3, [r7, #32]
 800558c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800558e:	4613      	mov	r3, r2
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	4413      	add	r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	4a18      	ldr	r2, [pc, #96]	@ (80055f8 <xTaskGenericNotify+0x140>)
 8005598:	441a      	add	r2, r3
 800559a:	6a3b      	ldr	r3, [r7, #32]
 800559c:	3304      	adds	r3, #4
 800559e:	4619      	mov	r1, r3
 80055a0:	4610      	mov	r0, r2
 80055a2:	f7fd ffc4 	bl	800352e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80055a6:	6a3b      	ldr	r3, [r7, #32]
 80055a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00b      	beq.n	80055c6 <xTaskGenericNotify+0x10e>
	__asm volatile
 80055ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055b2:	f383 8811 	msr	BASEPRI, r3
 80055b6:	f3bf 8f6f 	isb	sy
 80055ba:	f3bf 8f4f 	dsb	sy
 80055be:	617b      	str	r3, [r7, #20]
}
 80055c0:	bf00      	nop
 80055c2:	bf00      	nop
 80055c4:	e7fd      	b.n	80055c2 <xTaskGenericNotify+0x10a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80055c6:	6a3b      	ldr	r3, [r7, #32]
 80055c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055ca:	4b0c      	ldr	r3, [pc, #48]	@ (80055fc <xTaskGenericNotify+0x144>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d907      	bls.n	80055e4 <xTaskGenericNotify+0x12c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80055d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005600 <xTaskGenericNotify+0x148>)
 80055d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055da:	601a      	str	r2, [r3, #0]
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80055e4:	f000 fdc2 	bl	800616c <vPortExitCritical>

		return xReturn;
 80055e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3728      	adds	r7, #40	@ 0x28
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	20000bb4 	.word	0x20000bb4
 80055f8:	200006dc 	.word	0x200006dc
 80055fc:	200006d8 	.word	0x200006d8
 8005600:	e000ed04 	.word	0xe000ed04

08005604 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005604:	b580      	push	{r7, lr}
 8005606:	b08e      	sub	sp, #56	@ 0x38
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	603b      	str	r3, [r7, #0]
 8005610:	4613      	mov	r3, r2
 8005612:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8005614:	2301      	movs	r3, #1
 8005616:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d10b      	bne.n	8005636 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800561e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005622:	f383 8811 	msr	BASEPRI, r3
 8005626:	f3bf 8f6f 	isb	sy
 800562a:	f3bf 8f4f 	dsb	sy
 800562e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005630:	bf00      	nop
 8005632:	bf00      	nop
 8005634:	e7fd      	b.n	8005632 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005636:	f000 fe2b 	bl	8006290 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 800563e:	f3ef 8211 	mrs	r2, BASEPRI
 8005642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005646:	f383 8811 	msr	BASEPRI, r3
 800564a:	f3bf 8f6f 	isb	sy
 800564e:	f3bf 8f4f 	dsb	sy
 8005652:	623a      	str	r2, [r7, #32]
 8005654:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8005656:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005658:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d003      	beq.n	8005668 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005662:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800566a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800566e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005674:	2202      	movs	r2, #2
 8005676:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 800567a:	79fb      	ldrb	r3, [r7, #7]
 800567c:	2b04      	cmp	r3, #4
 800567e:	d829      	bhi.n	80056d4 <xTaskGenericNotifyFromISR+0xd0>
 8005680:	a201      	add	r2, pc, #4	@ (adr r2, 8005688 <xTaskGenericNotifyFromISR+0x84>)
 8005682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005686:	bf00      	nop
 8005688:	080056d5 	.word	0x080056d5
 800568c:	0800569d 	.word	0x0800569d
 8005690:	080056ab 	.word	0x080056ab
 8005694:	080056b7 	.word	0x080056b7
 8005698:	080056bf 	.word	0x080056bf
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800569c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800569e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	431a      	orrs	r2, r3
 80056a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a6:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 80056a8:	e014      	b.n	80056d4 <xTaskGenericNotifyFromISR+0xd0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80056aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ae:	1c5a      	adds	r2, r3, #1
 80056b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b2:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 80056b4:	e00e      	b.n	80056d4 <xTaskGenericNotifyFromISR+0xd0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80056b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b8:	68ba      	ldr	r2, [r7, #8]
 80056ba:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 80056bc:	e00a      	b.n	80056d4 <xTaskGenericNotifyFromISR+0xd0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80056be:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d003      	beq.n	80056ce <xTaskGenericNotifyFromISR+0xca>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80056c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c8:	68ba      	ldr	r2, [r7, #8]
 80056ca:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80056cc:	e001      	b.n	80056d2 <xTaskGenericNotifyFromISR+0xce>
						xReturn = pdFAIL;
 80056ce:	2300      	movs	r3, #0
 80056d0:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 80056d2:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80056d4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d148      	bne.n	800576e <xTaskGenericNotifyFromISR+0x16a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80056dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d00b      	beq.n	80056fc <xTaskGenericNotifyFromISR+0xf8>
	__asm volatile
 80056e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056e8:	f383 8811 	msr	BASEPRI, r3
 80056ec:	f3bf 8f6f 	isb	sy
 80056f0:	f3bf 8f4f 	dsb	sy
 80056f4:	61bb      	str	r3, [r7, #24]
}
 80056f6:	bf00      	nop
 80056f8:	bf00      	nop
 80056fa:	e7fd      	b.n	80056f8 <xTaskGenericNotifyFromISR+0xf4>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056fc:	4b21      	ldr	r3, [pc, #132]	@ (8005784 <xTaskGenericNotifyFromISR+0x180>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d11d      	bne.n	8005740 <xTaskGenericNotifyFromISR+0x13c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005706:	3304      	adds	r3, #4
 8005708:	4618      	mov	r0, r3
 800570a:	f7fd ff6b 	bl	80035e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800570e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005710:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005712:	4b1d      	ldr	r3, [pc, #116]	@ (8005788 <xTaskGenericNotifyFromISR+0x184>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	429a      	cmp	r2, r3
 8005718:	d903      	bls.n	8005722 <xTaskGenericNotifyFromISR+0x11e>
 800571a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800571c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800571e:	4a1a      	ldr	r2, [pc, #104]	@ (8005788 <xTaskGenericNotifyFromISR+0x184>)
 8005720:	6013      	str	r3, [r2, #0]
 8005722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005724:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005726:	4613      	mov	r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	4413      	add	r3, r2
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	4a17      	ldr	r2, [pc, #92]	@ (800578c <xTaskGenericNotifyFromISR+0x188>)
 8005730:	441a      	add	r2, r3
 8005732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005734:	3304      	adds	r3, #4
 8005736:	4619      	mov	r1, r3
 8005738:	4610      	mov	r0, r2
 800573a:	f7fd fef8 	bl	800352e <vListInsertEnd>
 800573e:	e005      	b.n	800574c <xTaskGenericNotifyFromISR+0x148>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005742:	3318      	adds	r3, #24
 8005744:	4619      	mov	r1, r3
 8005746:	4812      	ldr	r0, [pc, #72]	@ (8005790 <xTaskGenericNotifyFromISR+0x18c>)
 8005748:	f7fd fef1 	bl	800352e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800574c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800574e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005750:	4b10      	ldr	r3, [pc, #64]	@ (8005794 <xTaskGenericNotifyFromISR+0x190>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005756:	429a      	cmp	r2, r3
 8005758:	d909      	bls.n	800576e <xTaskGenericNotifyFromISR+0x16a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800575a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800575c:	2b00      	cmp	r3, #0
 800575e:	d003      	beq.n	8005768 <xTaskGenericNotifyFromISR+0x164>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8005760:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005762:	2201      	movs	r2, #1
 8005764:	601a      	str	r2, [r3, #0]
 8005766:	e002      	b.n	800576e <xTaskGenericNotifyFromISR+0x16a>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8005768:	4b0b      	ldr	r3, [pc, #44]	@ (8005798 <xTaskGenericNotifyFromISR+0x194>)
 800576a:	2201      	movs	r2, #1
 800576c:	601a      	str	r2, [r3, #0]
 800576e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005770:	617b      	str	r3, [r7, #20]
	__asm volatile
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	f383 8811 	msr	BASEPRI, r3
}
 8005778:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800577a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800577c:	4618      	mov	r0, r3
 800577e:	3738      	adds	r7, #56	@ 0x38
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	20000bd4 	.word	0x20000bd4
 8005788:	20000bb4 	.word	0x20000bb4
 800578c:	200006dc 	.word	0x200006dc
 8005790:	20000b6c 	.word	0x20000b6c
 8005794:	200006d8 	.word	0x200006d8
 8005798:	20000bc0 	.word	0x20000bc0

0800579c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80057a6:	4b21      	ldr	r3, [pc, #132]	@ (800582c <prvAddCurrentTaskToDelayedList+0x90>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057ac:	4b20      	ldr	r3, [pc, #128]	@ (8005830 <prvAddCurrentTaskToDelayedList+0x94>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	3304      	adds	r3, #4
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7fd ff16 	bl	80035e4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057be:	d10a      	bne.n	80057d6 <prvAddCurrentTaskToDelayedList+0x3a>
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d007      	beq.n	80057d6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057c6:	4b1a      	ldr	r3, [pc, #104]	@ (8005830 <prvAddCurrentTaskToDelayedList+0x94>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	3304      	adds	r3, #4
 80057cc:	4619      	mov	r1, r3
 80057ce:	4819      	ldr	r0, [pc, #100]	@ (8005834 <prvAddCurrentTaskToDelayedList+0x98>)
 80057d0:	f7fd fead 	bl	800352e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80057d4:	e026      	b.n	8005824 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4413      	add	r3, r2
 80057dc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80057de:	4b14      	ldr	r3, [pc, #80]	@ (8005830 <prvAddCurrentTaskToDelayedList+0x94>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68ba      	ldr	r2, [r7, #8]
 80057e4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80057e6:	68ba      	ldr	r2, [r7, #8]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d209      	bcs.n	8005802 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057ee:	4b12      	ldr	r3, [pc, #72]	@ (8005838 <prvAddCurrentTaskToDelayedList+0x9c>)
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	4b0f      	ldr	r3, [pc, #60]	@ (8005830 <prvAddCurrentTaskToDelayedList+0x94>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	3304      	adds	r3, #4
 80057f8:	4619      	mov	r1, r3
 80057fa:	4610      	mov	r0, r2
 80057fc:	f7fd feba 	bl	8003574 <vListInsert>
}
 8005800:	e010      	b.n	8005824 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005802:	4b0e      	ldr	r3, [pc, #56]	@ (800583c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	4b0a      	ldr	r3, [pc, #40]	@ (8005830 <prvAddCurrentTaskToDelayedList+0x94>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	3304      	adds	r3, #4
 800580c:	4619      	mov	r1, r3
 800580e:	4610      	mov	r0, r2
 8005810:	f7fd feb0 	bl	8003574 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005814:	4b0a      	ldr	r3, [pc, #40]	@ (8005840 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	429a      	cmp	r2, r3
 800581c:	d202      	bcs.n	8005824 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800581e:	4a08      	ldr	r2, [pc, #32]	@ (8005840 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	6013      	str	r3, [r2, #0]
}
 8005824:	bf00      	nop
 8005826:	3710      	adds	r7, #16
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	20000bb0 	.word	0x20000bb0
 8005830:	200006d8 	.word	0x200006d8
 8005834:	20000b98 	.word	0x20000b98
 8005838:	20000b68 	.word	0x20000b68
 800583c:	20000b64 	.word	0x20000b64
 8005840:	20000bcc 	.word	0x20000bcc

08005844 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b08a      	sub	sp, #40	@ 0x28
 8005848:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800584a:	2300      	movs	r3, #0
 800584c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800584e:	f000 fb2d 	bl	8005eac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005852:	4b1d      	ldr	r3, [pc, #116]	@ (80058c8 <xTimerCreateTimerTask+0x84>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d021      	beq.n	800589e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800585a:	2300      	movs	r3, #0
 800585c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800585e:	2300      	movs	r3, #0
 8005860:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005862:	1d3a      	adds	r2, r7, #4
 8005864:	f107 0108 	add.w	r1, r7, #8
 8005868:	f107 030c 	add.w	r3, r7, #12
 800586c:	4618      	mov	r0, r3
 800586e:	f7fd fe1b 	bl	80034a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005872:	6879      	ldr	r1, [r7, #4]
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	9202      	str	r2, [sp, #8]
 800587a:	9301      	str	r3, [sp, #4]
 800587c:	2302      	movs	r3, #2
 800587e:	9300      	str	r3, [sp, #0]
 8005880:	2300      	movs	r3, #0
 8005882:	460a      	mov	r2, r1
 8005884:	4911      	ldr	r1, [pc, #68]	@ (80058cc <xTimerCreateTimerTask+0x88>)
 8005886:	4812      	ldr	r0, [pc, #72]	@ (80058d0 <xTimerCreateTimerTask+0x8c>)
 8005888:	f7fe fdee 	bl	8004468 <xTaskCreateStatic>
 800588c:	4603      	mov	r3, r0
 800588e:	4a11      	ldr	r2, [pc, #68]	@ (80058d4 <xTimerCreateTimerTask+0x90>)
 8005890:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005892:	4b10      	ldr	r3, [pc, #64]	@ (80058d4 <xTimerCreateTimerTask+0x90>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d001      	beq.n	800589e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800589a:	2301      	movs	r3, #1
 800589c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d10b      	bne.n	80058bc <xTimerCreateTimerTask+0x78>
	__asm volatile
 80058a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058a8:	f383 8811 	msr	BASEPRI, r3
 80058ac:	f3bf 8f6f 	isb	sy
 80058b0:	f3bf 8f4f 	dsb	sy
 80058b4:	613b      	str	r3, [r7, #16]
}
 80058b6:	bf00      	nop
 80058b8:	bf00      	nop
 80058ba:	e7fd      	b.n	80058b8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80058bc:	697b      	ldr	r3, [r7, #20]
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3718      	adds	r7, #24
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	20000c08 	.word	0x20000c08
 80058cc:	080080d8 	.word	0x080080d8
 80058d0:	08005aa1 	.word	0x08005aa1
 80058d4:	20000c0c 	.word	0x20000c0c

080058d8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b088      	sub	sp, #32
 80058dc:	af02      	add	r7, sp, #8
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	607a      	str	r2, [r7, #4]
 80058e4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 80058e6:	2030      	movs	r0, #48	@ 0x30
 80058e8:	f000 fd12 	bl	8006310 <pvPortMalloc>
 80058ec:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d00d      	beq.n	8005910 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	9301      	str	r3, [sp, #4]
 80058f8:	6a3b      	ldr	r3, [r7, #32]
 80058fa:	9300      	str	r3, [sp, #0]
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	68b9      	ldr	r1, [r7, #8]
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f000 f809 	bl	800591a <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8005910:	697b      	ldr	r3, [r7, #20]
	}
 8005912:	4618      	mov	r0, r3
 8005914:	3718      	adds	r7, #24
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}

0800591a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800591a:	b580      	push	{r7, lr}
 800591c:	b086      	sub	sp, #24
 800591e:	af00      	add	r7, sp, #0
 8005920:	60f8      	str	r0, [r7, #12]
 8005922:	60b9      	str	r1, [r7, #8]
 8005924:	607a      	str	r2, [r7, #4]
 8005926:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d10b      	bne.n	8005946 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800592e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005932:	f383 8811 	msr	BASEPRI, r3
 8005936:	f3bf 8f6f 	isb	sy
 800593a:	f3bf 8f4f 	dsb	sy
 800593e:	617b      	str	r3, [r7, #20]
}
 8005940:	bf00      	nop
 8005942:	bf00      	nop
 8005944:	e7fd      	b.n	8005942 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8005946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005948:	2b00      	cmp	r3, #0
 800594a:	d015      	beq.n	8005978 <prvInitialiseNewTimer+0x5e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800594c:	f000 faae 	bl	8005eac <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8005950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8005956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005958:	68ba      	ldr	r2, [r7, #8]
 800595a:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800595c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8005962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005964:	683a      	ldr	r2, [r7, #0]
 8005966:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800596a:	6a3a      	ldr	r2, [r7, #32]
 800596c:	625a      	str	r2, [r3, #36]	@ 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800596e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005970:	3304      	adds	r3, #4
 8005972:	4618      	mov	r0, r3
 8005974:	f7fd fdcf 	bl	8003516 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8005978:	bf00      	nop
 800597a:	3718      	adds	r7, #24
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b08a      	sub	sp, #40	@ 0x28
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]
 800598c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800598e:	2300      	movs	r3, #0
 8005990:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d10b      	bne.n	80059b0 <xTimerGenericCommand+0x30>
	__asm volatile
 8005998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800599c:	f383 8811 	msr	BASEPRI, r3
 80059a0:	f3bf 8f6f 	isb	sy
 80059a4:	f3bf 8f4f 	dsb	sy
 80059a8:	623b      	str	r3, [r7, #32]
}
 80059aa:	bf00      	nop
 80059ac:	bf00      	nop
 80059ae:	e7fd      	b.n	80059ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80059b0:	4b19      	ldr	r3, [pc, #100]	@ (8005a18 <xTimerGenericCommand+0x98>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d02a      	beq.n	8005a0e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	2b05      	cmp	r3, #5
 80059c8:	dc18      	bgt.n	80059fc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80059ca:	f7ff fb95 	bl	80050f8 <xTaskGetSchedulerState>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d109      	bne.n	80059e8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80059d4:	4b10      	ldr	r3, [pc, #64]	@ (8005a18 <xTimerGenericCommand+0x98>)
 80059d6:	6818      	ldr	r0, [r3, #0]
 80059d8:	f107 0110 	add.w	r1, r7, #16
 80059dc:	2300      	movs	r3, #0
 80059de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059e0:	f7fd ffe0 	bl	80039a4 <xQueueGenericSend>
 80059e4:	6278      	str	r0, [r7, #36]	@ 0x24
 80059e6:	e012      	b.n	8005a0e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80059e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005a18 <xTimerGenericCommand+0x98>)
 80059ea:	6818      	ldr	r0, [r3, #0]
 80059ec:	f107 0110 	add.w	r1, r7, #16
 80059f0:	2300      	movs	r3, #0
 80059f2:	2200      	movs	r2, #0
 80059f4:	f7fd ffd6 	bl	80039a4 <xQueueGenericSend>
 80059f8:	6278      	str	r0, [r7, #36]	@ 0x24
 80059fa:	e008      	b.n	8005a0e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80059fc:	4b06      	ldr	r3, [pc, #24]	@ (8005a18 <xTimerGenericCommand+0x98>)
 80059fe:	6818      	ldr	r0, [r3, #0]
 8005a00:	f107 0110 	add.w	r1, r7, #16
 8005a04:	2300      	movs	r3, #0
 8005a06:	683a      	ldr	r2, [r7, #0]
 8005a08:	f7fe f8ce 	bl	8003ba8 <xQueueGenericSendFromISR>
 8005a0c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3728      	adds	r7, #40	@ 0x28
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	20000c08 	.word	0x20000c08

08005a1c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b088      	sub	sp, #32
 8005a20:	af02      	add	r7, sp, #8
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a26:	4b1d      	ldr	r3, [pc, #116]	@ (8005a9c <prvProcessExpiredTimer+0x80>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	3304      	adds	r3, #4
 8005a34:	4618      	mov	r0, r3
 8005a36:	f7fd fdd5 	bl	80035e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	69db      	ldr	r3, [r3, #28]
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d123      	bne.n	8005a8a <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	699a      	ldr	r2, [r3, #24]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	18d1      	adds	r1, r2, r3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	683a      	ldr	r2, [r7, #0]
 8005a4e:	6978      	ldr	r0, [r7, #20]
 8005a50:	f000 f8cc 	bl	8005bec <prvInsertTimerInActiveList>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d017      	beq.n	8005a8a <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	9300      	str	r3, [sp, #0]
 8005a5e:	2300      	movs	r3, #0
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	2100      	movs	r1, #0
 8005a64:	6978      	ldr	r0, [r7, #20]
 8005a66:	f7ff ff8b 	bl	8005980 <xTimerGenericCommand>
 8005a6a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d10b      	bne.n	8005a8a <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8005a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a76:	f383 8811 	msr	BASEPRI, r3
 8005a7a:	f3bf 8f6f 	isb	sy
 8005a7e:	f3bf 8f4f 	dsb	sy
 8005a82:	60fb      	str	r3, [r7, #12]
}
 8005a84:	bf00      	nop
 8005a86:	bf00      	nop
 8005a88:	e7fd      	b.n	8005a86 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a8e:	6978      	ldr	r0, [r7, #20]
 8005a90:	4798      	blx	r3
}
 8005a92:	bf00      	nop
 8005a94:	3718      	adds	r7, #24
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	20000c00 	.word	0x20000c00

08005aa0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005aa8:	f107 0308 	add.w	r3, r7, #8
 8005aac:	4618      	mov	r0, r3
 8005aae:	f000 f859 	bl	8005b64 <prvGetNextExpireTime>
 8005ab2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	68f8      	ldr	r0, [r7, #12]
 8005aba:	f000 f805 	bl	8005ac8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005abe:	f000 f8d7 	bl	8005c70 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ac2:	bf00      	nop
 8005ac4:	e7f0      	b.n	8005aa8 <prvTimerTask+0x8>
	...

08005ac8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005ad2:	f7fe ff03 	bl	80048dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005ad6:	f107 0308 	add.w	r3, r7, #8
 8005ada:	4618      	mov	r0, r3
 8005adc:	f000 f866 	bl	8005bac <prvSampleTimeNow>
 8005ae0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d130      	bne.n	8005b4a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d10a      	bne.n	8005b04 <prvProcessTimerOrBlockTask+0x3c>
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d806      	bhi.n	8005b04 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005af6:	f7fe feff 	bl	80048f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005afa:	68f9      	ldr	r1, [r7, #12]
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f7ff ff8d 	bl	8005a1c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005b02:	e024      	b.n	8005b4e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d008      	beq.n	8005b1c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005b0a:	4b13      	ldr	r3, [pc, #76]	@ (8005b58 <prvProcessTimerOrBlockTask+0x90>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	bf0c      	ite	eq
 8005b14:	2301      	moveq	r3, #1
 8005b16:	2300      	movne	r3, #0
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8005b5c <prvProcessTimerOrBlockTask+0x94>)
 8005b1e:	6818      	ldr	r0, [r3, #0]
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	683a      	ldr	r2, [r7, #0]
 8005b28:	4619      	mov	r1, r3
 8005b2a:	f7fe fc69 	bl	8004400 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005b2e:	f7fe fee3 	bl	80048f8 <xTaskResumeAll>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10a      	bne.n	8005b4e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005b38:	4b09      	ldr	r3, [pc, #36]	@ (8005b60 <prvProcessTimerOrBlockTask+0x98>)
 8005b3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b3e:	601a      	str	r2, [r3, #0]
 8005b40:	f3bf 8f4f 	dsb	sy
 8005b44:	f3bf 8f6f 	isb	sy
}
 8005b48:	e001      	b.n	8005b4e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005b4a:	f7fe fed5 	bl	80048f8 <xTaskResumeAll>
}
 8005b4e:	bf00      	nop
 8005b50:	3710      	adds	r7, #16
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	20000c04 	.word	0x20000c04
 8005b5c:	20000c08 	.word	0x20000c08
 8005b60:	e000ed04 	.word	0xe000ed04

08005b64 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005b64:	b480      	push	{r7}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005b6c:	4b0e      	ldr	r3, [pc, #56]	@ (8005ba8 <prvGetNextExpireTime+0x44>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	bf0c      	ite	eq
 8005b76:	2301      	moveq	r3, #1
 8005b78:	2300      	movne	r3, #0
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d105      	bne.n	8005b96 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b8a:	4b07      	ldr	r3, [pc, #28]	@ (8005ba8 <prvGetNextExpireTime+0x44>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	60fb      	str	r3, [r7, #12]
 8005b94:	e001      	b.n	8005b9a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005b96:	2300      	movs	r3, #0
 8005b98:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3714      	adds	r7, #20
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bc80      	pop	{r7}
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	20000c00 	.word	0x20000c00

08005bac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005bb4:	f7fe ff3e 	bl	8004a34 <xTaskGetTickCount>
 8005bb8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005bba:	4b0b      	ldr	r3, [pc, #44]	@ (8005be8 <prvSampleTimeNow+0x3c>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d205      	bcs.n	8005bd0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005bc4:	f000 f910 	bl	8005de8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	601a      	str	r2, [r3, #0]
 8005bce:	e002      	b.n	8005bd6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005bd6:	4a04      	ldr	r2, [pc, #16]	@ (8005be8 <prvSampleTimeNow+0x3c>)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	20000c10 	.word	0x20000c10

08005bec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	607a      	str	r2, [r7, #4]
 8005bf8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	68ba      	ldr	r2, [r7, #8]
 8005c02:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005c0a:	68ba      	ldr	r2, [r7, #8]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d812      	bhi.n	8005c38 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	1ad2      	subs	r2, r2, r3
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	699b      	ldr	r3, [r3, #24]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d302      	bcc.n	8005c26 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005c20:	2301      	movs	r3, #1
 8005c22:	617b      	str	r3, [r7, #20]
 8005c24:	e01b      	b.n	8005c5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005c26:	4b10      	ldr	r3, [pc, #64]	@ (8005c68 <prvInsertTimerInActiveList+0x7c>)
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	3304      	adds	r3, #4
 8005c2e:	4619      	mov	r1, r3
 8005c30:	4610      	mov	r0, r2
 8005c32:	f7fd fc9f 	bl	8003574 <vListInsert>
 8005c36:	e012      	b.n	8005c5e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d206      	bcs.n	8005c4e <prvInsertTimerInActiveList+0x62>
 8005c40:	68ba      	ldr	r2, [r7, #8]
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d302      	bcc.n	8005c4e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	617b      	str	r3, [r7, #20]
 8005c4c:	e007      	b.n	8005c5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005c4e:	4b07      	ldr	r3, [pc, #28]	@ (8005c6c <prvInsertTimerInActiveList+0x80>)
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	3304      	adds	r3, #4
 8005c56:	4619      	mov	r1, r3
 8005c58:	4610      	mov	r0, r2
 8005c5a:	f7fd fc8b 	bl	8003574 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005c5e:	697b      	ldr	r3, [r7, #20]
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3718      	adds	r7, #24
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	20000c04 	.word	0x20000c04
 8005c6c:	20000c00 	.word	0x20000c00

08005c70 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b08e      	sub	sp, #56	@ 0x38
 8005c74:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005c76:	e0a5      	b.n	8005dc4 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	da19      	bge.n	8005cb2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005c7e:	1d3b      	adds	r3, r7, #4
 8005c80:	3304      	adds	r3, #4
 8005c82:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10b      	bne.n	8005ca2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c8e:	f383 8811 	msr	BASEPRI, r3
 8005c92:	f3bf 8f6f 	isb	sy
 8005c96:	f3bf 8f4f 	dsb	sy
 8005c9a:	61fb      	str	r3, [r7, #28]
}
 8005c9c:	bf00      	nop
 8005c9e:	bf00      	nop
 8005ca0:	e7fd      	b.n	8005c9e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ca8:	6850      	ldr	r0, [r2, #4]
 8005caa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005cac:	6892      	ldr	r2, [r2, #8]
 8005cae:	4611      	mov	r1, r2
 8005cb0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f2c0 8085 	blt.w	8005dc4 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d004      	beq.n	8005cd0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cc8:	3304      	adds	r3, #4
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f7fd fc8a 	bl	80035e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005cd0:	463b      	mov	r3, r7
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f7ff ff6a 	bl	8005bac <prvSampleTimeNow>
 8005cd8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2b09      	cmp	r3, #9
 8005cde:	d86c      	bhi.n	8005dba <prvProcessReceivedCommands+0x14a>
 8005ce0:	a201      	add	r2, pc, #4	@ (adr r2, 8005ce8 <prvProcessReceivedCommands+0x78>)
 8005ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce6:	bf00      	nop
 8005ce8:	08005d11 	.word	0x08005d11
 8005cec:	08005d11 	.word	0x08005d11
 8005cf0:	08005d11 	.word	0x08005d11
 8005cf4:	08005dbb 	.word	0x08005dbb
 8005cf8:	08005d6f 	.word	0x08005d6f
 8005cfc:	08005da9 	.word	0x08005da9
 8005d00:	08005d11 	.word	0x08005d11
 8005d04:	08005d11 	.word	0x08005d11
 8005d08:	08005dbb 	.word	0x08005dbb
 8005d0c:	08005d6f 	.word	0x08005d6f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005d10:	68ba      	ldr	r2, [r7, #8]
 8005d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d14:	699b      	ldr	r3, [r3, #24]
 8005d16:	18d1      	adds	r1, r2, r3
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d1e:	f7ff ff65 	bl	8005bec <prvInsertTimerInActiveList>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d04a      	beq.n	8005dbe <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d2c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d2e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d32:	69db      	ldr	r3, [r3, #28]
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d142      	bne.n	8005dbe <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005d38:	68ba      	ldr	r2, [r7, #8]
 8005d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	441a      	add	r2, r3
 8005d40:	2300      	movs	r3, #0
 8005d42:	9300      	str	r3, [sp, #0]
 8005d44:	2300      	movs	r3, #0
 8005d46:	2100      	movs	r1, #0
 8005d48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d4a:	f7ff fe19 	bl	8005980 <xTimerGenericCommand>
 8005d4e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005d50:	6a3b      	ldr	r3, [r7, #32]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d133      	bne.n	8005dbe <prvProcessReceivedCommands+0x14e>
	__asm volatile
 8005d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d5a:	f383 8811 	msr	BASEPRI, r3
 8005d5e:	f3bf 8f6f 	isb	sy
 8005d62:	f3bf 8f4f 	dsb	sy
 8005d66:	61bb      	str	r3, [r7, #24]
}
 8005d68:	bf00      	nop
 8005d6a:	bf00      	nop
 8005d6c:	e7fd      	b.n	8005d6a <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005d6e:	68ba      	ldr	r2, [r7, #8]
 8005d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d72:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d76:	699b      	ldr	r3, [r3, #24]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d10b      	bne.n	8005d94 <prvProcessReceivedCommands+0x124>
	__asm volatile
 8005d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d80:	f383 8811 	msr	BASEPRI, r3
 8005d84:	f3bf 8f6f 	isb	sy
 8005d88:	f3bf 8f4f 	dsb	sy
 8005d8c:	617b      	str	r3, [r7, #20]
}
 8005d8e:	bf00      	nop
 8005d90:	bf00      	nop
 8005d92:	e7fd      	b.n	8005d90 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d96:	699a      	ldr	r2, [r3, #24]
 8005d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d9a:	18d1      	adds	r1, r2, r3
 8005d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005da0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005da2:	f7ff ff23 	bl	8005bec <prvInsertTimerInActiveList>
					break;
 8005da6:	e00d      	b.n	8005dc4 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005daa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d107      	bne.n	8005dc2 <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8005db2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005db4:	f000 fb74 	bl	80064a0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005db8:	e003      	b.n	8005dc2 <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 8005dba:	bf00      	nop
 8005dbc:	e002      	b.n	8005dc4 <prvProcessReceivedCommands+0x154>
					break;
 8005dbe:	bf00      	nop
 8005dc0:	e000      	b.n	8005dc4 <prvProcessReceivedCommands+0x154>
					break;
 8005dc2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005dc4:	4b07      	ldr	r3, [pc, #28]	@ (8005de4 <prvProcessReceivedCommands+0x174>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	1d39      	adds	r1, r7, #4
 8005dca:	2200      	movs	r2, #0
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f7fd ff87 	bl	8003ce0 <xQueueReceive>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f47f af4f 	bne.w	8005c78 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005dda:	bf00      	nop
 8005ddc:	bf00      	nop
 8005dde:	3730      	adds	r7, #48	@ 0x30
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	20000c08 	.word	0x20000c08

08005de8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b088      	sub	sp, #32
 8005dec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005dee:	e046      	b.n	8005e7e <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005df0:	4b2c      	ldr	r3, [pc, #176]	@ (8005ea4 <prvSwitchTimerLists+0xbc>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005dfa:	4b2a      	ldr	r3, [pc, #168]	@ (8005ea4 <prvSwitchTimerLists+0xbc>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	3304      	adds	r3, #4
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f7fd fbeb 	bl	80035e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	69db      	ldr	r3, [r3, #28]
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d12f      	bne.n	8005e7e <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	699b      	ldr	r3, [r3, #24]
 8005e22:	693a      	ldr	r2, [r7, #16]
 8005e24:	4413      	add	r3, r2
 8005e26:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d90e      	bls.n	8005e4e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	68ba      	ldr	r2, [r7, #8]
 8005e34:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005e3c:	4b19      	ldr	r3, [pc, #100]	@ (8005ea4 <prvSwitchTimerLists+0xbc>)
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	3304      	adds	r3, #4
 8005e44:	4619      	mov	r1, r3
 8005e46:	4610      	mov	r0, r2
 8005e48:	f7fd fb94 	bl	8003574 <vListInsert>
 8005e4c:	e017      	b.n	8005e7e <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e4e:	2300      	movs	r3, #0
 8005e50:	9300      	str	r3, [sp, #0]
 8005e52:	2300      	movs	r3, #0
 8005e54:	693a      	ldr	r2, [r7, #16]
 8005e56:	2100      	movs	r1, #0
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f7ff fd91 	bl	8005980 <xTimerGenericCommand>
 8005e5e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d10b      	bne.n	8005e7e <prvSwitchTimerLists+0x96>
	__asm volatile
 8005e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e6a:	f383 8811 	msr	BASEPRI, r3
 8005e6e:	f3bf 8f6f 	isb	sy
 8005e72:	f3bf 8f4f 	dsb	sy
 8005e76:	603b      	str	r3, [r7, #0]
}
 8005e78:	bf00      	nop
 8005e7a:	bf00      	nop
 8005e7c:	e7fd      	b.n	8005e7a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e7e:	4b09      	ldr	r3, [pc, #36]	@ (8005ea4 <prvSwitchTimerLists+0xbc>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d1b3      	bne.n	8005df0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005e88:	4b06      	ldr	r3, [pc, #24]	@ (8005ea4 <prvSwitchTimerLists+0xbc>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005e8e:	4b06      	ldr	r3, [pc, #24]	@ (8005ea8 <prvSwitchTimerLists+0xc0>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a04      	ldr	r2, [pc, #16]	@ (8005ea4 <prvSwitchTimerLists+0xbc>)
 8005e94:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005e96:	4a04      	ldr	r2, [pc, #16]	@ (8005ea8 <prvSwitchTimerLists+0xc0>)
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	6013      	str	r3, [r2, #0]
}
 8005e9c:	bf00      	nop
 8005e9e:	3718      	adds	r7, #24
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	20000c00 	.word	0x20000c00
 8005ea8:	20000c04 	.word	0x20000c04

08005eac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005eb2:	f000 f92b 	bl	800610c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005eb6:	4b15      	ldr	r3, [pc, #84]	@ (8005f0c <prvCheckForValidListAndQueue+0x60>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d120      	bne.n	8005f00 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005ebe:	4814      	ldr	r0, [pc, #80]	@ (8005f10 <prvCheckForValidListAndQueue+0x64>)
 8005ec0:	f7fd fb0a 	bl	80034d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005ec4:	4813      	ldr	r0, [pc, #76]	@ (8005f14 <prvCheckForValidListAndQueue+0x68>)
 8005ec6:	f7fd fb07 	bl	80034d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005eca:	4b13      	ldr	r3, [pc, #76]	@ (8005f18 <prvCheckForValidListAndQueue+0x6c>)
 8005ecc:	4a10      	ldr	r2, [pc, #64]	@ (8005f10 <prvCheckForValidListAndQueue+0x64>)
 8005ece:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005ed0:	4b12      	ldr	r3, [pc, #72]	@ (8005f1c <prvCheckForValidListAndQueue+0x70>)
 8005ed2:	4a10      	ldr	r2, [pc, #64]	@ (8005f14 <prvCheckForValidListAndQueue+0x68>)
 8005ed4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	9300      	str	r3, [sp, #0]
 8005eda:	4b11      	ldr	r3, [pc, #68]	@ (8005f20 <prvCheckForValidListAndQueue+0x74>)
 8005edc:	4a11      	ldr	r2, [pc, #68]	@ (8005f24 <prvCheckForValidListAndQueue+0x78>)
 8005ede:	2110      	movs	r1, #16
 8005ee0:	200a      	movs	r0, #10
 8005ee2:	f7fd fc13 	bl	800370c <xQueueGenericCreateStatic>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	4a08      	ldr	r2, [pc, #32]	@ (8005f0c <prvCheckForValidListAndQueue+0x60>)
 8005eea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005eec:	4b07      	ldr	r3, [pc, #28]	@ (8005f0c <prvCheckForValidListAndQueue+0x60>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d005      	beq.n	8005f00 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005ef4:	4b05      	ldr	r3, [pc, #20]	@ (8005f0c <prvCheckForValidListAndQueue+0x60>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	490b      	ldr	r1, [pc, #44]	@ (8005f28 <prvCheckForValidListAndQueue+0x7c>)
 8005efa:	4618      	mov	r0, r3
 8005efc:	f7fe fa2e 	bl	800435c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f00:	f000 f934 	bl	800616c <vPortExitCritical>
}
 8005f04:	bf00      	nop
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	20000c08 	.word	0x20000c08
 8005f10:	20000bd8 	.word	0x20000bd8
 8005f14:	20000bec 	.word	0x20000bec
 8005f18:	20000c00 	.word	0x20000c00
 8005f1c:	20000c04 	.word	0x20000c04
 8005f20:	20000cb4 	.word	0x20000cb4
 8005f24:	20000c14 	.word	0x20000c14
 8005f28:	080080e0 	.word	0x080080e0

08005f2c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	3b04      	subs	r3, #4
 8005f3c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005f44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	3b04      	subs	r3, #4
 8005f4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	f023 0201 	bic.w	r2, r3, #1
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	3b04      	subs	r3, #4
 8005f5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005f5c:	4a08      	ldr	r2, [pc, #32]	@ (8005f80 <pxPortInitialiseStack+0x54>)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	3b14      	subs	r3, #20
 8005f66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	3b20      	subs	r3, #32
 8005f72:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005f74:	68fb      	ldr	r3, [r7, #12]
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3714      	adds	r7, #20
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bc80      	pop	{r7}
 8005f7e:	4770      	bx	lr
 8005f80:	08005f85 	.word	0x08005f85

08005f84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005f8e:	4b12      	ldr	r3, [pc, #72]	@ (8005fd8 <prvTaskExitError+0x54>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f96:	d00b      	beq.n	8005fb0 <prvTaskExitError+0x2c>
	__asm volatile
 8005f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f9c:	f383 8811 	msr	BASEPRI, r3
 8005fa0:	f3bf 8f6f 	isb	sy
 8005fa4:	f3bf 8f4f 	dsb	sy
 8005fa8:	60fb      	str	r3, [r7, #12]
}
 8005faa:	bf00      	nop
 8005fac:	bf00      	nop
 8005fae:	e7fd      	b.n	8005fac <prvTaskExitError+0x28>
	__asm volatile
 8005fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fb4:	f383 8811 	msr	BASEPRI, r3
 8005fb8:	f3bf 8f6f 	isb	sy
 8005fbc:	f3bf 8f4f 	dsb	sy
 8005fc0:	60bb      	str	r3, [r7, #8]
}
 8005fc2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005fc4:	bf00      	nop
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d0fc      	beq.n	8005fc6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005fcc:	bf00      	nop
 8005fce:	bf00      	nop
 8005fd0:	3714      	adds	r7, #20
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bc80      	pop	{r7}
 8005fd6:	4770      	bx	lr
 8005fd8:	20000010 	.word	0x20000010
 8005fdc:	00000000 	.word	0x00000000

08005fe0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005fe0:	4b07      	ldr	r3, [pc, #28]	@ (8006000 <pxCurrentTCBConst2>)
 8005fe2:	6819      	ldr	r1, [r3, #0]
 8005fe4:	6808      	ldr	r0, [r1, #0]
 8005fe6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005fea:	f380 8809 	msr	PSP, r0
 8005fee:	f3bf 8f6f 	isb	sy
 8005ff2:	f04f 0000 	mov.w	r0, #0
 8005ff6:	f380 8811 	msr	BASEPRI, r0
 8005ffa:	f04e 0e0d 	orr.w	lr, lr, #13
 8005ffe:	4770      	bx	lr

08006000 <pxCurrentTCBConst2>:
 8006000:	200006d8 	.word	0x200006d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006004:	bf00      	nop
 8006006:	bf00      	nop

08006008 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006008:	4806      	ldr	r0, [pc, #24]	@ (8006024 <prvPortStartFirstTask+0x1c>)
 800600a:	6800      	ldr	r0, [r0, #0]
 800600c:	6800      	ldr	r0, [r0, #0]
 800600e:	f380 8808 	msr	MSP, r0
 8006012:	b662      	cpsie	i
 8006014:	b661      	cpsie	f
 8006016:	f3bf 8f4f 	dsb	sy
 800601a:	f3bf 8f6f 	isb	sy
 800601e:	df00      	svc	0
 8006020:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006022:	bf00      	nop
 8006024:	e000ed08 	.word	0xe000ed08

08006028 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800602e:	4b32      	ldr	r3, [pc, #200]	@ (80060f8 <xPortStartScheduler+0xd0>)
 8006030:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	b2db      	uxtb	r3, r3
 8006038:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	22ff      	movs	r2, #255	@ 0xff
 800603e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	b2db      	uxtb	r3, r3
 8006046:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006048:	78fb      	ldrb	r3, [r7, #3]
 800604a:	b2db      	uxtb	r3, r3
 800604c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006050:	b2da      	uxtb	r2, r3
 8006052:	4b2a      	ldr	r3, [pc, #168]	@ (80060fc <xPortStartScheduler+0xd4>)
 8006054:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006056:	4b2a      	ldr	r3, [pc, #168]	@ (8006100 <xPortStartScheduler+0xd8>)
 8006058:	2207      	movs	r2, #7
 800605a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800605c:	e009      	b.n	8006072 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800605e:	4b28      	ldr	r3, [pc, #160]	@ (8006100 <xPortStartScheduler+0xd8>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	3b01      	subs	r3, #1
 8006064:	4a26      	ldr	r2, [pc, #152]	@ (8006100 <xPortStartScheduler+0xd8>)
 8006066:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006068:	78fb      	ldrb	r3, [r7, #3]
 800606a:	b2db      	uxtb	r3, r3
 800606c:	005b      	lsls	r3, r3, #1
 800606e:	b2db      	uxtb	r3, r3
 8006070:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006072:	78fb      	ldrb	r3, [r7, #3]
 8006074:	b2db      	uxtb	r3, r3
 8006076:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800607a:	2b80      	cmp	r3, #128	@ 0x80
 800607c:	d0ef      	beq.n	800605e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800607e:	4b20      	ldr	r3, [pc, #128]	@ (8006100 <xPortStartScheduler+0xd8>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f1c3 0307 	rsb	r3, r3, #7
 8006086:	2b04      	cmp	r3, #4
 8006088:	d00b      	beq.n	80060a2 <xPortStartScheduler+0x7a>
	__asm volatile
 800608a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800608e:	f383 8811 	msr	BASEPRI, r3
 8006092:	f3bf 8f6f 	isb	sy
 8006096:	f3bf 8f4f 	dsb	sy
 800609a:	60bb      	str	r3, [r7, #8]
}
 800609c:	bf00      	nop
 800609e:	bf00      	nop
 80060a0:	e7fd      	b.n	800609e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80060a2:	4b17      	ldr	r3, [pc, #92]	@ (8006100 <xPortStartScheduler+0xd8>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	021b      	lsls	r3, r3, #8
 80060a8:	4a15      	ldr	r2, [pc, #84]	@ (8006100 <xPortStartScheduler+0xd8>)
 80060aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80060ac:	4b14      	ldr	r3, [pc, #80]	@ (8006100 <xPortStartScheduler+0xd8>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80060b4:	4a12      	ldr	r2, [pc, #72]	@ (8006100 <xPortStartScheduler+0xd8>)
 80060b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	b2da      	uxtb	r2, r3
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80060c0:	4b10      	ldr	r3, [pc, #64]	@ (8006104 <xPortStartScheduler+0xdc>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a0f      	ldr	r2, [pc, #60]	@ (8006104 <xPortStartScheduler+0xdc>)
 80060c6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80060ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80060cc:	4b0d      	ldr	r3, [pc, #52]	@ (8006104 <xPortStartScheduler+0xdc>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a0c      	ldr	r2, [pc, #48]	@ (8006104 <xPortStartScheduler+0xdc>)
 80060d2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80060d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80060d8:	f000 f8b8 	bl	800624c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80060dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006108 <xPortStartScheduler+0xe0>)
 80060de:	2200      	movs	r2, #0
 80060e0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80060e2:	f7ff ff91 	bl	8006008 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80060e6:	f7fe fd85 	bl	8004bf4 <vTaskSwitchContext>
	prvTaskExitError();
 80060ea:	f7ff ff4b 	bl	8005f84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3710      	adds	r7, #16
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	e000e400 	.word	0xe000e400
 80060fc:	20000d04 	.word	0x20000d04
 8006100:	20000d08 	.word	0x20000d08
 8006104:	e000ed20 	.word	0xe000ed20
 8006108:	20000010 	.word	0x20000010

0800610c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
	__asm volatile
 8006112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006116:	f383 8811 	msr	BASEPRI, r3
 800611a:	f3bf 8f6f 	isb	sy
 800611e:	f3bf 8f4f 	dsb	sy
 8006122:	607b      	str	r3, [r7, #4]
}
 8006124:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006126:	4b0f      	ldr	r3, [pc, #60]	@ (8006164 <vPortEnterCritical+0x58>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	3301      	adds	r3, #1
 800612c:	4a0d      	ldr	r2, [pc, #52]	@ (8006164 <vPortEnterCritical+0x58>)
 800612e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006130:	4b0c      	ldr	r3, [pc, #48]	@ (8006164 <vPortEnterCritical+0x58>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2b01      	cmp	r3, #1
 8006136:	d110      	bne.n	800615a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006138:	4b0b      	ldr	r3, [pc, #44]	@ (8006168 <vPortEnterCritical+0x5c>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	b2db      	uxtb	r3, r3
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00b      	beq.n	800615a <vPortEnterCritical+0x4e>
	__asm volatile
 8006142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006146:	f383 8811 	msr	BASEPRI, r3
 800614a:	f3bf 8f6f 	isb	sy
 800614e:	f3bf 8f4f 	dsb	sy
 8006152:	603b      	str	r3, [r7, #0]
}
 8006154:	bf00      	nop
 8006156:	bf00      	nop
 8006158:	e7fd      	b.n	8006156 <vPortEnterCritical+0x4a>
	}
}
 800615a:	bf00      	nop
 800615c:	370c      	adds	r7, #12
 800615e:	46bd      	mov	sp, r7
 8006160:	bc80      	pop	{r7}
 8006162:	4770      	bx	lr
 8006164:	20000010 	.word	0x20000010
 8006168:	e000ed04 	.word	0xe000ed04

0800616c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006172:	4b12      	ldr	r3, [pc, #72]	@ (80061bc <vPortExitCritical+0x50>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10b      	bne.n	8006192 <vPortExitCritical+0x26>
	__asm volatile
 800617a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800617e:	f383 8811 	msr	BASEPRI, r3
 8006182:	f3bf 8f6f 	isb	sy
 8006186:	f3bf 8f4f 	dsb	sy
 800618a:	607b      	str	r3, [r7, #4]
}
 800618c:	bf00      	nop
 800618e:	bf00      	nop
 8006190:	e7fd      	b.n	800618e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006192:	4b0a      	ldr	r3, [pc, #40]	@ (80061bc <vPortExitCritical+0x50>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	3b01      	subs	r3, #1
 8006198:	4a08      	ldr	r2, [pc, #32]	@ (80061bc <vPortExitCritical+0x50>)
 800619a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800619c:	4b07      	ldr	r3, [pc, #28]	@ (80061bc <vPortExitCritical+0x50>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d105      	bne.n	80061b0 <vPortExitCritical+0x44>
 80061a4:	2300      	movs	r3, #0
 80061a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	f383 8811 	msr	BASEPRI, r3
}
 80061ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80061b0:	bf00      	nop
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bc80      	pop	{r7}
 80061b8:	4770      	bx	lr
 80061ba:	bf00      	nop
 80061bc:	20000010 	.word	0x20000010

080061c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80061c0:	f3ef 8009 	mrs	r0, PSP
 80061c4:	f3bf 8f6f 	isb	sy
 80061c8:	4b0d      	ldr	r3, [pc, #52]	@ (8006200 <pxCurrentTCBConst>)
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80061d0:	6010      	str	r0, [r2, #0]
 80061d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80061d6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80061da:	f380 8811 	msr	BASEPRI, r0
 80061de:	f7fe fd09 	bl	8004bf4 <vTaskSwitchContext>
 80061e2:	f04f 0000 	mov.w	r0, #0
 80061e6:	f380 8811 	msr	BASEPRI, r0
 80061ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80061ee:	6819      	ldr	r1, [r3, #0]
 80061f0:	6808      	ldr	r0, [r1, #0]
 80061f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80061f6:	f380 8809 	msr	PSP, r0
 80061fa:	f3bf 8f6f 	isb	sy
 80061fe:	4770      	bx	lr

08006200 <pxCurrentTCBConst>:
 8006200:	200006d8 	.word	0x200006d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006204:	bf00      	nop
 8006206:	bf00      	nop

08006208 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
	__asm volatile
 800620e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006212:	f383 8811 	msr	BASEPRI, r3
 8006216:	f3bf 8f6f 	isb	sy
 800621a:	f3bf 8f4f 	dsb	sy
 800621e:	607b      	str	r3, [r7, #4]
}
 8006220:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006222:	f7fe fc27 	bl	8004a74 <xTaskIncrementTick>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d003      	beq.n	8006234 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800622c:	4b06      	ldr	r3, [pc, #24]	@ (8006248 <SysTick_Handler+0x40>)
 800622e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006232:	601a      	str	r2, [r3, #0]
 8006234:	2300      	movs	r3, #0
 8006236:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	f383 8811 	msr	BASEPRI, r3
}
 800623e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006240:	bf00      	nop
 8006242:	3708      	adds	r7, #8
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	e000ed04 	.word	0xe000ed04

0800624c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800624c:	b480      	push	{r7}
 800624e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006250:	4b0a      	ldr	r3, [pc, #40]	@ (800627c <vPortSetupTimerInterrupt+0x30>)
 8006252:	2200      	movs	r2, #0
 8006254:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006256:	4b0a      	ldr	r3, [pc, #40]	@ (8006280 <vPortSetupTimerInterrupt+0x34>)
 8006258:	2200      	movs	r2, #0
 800625a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800625c:	4b09      	ldr	r3, [pc, #36]	@ (8006284 <vPortSetupTimerInterrupt+0x38>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a09      	ldr	r2, [pc, #36]	@ (8006288 <vPortSetupTimerInterrupt+0x3c>)
 8006262:	fba2 2303 	umull	r2, r3, r2, r3
 8006266:	099b      	lsrs	r3, r3, #6
 8006268:	4a08      	ldr	r2, [pc, #32]	@ (800628c <vPortSetupTimerInterrupt+0x40>)
 800626a:	3b01      	subs	r3, #1
 800626c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800626e:	4b03      	ldr	r3, [pc, #12]	@ (800627c <vPortSetupTimerInterrupt+0x30>)
 8006270:	2207      	movs	r2, #7
 8006272:	601a      	str	r2, [r3, #0]
}
 8006274:	bf00      	nop
 8006276:	46bd      	mov	sp, r7
 8006278:	bc80      	pop	{r7}
 800627a:	4770      	bx	lr
 800627c:	e000e010 	.word	0xe000e010
 8006280:	e000e018 	.word	0xe000e018
 8006284:	20000004 	.word	0x20000004
 8006288:	10624dd3 	.word	0x10624dd3
 800628c:	e000e014 	.word	0xe000e014

08006290 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006296:	f3ef 8305 	mrs	r3, IPSR
 800629a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2b0f      	cmp	r3, #15
 80062a0:	d915      	bls.n	80062ce <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80062a2:	4a17      	ldr	r2, [pc, #92]	@ (8006300 <vPortValidateInterruptPriority+0x70>)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	4413      	add	r3, r2
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80062ac:	4b15      	ldr	r3, [pc, #84]	@ (8006304 <vPortValidateInterruptPriority+0x74>)
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	7afa      	ldrb	r2, [r7, #11]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d20b      	bcs.n	80062ce <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80062b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ba:	f383 8811 	msr	BASEPRI, r3
 80062be:	f3bf 8f6f 	isb	sy
 80062c2:	f3bf 8f4f 	dsb	sy
 80062c6:	607b      	str	r3, [r7, #4]
}
 80062c8:	bf00      	nop
 80062ca:	bf00      	nop
 80062cc:	e7fd      	b.n	80062ca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80062ce:	4b0e      	ldr	r3, [pc, #56]	@ (8006308 <vPortValidateInterruptPriority+0x78>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80062d6:	4b0d      	ldr	r3, [pc, #52]	@ (800630c <vPortValidateInterruptPriority+0x7c>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d90b      	bls.n	80062f6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80062de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e2:	f383 8811 	msr	BASEPRI, r3
 80062e6:	f3bf 8f6f 	isb	sy
 80062ea:	f3bf 8f4f 	dsb	sy
 80062ee:	603b      	str	r3, [r7, #0]
}
 80062f0:	bf00      	nop
 80062f2:	bf00      	nop
 80062f4:	e7fd      	b.n	80062f2 <vPortValidateInterruptPriority+0x62>
	}
 80062f6:	bf00      	nop
 80062f8:	3714      	adds	r7, #20
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bc80      	pop	{r7}
 80062fe:	4770      	bx	lr
 8006300:	e000e3f0 	.word	0xe000e3f0
 8006304:	20000d04 	.word	0x20000d04
 8006308:	e000ed0c 	.word	0xe000ed0c
 800630c:	20000d08 	.word	0x20000d08

08006310 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b08a      	sub	sp, #40	@ 0x28
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006318:	2300      	movs	r3, #0
 800631a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800631c:	f7fe fade 	bl	80048dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006320:	4b5a      	ldr	r3, [pc, #360]	@ (800648c <pvPortMalloc+0x17c>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d101      	bne.n	800632c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006328:	f000 f916 	bl	8006558 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800632c:	4b58      	ldr	r3, [pc, #352]	@ (8006490 <pvPortMalloc+0x180>)
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4013      	ands	r3, r2
 8006334:	2b00      	cmp	r3, #0
 8006336:	f040 8090 	bne.w	800645a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d01e      	beq.n	800637e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006340:	2208      	movs	r2, #8
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4413      	add	r3, r2
 8006346:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f003 0307 	and.w	r3, r3, #7
 800634e:	2b00      	cmp	r3, #0
 8006350:	d015      	beq.n	800637e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f023 0307 	bic.w	r3, r3, #7
 8006358:	3308      	adds	r3, #8
 800635a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f003 0307 	and.w	r3, r3, #7
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00b      	beq.n	800637e <pvPortMalloc+0x6e>
	__asm volatile
 8006366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800636a:	f383 8811 	msr	BASEPRI, r3
 800636e:	f3bf 8f6f 	isb	sy
 8006372:	f3bf 8f4f 	dsb	sy
 8006376:	617b      	str	r3, [r7, #20]
}
 8006378:	bf00      	nop
 800637a:	bf00      	nop
 800637c:	e7fd      	b.n	800637a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d06a      	beq.n	800645a <pvPortMalloc+0x14a>
 8006384:	4b43      	ldr	r3, [pc, #268]	@ (8006494 <pvPortMalloc+0x184>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	429a      	cmp	r2, r3
 800638c:	d865      	bhi.n	800645a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800638e:	4b42      	ldr	r3, [pc, #264]	@ (8006498 <pvPortMalloc+0x188>)
 8006390:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006392:	4b41      	ldr	r3, [pc, #260]	@ (8006498 <pvPortMalloc+0x188>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006398:	e004      	b.n	80063a4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800639a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800639c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800639e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d903      	bls.n	80063b6 <pvPortMalloc+0xa6>
 80063ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d1f1      	bne.n	800639a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80063b6:	4b35      	ldr	r3, [pc, #212]	@ (800648c <pvPortMalloc+0x17c>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063bc:	429a      	cmp	r2, r3
 80063be:	d04c      	beq.n	800645a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80063c0:	6a3b      	ldr	r3, [r7, #32]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2208      	movs	r2, #8
 80063c6:	4413      	add	r3, r2
 80063c8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80063ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	6a3b      	ldr	r3, [r7, #32]
 80063d0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80063d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d4:	685a      	ldr	r2, [r3, #4]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	1ad2      	subs	r2, r2, r3
 80063da:	2308      	movs	r3, #8
 80063dc:	005b      	lsls	r3, r3, #1
 80063de:	429a      	cmp	r2, r3
 80063e0:	d920      	bls.n	8006424 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80063e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4413      	add	r3, r2
 80063e8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	f003 0307 	and.w	r3, r3, #7
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00b      	beq.n	800640c <pvPortMalloc+0xfc>
	__asm volatile
 80063f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f8:	f383 8811 	msr	BASEPRI, r3
 80063fc:	f3bf 8f6f 	isb	sy
 8006400:	f3bf 8f4f 	dsb	sy
 8006404:	613b      	str	r3, [r7, #16]
}
 8006406:	bf00      	nop
 8006408:	bf00      	nop
 800640a:	e7fd      	b.n	8006408 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800640c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800640e:	685a      	ldr	r2, [r3, #4]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	1ad2      	subs	r2, r2, r3
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800641e:	69b8      	ldr	r0, [r7, #24]
 8006420:	f000 f8fc 	bl	800661c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006424:	4b1b      	ldr	r3, [pc, #108]	@ (8006494 <pvPortMalloc+0x184>)
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	4a19      	ldr	r2, [pc, #100]	@ (8006494 <pvPortMalloc+0x184>)
 8006430:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006432:	4b18      	ldr	r3, [pc, #96]	@ (8006494 <pvPortMalloc+0x184>)
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	4b19      	ldr	r3, [pc, #100]	@ (800649c <pvPortMalloc+0x18c>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	429a      	cmp	r2, r3
 800643c:	d203      	bcs.n	8006446 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800643e:	4b15      	ldr	r3, [pc, #84]	@ (8006494 <pvPortMalloc+0x184>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a16      	ldr	r2, [pc, #88]	@ (800649c <pvPortMalloc+0x18c>)
 8006444:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006448:	685a      	ldr	r2, [r3, #4]
 800644a:	4b11      	ldr	r3, [pc, #68]	@ (8006490 <pvPortMalloc+0x180>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	431a      	orrs	r2, r3
 8006450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006452:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006456:	2200      	movs	r2, #0
 8006458:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800645a:	f7fe fa4d 	bl	80048f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	f003 0307 	and.w	r3, r3, #7
 8006464:	2b00      	cmp	r3, #0
 8006466:	d00b      	beq.n	8006480 <pvPortMalloc+0x170>
	__asm volatile
 8006468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800646c:	f383 8811 	msr	BASEPRI, r3
 8006470:	f3bf 8f6f 	isb	sy
 8006474:	f3bf 8f4f 	dsb	sy
 8006478:	60fb      	str	r3, [r7, #12]
}
 800647a:	bf00      	nop
 800647c:	bf00      	nop
 800647e:	e7fd      	b.n	800647c <pvPortMalloc+0x16c>
	return pvReturn;
 8006480:	69fb      	ldr	r3, [r7, #28]
}
 8006482:	4618      	mov	r0, r3
 8006484:	3728      	adds	r7, #40	@ 0x28
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	20001914 	.word	0x20001914
 8006490:	20001920 	.word	0x20001920
 8006494:	20001918 	.word	0x20001918
 8006498:	2000190c 	.word	0x2000190c
 800649c:	2000191c 	.word	0x2000191c

080064a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b086      	sub	sp, #24
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d04a      	beq.n	8006548 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80064b2:	2308      	movs	r3, #8
 80064b4:	425b      	negs	r3, r3
 80064b6:	697a      	ldr	r2, [r7, #20]
 80064b8:	4413      	add	r3, r2
 80064ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	685a      	ldr	r2, [r3, #4]
 80064c4:	4b22      	ldr	r3, [pc, #136]	@ (8006550 <vPortFree+0xb0>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4013      	ands	r3, r2
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d10b      	bne.n	80064e6 <vPortFree+0x46>
	__asm volatile
 80064ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064d2:	f383 8811 	msr	BASEPRI, r3
 80064d6:	f3bf 8f6f 	isb	sy
 80064da:	f3bf 8f4f 	dsb	sy
 80064de:	60fb      	str	r3, [r7, #12]
}
 80064e0:	bf00      	nop
 80064e2:	bf00      	nop
 80064e4:	e7fd      	b.n	80064e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00b      	beq.n	8006506 <vPortFree+0x66>
	__asm volatile
 80064ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064f2:	f383 8811 	msr	BASEPRI, r3
 80064f6:	f3bf 8f6f 	isb	sy
 80064fa:	f3bf 8f4f 	dsb	sy
 80064fe:	60bb      	str	r3, [r7, #8]
}
 8006500:	bf00      	nop
 8006502:	bf00      	nop
 8006504:	e7fd      	b.n	8006502 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	685a      	ldr	r2, [r3, #4]
 800650a:	4b11      	ldr	r3, [pc, #68]	@ (8006550 <vPortFree+0xb0>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4013      	ands	r3, r2
 8006510:	2b00      	cmp	r3, #0
 8006512:	d019      	beq.n	8006548 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d115      	bne.n	8006548 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	685a      	ldr	r2, [r3, #4]
 8006520:	4b0b      	ldr	r3, [pc, #44]	@ (8006550 <vPortFree+0xb0>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	43db      	mvns	r3, r3
 8006526:	401a      	ands	r2, r3
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800652c:	f7fe f9d6 	bl	80048dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	685a      	ldr	r2, [r3, #4]
 8006534:	4b07      	ldr	r3, [pc, #28]	@ (8006554 <vPortFree+0xb4>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4413      	add	r3, r2
 800653a:	4a06      	ldr	r2, [pc, #24]	@ (8006554 <vPortFree+0xb4>)
 800653c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800653e:	6938      	ldr	r0, [r7, #16]
 8006540:	f000 f86c 	bl	800661c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006544:	f7fe f9d8 	bl	80048f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006548:	bf00      	nop
 800654a:	3718      	adds	r7, #24
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	20001920 	.word	0x20001920
 8006554:	20001918 	.word	0x20001918

08006558 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800655e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006562:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006564:	4b27      	ldr	r3, [pc, #156]	@ (8006604 <prvHeapInit+0xac>)
 8006566:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f003 0307 	and.w	r3, r3, #7
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00c      	beq.n	800658c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	3307      	adds	r3, #7
 8006576:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f023 0307 	bic.w	r3, r3, #7
 800657e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006580:	68ba      	ldr	r2, [r7, #8]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	4a1f      	ldr	r2, [pc, #124]	@ (8006604 <prvHeapInit+0xac>)
 8006588:	4413      	add	r3, r2
 800658a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006590:	4a1d      	ldr	r2, [pc, #116]	@ (8006608 <prvHeapInit+0xb0>)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006596:	4b1c      	ldr	r3, [pc, #112]	@ (8006608 <prvHeapInit+0xb0>)
 8006598:	2200      	movs	r2, #0
 800659a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	68ba      	ldr	r2, [r7, #8]
 80065a0:	4413      	add	r3, r2
 80065a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80065a4:	2208      	movs	r2, #8
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	1a9b      	subs	r3, r3, r2
 80065aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f023 0307 	bic.w	r3, r3, #7
 80065b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	4a15      	ldr	r2, [pc, #84]	@ (800660c <prvHeapInit+0xb4>)
 80065b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80065ba:	4b14      	ldr	r3, [pc, #80]	@ (800660c <prvHeapInit+0xb4>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2200      	movs	r2, #0
 80065c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80065c2:	4b12      	ldr	r3, [pc, #72]	@ (800660c <prvHeapInit+0xb4>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	2200      	movs	r2, #0
 80065c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	1ad2      	subs	r2, r2, r3
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80065d8:	4b0c      	ldr	r3, [pc, #48]	@ (800660c <prvHeapInit+0xb4>)
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	4a0a      	ldr	r2, [pc, #40]	@ (8006610 <prvHeapInit+0xb8>)
 80065e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	4a09      	ldr	r2, [pc, #36]	@ (8006614 <prvHeapInit+0xbc>)
 80065ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80065f0:	4b09      	ldr	r3, [pc, #36]	@ (8006618 <prvHeapInit+0xc0>)
 80065f2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80065f6:	601a      	str	r2, [r3, #0]
}
 80065f8:	bf00      	nop
 80065fa:	3714      	adds	r7, #20
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bc80      	pop	{r7}
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	20000d0c 	.word	0x20000d0c
 8006608:	2000190c 	.word	0x2000190c
 800660c:	20001914 	.word	0x20001914
 8006610:	2000191c 	.word	0x2000191c
 8006614:	20001918 	.word	0x20001918
 8006618:	20001920 	.word	0x20001920

0800661c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006624:	4b27      	ldr	r3, [pc, #156]	@ (80066c4 <prvInsertBlockIntoFreeList+0xa8>)
 8006626:	60fb      	str	r3, [r7, #12]
 8006628:	e002      	b.n	8006630 <prvInsertBlockIntoFreeList+0x14>
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	60fb      	str	r3, [r7, #12]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	429a      	cmp	r2, r3
 8006638:	d8f7      	bhi.n	800662a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	68ba      	ldr	r2, [r7, #8]
 8006644:	4413      	add	r3, r2
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	429a      	cmp	r2, r3
 800664a:	d108      	bne.n	800665e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	685a      	ldr	r2, [r3, #4]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	441a      	add	r2, r3
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	441a      	add	r2, r3
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	429a      	cmp	r2, r3
 8006670:	d118      	bne.n	80066a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	4b14      	ldr	r3, [pc, #80]	@ (80066c8 <prvInsertBlockIntoFreeList+0xac>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	429a      	cmp	r2, r3
 800667c:	d00d      	beq.n	800669a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	685a      	ldr	r2, [r3, #4]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	441a      	add	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	601a      	str	r2, [r3, #0]
 8006698:	e008      	b.n	80066ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800669a:	4b0b      	ldr	r3, [pc, #44]	@ (80066c8 <prvInsertBlockIntoFreeList+0xac>)
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	601a      	str	r2, [r3, #0]
 80066a2:	e003      	b.n	80066ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d002      	beq.n	80066ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066ba:	bf00      	nop
 80066bc:	3714      	adds	r7, #20
 80066be:	46bd      	mov	sp, r7
 80066c0:	bc80      	pop	{r7}
 80066c2:	4770      	bx	lr
 80066c4:	2000190c 	.word	0x2000190c
 80066c8:	20001914 	.word	0x20001914

080066cc <RingAdd>:


/* Ring Buffer functions */
// This function must be called only after disabling USART RX interrupt or inside of the RX interrupt
void RingAdd(modbusRingBuffer_t *xRingBuffer, uint8_t u8Val)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	460b      	mov	r3, r1
 80066d6:	70fb      	strb	r3, [r7, #3]

	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80066de:	4619      	mov	r1, r3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	78fa      	ldrb	r2, [r7, #3]
 80066e4:	545a      	strb	r2, [r3, r1]
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80066ec:	3301      	adds	r3, #1
 80066ee:	425a      	negs	r2, r3
 80066f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066f4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80066f8:	bf58      	it	pl
 80066fa:	4253      	negpl	r3, r2
 80066fc:	b2da      	uxtb	r2, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	if (xRingBuffer->u8available == MAX_BUFFER)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 800670a:	2b80      	cmp	r3, #128	@ 0x80
 800670c:	d113      	bne.n	8006736 <RingAdd+0x6a>
	{
		xRingBuffer->overflow = true;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2201      	movs	r2, #1
 8006712:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800671c:	3301      	adds	r3, #1
 800671e:	425a      	negs	r2, r3
 8006720:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006724:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006728:	bf58      	it	pl
 800672a:	4253      	negpl	r3, r2
 800672c:	b2da      	uxtb	r2, r3
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	{
		xRingBuffer->overflow = false;
		xRingBuffer->u8available++;
	}

}
 8006734:	e00b      	b.n	800674e <RingAdd+0x82>
		xRingBuffer->overflow = false;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
		xRingBuffer->u8available++;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8006744:	3301      	adds	r3, #1
 8006746:	b2da      	uxtb	r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
}
 800674e:	bf00      	nop
 8006750:	370c      	adds	r7, #12
 8006752:	46bd      	mov	sp, r7
 8006754:	bc80      	pop	{r7}
 8006756:	4770      	bx	lr

08006758 <RingGetAllBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetAllBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8006768:	461a      	mov	r2, r3
 800676a:	6839      	ldr	r1, [r7, #0]
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 f805 	bl	800677c <RingGetNBytes>
 8006772:	4603      	mov	r3, r0
}
 8006774:	4618      	mov	r0, r3
 8006776:	3708      	adds	r7, #8
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <RingGetNBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetNBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer, uint8_t uNumber)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b086      	sub	sp, #24
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	4613      	mov	r3, r2
 8006788:	71fb      	strb	r3, [r7, #7]
	uint8_t uCounter;
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8006790:	2b00      	cmp	r3, #0
 8006792:	d002      	beq.n	800679a <RingGetNBytes+0x1e>
 8006794:	79fb      	ldrb	r3, [r7, #7]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d101      	bne.n	800679e <RingGetNBytes+0x22>
 800679a:	2300      	movs	r3, #0
 800679c:	e03e      	b.n	800681c <RingGetNBytes+0xa0>
	if(uNumber > MAX_BUFFER) return 0;
 800679e:	79fb      	ldrb	r3, [r7, #7]
 80067a0:	2b80      	cmp	r3, #128	@ 0x80
 80067a2:	d901      	bls.n	80067a8 <RingGetNBytes+0x2c>
 80067a4:	2300      	movs	r3, #0
 80067a6:	e039      	b.n	800681c <RingGetNBytes+0xa0>

	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 80067a8:	2300      	movs	r3, #0
 80067aa:	75fb      	strb	r3, [r7, #23]
 80067ac:	e01b      	b.n	80067e6 <RingGetNBytes+0x6a>
	{
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80067b4:	4619      	mov	r1, r3
 80067b6:	7dfb      	ldrb	r3, [r7, #23]
 80067b8:	68ba      	ldr	r2, [r7, #8]
 80067ba:	4413      	add	r3, r2
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	5c52      	ldrb	r2, [r2, r1]
 80067c0:	701a      	strb	r2, [r3, #0]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80067c8:	3301      	adds	r3, #1
 80067ca:	425a      	negs	r2, r3
 80067cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067d0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80067d4:	bf58      	it	pl
 80067d6:	4253      	negpl	r3, r2
 80067d8:	b2da      	uxtb	r2, r3
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 80067e0:	7dfb      	ldrb	r3, [r7, #23]
 80067e2:	3301      	adds	r3, #1
 80067e4:	75fb      	strb	r3, [r7, #23]
 80067e6:	7dfa      	ldrb	r2, [r7, #23]
 80067e8:	79fb      	ldrb	r3, [r7, #7]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d205      	bcs.n	80067fa <RingGetNBytes+0x7e>
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 80067f4:	7dfa      	ldrb	r2, [r7, #23]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d3d9      	bcc.n	80067ae <RingGetNBytes+0x32>
	}
	xRingBuffer->u8available = xRingBuffer->u8available - uCounter;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f893 2082 	ldrb.w	r2, [r3, #130]	@ 0x82
 8006800:	7dfb      	ldrb	r3, [r7, #23]
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	b2da      	uxtb	r2, r3
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
	xRingBuffer->overflow = false;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2200      	movs	r2, #0
 8006810:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
	RingClear(xRingBuffer);
 8006814:	68f8      	ldr	r0, [r7, #12]
 8006816:	f000 f805 	bl	8006824 <RingClear>

	return uCounter;
 800681a:	7dfb      	ldrb	r3, [r7, #23]
}
 800681c:	4618      	mov	r0, r3
 800681e:	3718      	adds	r7, #24
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <RingClear>:
{
return xRingBuffer->u8available;
}

void RingClear(modbusRingBuffer_t *xRingBuffer)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
xRingBuffer->u8start = 0;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
xRingBuffer->u8end = 0;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
xRingBuffer->u8available = 0;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
xRingBuffer->overflow = false;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	bc80      	pop	{r7}
 8006854:	4770      	bx	lr
	...

08006858 <ModbusInit>:
 * of the modbus handler
 *
 * @param modH   modbus handler
 */
void ModbusInit(modbusHandler_t * modH)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af02      	add	r7, sp, #8
 800685e:	6078      	str	r0, [r7, #4]

  if (numberHandlers < MAX_M_HANDLERS)
 8006860:	4b45      	ldr	r3, [pc, #276]	@ (8006978 <ModbusInit+0x120>)
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	2b01      	cmp	r3, #1
 8006866:	f200 8083 	bhi.w	8006970 <ModbusInit+0x118>
  {

	  //Initialize the ring buffer

	  RingClear(&modH->xBufferRX);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	33c0      	adds	r3, #192	@ 0xc0
 800686e:	4618      	mov	r0, r3
 8006870:	f7ff ffd8 	bl	8006824 <RingClear>

	  if(modH->uModbusType == MB_SLAVE)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	2b03      	cmp	r3, #3
 800687a:	d109      	bne.n	8006890 <ModbusInit+0x38>
		  }
		  else{
			  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
		  }
#else
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 800687c:	4a3f      	ldr	r2, [pc, #252]	@ (800697c <ModbusInit+0x124>)
 800687e:	6879      	ldr	r1, [r7, #4]
 8006880:	483f      	ldr	r0, [pc, #252]	@ (8006980 <ModbusInit+0x128>)
 8006882:	f7fc fbd9 	bl	8003038 <osThreadNew>
 8006886:	4602      	mov	r2, r0
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 800688e:	e035      	b.n	80068fc <ModbusInit+0xa4>
#endif


	  }
	  else if (modH->uModbusType == MB_MASTER)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	2b04      	cmp	r3, #4
 8006896:	d130      	bne.n	80068fa <ModbusInit+0xa2>
		  else
		  {
		     modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
		  }
#else
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 8006898:	4a3a      	ldr	r2, [pc, #232]	@ (8006984 <ModbusInit+0x12c>)
 800689a:	6879      	ldr	r1, [r7, #4]
 800689c:	483a      	ldr	r0, [pc, #232]	@ (8006988 <ModbusInit+0x130>)
 800689e:	f7fc fbcb 	bl	8003038 <osThreadNew>
 80068a2:	4602      	mov	r2, r0
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
#endif



		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
				  	  	modH->u16timeOut ,     		// The timer period in ticks.
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	@ 0xa2
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 80068b0:	4619      	mov	r1, r3
						pdFALSE,         // The timers will auto-reload themselves when they expire.
						( void * )modH->xTimerTimeout,     // Assign each timer a unique id equal to its array index.
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 80068b8:	4a34      	ldr	r2, [pc, #208]	@ (800698c <ModbusInit+0x134>)
 80068ba:	9200      	str	r2, [sp, #0]
 80068bc:	2200      	movs	r2, #0
 80068be:	4834      	ldr	r0, [pc, #208]	@ (8006990 <ModbusInit+0x138>)
 80068c0:	f7ff f80a 	bl	80058d8 <xTimerCreate>
 80068c4:	4602      	mov	r2, r0
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
						(TimerCallbackFunction_t) vTimerCallbackTimeout  // Each timer calls the same callback when it expires.
                  	  	);

		  if(modH->xTimerTimeout == NULL)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d101      	bne.n	80068da <ModbusInit+0x82>
		  {
			  while(1); //error creating timer, check heap and stack size
 80068d6:	bf00      	nop
 80068d8:	e7fd      	b.n	80068d6 <ModbusInit+0x7e>
		  }


		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 80068da:	4a2e      	ldr	r2, [pc, #184]	@ (8006994 <ModbusInit+0x13c>)
 80068dc:	2110      	movs	r1, #16
 80068de:	2002      	movs	r0, #2
 80068e0:	f7fc fd44 	bl	800336c <osMessageQueueNew>
 80068e4:	4602      	mov	r2, r0
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

		  if(modH->QueueTelegramHandle == NULL)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d102      	bne.n	80068fc <ModbusInit+0xa4>
		  {
			  while(1); //error creating queue for telegrams, check heap and stack size
 80068f6:	bf00      	nop
 80068f8:	e7fd      	b.n	80068f6 <ModbusInit+0x9e>
		  }

	  }
	  else
	  {
		  while(1); //Error Modbus type not supported choose a valid Type
 80068fa:	e7fe      	b.n	80068fa <ModbusInit+0xa2>
	  }

	  if  (modH->myTaskModbusAHandle == NULL)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d101      	bne.n	800690a <ModbusInit+0xb2>
	  {
		  while(1); //Error creating Modbus task, check heap and stack size
 8006906:	bf00      	nop
 8006908:	e7fd      	b.n	8006906 <ModbusInit+0xae>


	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
		  	  	  	  	  	  	  	T35 ,     // The timer period in ticks.
                                    pdFALSE,         // The timers will auto-reload themselves when they expire.
									( void * )modH->xTimerT35,     // Assign each timer a unique id equal to its array index.
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 8006910:	4a21      	ldr	r2, [pc, #132]	@ (8006998 <ModbusInit+0x140>)
 8006912:	9200      	str	r2, [sp, #0]
 8006914:	2200      	movs	r2, #0
 8006916:	2103      	movs	r1, #3
 8006918:	4820      	ldr	r0, [pc, #128]	@ (800699c <ModbusInit+0x144>)
 800691a:	f7fe ffdd 	bl	80058d8 <xTimerCreate>
 800691e:	4602      	mov	r2, r0
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
                                    (TimerCallbackFunction_t) vTimerCallbackT35     // Each timer calls the same callback when it expires.
                                    );
	  if (modH->xTimerT35 == NULL)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800692c:	2b00      	cmp	r3, #0
 800692e:	d101      	bne.n	8006934 <ModbusInit+0xdc>
	  {
		  while(1); //Error creating the timer, check heap and stack size
 8006930:	bf00      	nop
 8006932:	e7fd      	b.n	8006930 <ModbusInit+0xd8>
	  }


	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);
 8006934:	4a1a      	ldr	r2, [pc, #104]	@ (80069a0 <ModbusInit+0x148>)
 8006936:	2101      	movs	r1, #1
 8006938:	2001      	movs	r0, #1
 800693a:	f7fc fc7b 	bl	8003234 <osSemaphoreNew>
 800693e:	4602      	mov	r2, r0
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

	  if(modH->ModBusSphrHandle == NULL)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800694c:	2b00      	cmp	r3, #0
 800694e:	d101      	bne.n	8006954 <ModbusInit+0xfc>
	  {
		  while(1); //Error creating the semaphore, check heap and stack size
 8006950:	bf00      	nop
 8006952:	e7fd      	b.n	8006950 <ModbusInit+0xf8>
	  }

	  mHandlers[numberHandlers] = modH;
 8006954:	4b08      	ldr	r3, [pc, #32]	@ (8006978 <ModbusInit+0x120>)
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	4619      	mov	r1, r3
 800695a:	4a12      	ldr	r2, [pc, #72]	@ (80069a4 <ModbusInit+0x14c>)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  numberHandlers++;
 8006962:	4b05      	ldr	r3, [pc, #20]	@ (8006978 <ModbusInit+0x120>)
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	3301      	adds	r3, #1
 8006968:	b2da      	uxtb	r2, r3
 800696a:	4b03      	ldr	r3, [pc, #12]	@ (8006978 <ModbusInit+0x120>)
 800696c:	701a      	strb	r2, [r3, #0]
  else
  {
	  while(1); //error no more Modbus handlers supported
  }

}
 800696e:	e000      	b.n	8006972 <ModbusInit+0x11a>
	  while(1); //error no more Modbus handlers supported
 8006970:	e7fe      	b.n	8006970 <ModbusInit+0x118>
}
 8006972:	3708      	adds	r7, #8
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}
 8006978:	2000192c 	.word	0x2000192c
 800697c:	080081f8 	.word	0x080081f8
 8006980:	08006b9d 	.word	0x08006b9d
 8006984:	0800821c 	.word	0x0800821c
 8006988:	08007091 	.word	0x08007091
 800698c:	08006b41 	.word	0x08006b41
 8006990:	0800812c 	.word	0x0800812c
 8006994:	080081e0 	.word	0x080081e0
 8006998:	08006abd 	.word	0x08006abd
 800699c:	0800813c 	.word	0x0800813c
 80069a0:	08008240 	.word	0x08008240
 80069a4:	20001924 	.word	0x20001924

080069a8 <ModbusStart>:
 * ModbusRtu's own begin() functions.)
 *
 * @ingroup setup
 */
void ModbusStart(modbusHandler_t * modH)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]

	if(modH->xTypeHW != USART_HW && modH->xTypeHW != TCP_HW && modH->xTypeHW != USB_CDC_HW  && modH->xTypeHW != USART_HW_DMA )
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d010      	beq.n	80069dc <ModbusStart+0x34>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 80069c0:	2b03      	cmp	r3, #3
 80069c2:	d00b      	beq.n	80069dc <ModbusStart+0x34>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d006      	beq.n	80069dc <ModbusStart+0x34>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 80069d4:	2b04      	cmp	r3, #4
 80069d6:	d001      	beq.n	80069dc <ModbusStart+0x34>
	{

		while(1); //ERROR select the type of hardware
 80069d8:	bf00      	nop
 80069da:	e7fd      	b.n	80069d8 <ModbusStart+0x30>
	}

	if (modH->xTypeHW == USART_HW_DMA && ENABLE_USART_DMA == 0  )
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 80069e2:	2b04      	cmp	r3, #4
 80069e4:	d101      	bne.n	80069ea <ModbusStart+0x42>
	{
		while(1); //ERROR To use USART_HW_DMA you need to enable it in the ModbusConfig.h file
 80069e6:	bf00      	nop
 80069e8:	e7fd      	b.n	80069e6 <ModbusStart+0x3e>
	}



	if (modH->xTypeHW == USART_HW || modH->xTypeHW ==  USART_HW_DMA )
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d004      	beq.n	80069fe <ModbusStart+0x56>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 80069fa:	2b04      	cmp	r3, #4
 80069fc:	d140      	bne.n	8006a80 <ModbusStart+0xd8>
	{

	      if (modH->EN_Port != NULL )
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d007      	beq.n	8006a16 <ModbusStart+0x6e>
          {
              // return RS485 transceiver to transmit mode
          	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	68d8      	ldr	r0, [r3, #12]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	8a1b      	ldrh	r3, [r3, #16]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	4619      	mov	r1, r3
 8006a12:	f7fa fcda 	bl	80013ca <HAL_GPIO_WritePin>
          }

          if (modH->uModbusType == MB_SLAVE &&  modH->u16regs == NULL )
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	2b03      	cmp	r3, #3
 8006a1c:	d106      	bne.n	8006a2c <ModbusStart+0x84>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d101      	bne.n	8006a2c <ModbusStart+0x84>
          {
          	while(1); //ERROR define the DATA pointer shared through Modbus
 8006a28:	bf00      	nop
 8006a2a:	e7fd      	b.n	8006a28 <ModbusStart+0x80>
          }

          //check that port is initialized
          while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
 8006a2c:	bf00      	nop
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	4618      	mov	r0, r3
 8006a34:	f7fc f803 	bl	8002a3e <HAL_UART_GetState>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b20      	cmp	r3, #32
 8006a3c:	d1f7      	bne.n	8006a2e <ModbusStart+0x86>
          }


#else
          // Receive data from serial port for Modbus using interrupt
          if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6858      	ldr	r0, [r3, #4]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	33a6      	adds	r3, #166	@ 0xa6
 8006a46:	2201      	movs	r2, #1
 8006a48:	4619      	mov	r1, r3
 8006a4a:	f7fb fc0c 	bl	8002266 <HAL_UART_Receive_IT>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d001      	beq.n	8006a58 <ModbusStart+0xb0>
          {
                while(1)
 8006a54:	bf00      	nop
 8006a56:	e7fd      	b.n	8006a54 <ModbusStart+0xac>
                 }
          }

#endif

          if(modH->u8id !=0 && modH->uModbusType == MB_MASTER )
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	7a1b      	ldrb	r3, [r3, #8]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d005      	beq.n	8006a6c <ModbusStart+0xc4>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	2b04      	cmp	r3, #4
 8006a66:	d101      	bne.n	8006a6c <ModbusStart+0xc4>
          {
        	  while(1)
 8006a68:	bf00      	nop
 8006a6a:	e7fd      	b.n	8006a68 <ModbusStart+0xc0>
        	     	  //error Master ID must be zero
        	  }

          }

          if(modH->u8id ==0 && modH->uModbusType == MB_SLAVE )
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	7a1b      	ldrb	r3, [r3, #8]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d105      	bne.n	8006a80 <ModbusStart+0xd8>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	2b03      	cmp	r3, #3
 8006a7a:	d101      	bne.n	8006a80 <ModbusStart+0xd8>
          {
             	  while(1)
 8006a7c:	bf00      	nop
 8006a7e:	e7fd      	b.n	8006a7c <ModbusStart+0xd4>


#endif


    modH->u8lastRec = modH->u8BufferSize = 0;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f893 2093 	ldrb.w	r2, [r3, #147]	@ 0x93
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	@ 0xa0
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8b3 209e 	ldrh.w	r2, [r3, #158]	@ 0x9e
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

}
 8006ab4:	bf00      	nop
 8006ab6:	3708      	adds	r7, #8
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <vTimerCallbackT35>:
}
#endif


void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b086      	sub	sp, #24
 8006ac0:	af02      	add	r7, sp, #8
 8006ac2:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	60fb      	str	r3, [r7, #12]
 8006ac8:	e02a      	b.n	8006b20 <vTimerCallbackT35+0x64>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 8006aca:	4a1b      	ldr	r2, [pc, #108]	@ (8006b38 <vTimerCallbackT35+0x7c>)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ad2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d11e      	bne.n	8006b1a <vTimerCallbackT35+0x5e>
			if(mHandlers[i]->uModbusType == MB_MASTER)
 8006adc:	4a16      	ldr	r2, [pc, #88]	@ (8006b38 <vTimerCallbackT35+0x7c>)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	2b04      	cmp	r3, #4
 8006ae8:	d10c      	bne.n	8006b04 <vTimerCallbackT35+0x48>
			{
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 8006aea:	4a13      	ldr	r2, [pc, #76]	@ (8006b38 <vTimerCallbackT35+0x7c>)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006af2:	f8d3 00b8 	ldr.w	r0, [r3, #184]	@ 0xb8
 8006af6:	2300      	movs	r3, #0
 8006af8:	9300      	str	r3, [sp, #0]
 8006afa:	2300      	movs	r3, #0
 8006afc:	2200      	movs	r2, #0
 8006afe:	2103      	movs	r1, #3
 8006b00:	f7fe ff3e 	bl	8005980 <xTimerGenericCommand>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 8006b04:	4a0c      	ldr	r2, [pc, #48]	@ (8006b38 <vTimerCallbackT35+0x7c>)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b0c:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 8006b10:	2300      	movs	r3, #0
 8006b12:	2203      	movs	r2, #3
 8006b14:	2100      	movs	r1, #0
 8006b16:	f7fe fccf 	bl	80054b8 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	60fb      	str	r3, [r7, #12]
 8006b20:	4b06      	ldr	r3, [pc, #24]	@ (8006b3c <vTimerCallbackT35+0x80>)
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	461a      	mov	r2, r3
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	dbce      	blt.n	8006aca <vTimerCallbackT35+0xe>
		}

	}
}
 8006b2c:	bf00      	nop
 8006b2e:	bf00      	nop
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	20001924 	.word	0x20001924
 8006b3c:	2000192c 	.word	0x2000192c

08006b40 <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8006b48:	2300      	movs	r3, #0
 8006b4a:	60fb      	str	r3, [r7, #12]
 8006b4c:	e017      	b.n	8006b7e <vTimerCallbackTimeout+0x3e>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 8006b4e:	4a11      	ldr	r2, [pc, #68]	@ (8006b94 <vTimerCallbackTimeout+0x54>)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b56:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d10b      	bne.n	8006b78 <vTimerCallbackTimeout+0x38>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, ERR_TIME_OUT, eSetValueWithOverwrite);
 8006b60:	4a0c      	ldr	r2, [pc, #48]	@ (8006b94 <vTimerCallbackTimeout+0x54>)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b68:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	2203      	movs	r2, #3
 8006b70:	f06f 0107 	mvn.w	r1, #7
 8006b74:	f7fe fca0 	bl	80054b8 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	60fb      	str	r3, [r7, #12]
 8006b7e:	4b06      	ldr	r3, [pc, #24]	@ (8006b98 <vTimerCallbackTimeout+0x58>)
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	461a      	mov	r2, r3
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	4293      	cmp	r3, r2
 8006b88:	dbe1      	blt.n	8006b4e <vTimerCallbackTimeout+0xe>
		}

	}

}
 8006b8a:	bf00      	nop
 8006b8c:	bf00      	nop
 8006b8e:	3710      	adds	r7, #16
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	20001924 	.word	0x20001924
 8006b98:	2000192c 	.word	0x2000192c

08006b9c <StartTaskModbusSlave>:
#endif



void StartTaskModbusSlave(void *argument)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	60fb      	str	r3, [r7, #12]
#endif

  for(;;)
  {

	modH->i8lastError = 0;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2200      	movs	r2, #0
 8006bac:	749a      	strb	r2, [r3, #18]

	  }
#endif


   if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA)
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d004      	beq.n	8006bc2 <StartTaskModbusSlave+0x26>
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8006bbe:	2b04      	cmp	r3, #4
 8006bc0:	d117      	bne.n	8006bf2 <StartTaskModbusSlave+0x56>
   {

	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block until a Modbus Frame arrives */
 8006bc2:	f04f 31ff 	mov.w	r1, #4294967295
 8006bc6:	2001      	movs	r0, #1
 8006bc8:	f7fe fc2e 	bl	8005428 <ulTaskNotifyTake>

	  if (getRxBuffer(modH) == ERR_BUFF_OVERFLOW)
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f000 fc41 	bl	8007454 <getRxBuffer>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	f113 0f03 	cmn.w	r3, #3
 8006bd8:	d10b      	bne.n	8006bf2 <StartTaskModbusSlave+0x56>
	  {
	      modH->i8lastError = ERR_BUFF_OVERFLOW;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	22fd      	movs	r2, #253	@ 0xfd
 8006bde:	749a      	strb	r2, [r3, #18]
	   	  modH->u16errCnt++;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8006be6:	3301      	adds	r3, #1
 8006be8:	b29a      	uxth	r2, r3
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
		  continue;
 8006bf0:	e0bf      	b.n	8006d72 <StartTaskModbusSlave+0x1d6>
	  }

   }

   if (modH->u8BufferSize < 7)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8006bf8:	2b06      	cmp	r3, #6
 8006bfa:	d80b      	bhi.n	8006c14 <StartTaskModbusSlave+0x78>
   {
      //The size of the frame is invalid
      modH->i8lastError = ERR_BAD_SIZE;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	22fa      	movs	r2, #250	@ 0xfa
 8006c00:	749a      	strb	r2, [r3, #18]
      modH->u16errCnt++;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8006c08:	3301      	adds	r3, #1
 8006c0a:	b29a      	uxth	r2, r3
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0

	  continue;
 8006c12:	e0ae      	b.n	8006d72 <StartTaskModbusSlave+0x1d6>
    }

    //check broadcast mode
    modH->u8AddressMode = ADDRESS_NORMAL;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
    if (modH->u8Buffer[ID] == ADDRESS_BROADCAST)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	7cdb      	ldrb	r3, [r3, #19]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d103      	bne.n	8006c2c <StartTaskModbusSlave+0x90>
    {
        modH->u8AddressMode = ADDRESS_BROADCAST;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
    }

   // check slave id
    if ( modH->u8Buffer[ID] !=  modH->u8id && modH->u8AddressMode != ADDRESS_BROADCAST)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	7cda      	ldrb	r2, [r3, #19]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	7a1b      	ldrb	r3, [r3, #8]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d005      	beq.n	8006c44 <StartTaskModbusSlave+0xa8>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	f040 8096 	bne.w	8006d70 <StartTaskModbusSlave+0x1d4>
    	}
#endif
	 }

	  // validate message: CRC, FCT, address and size
    uint8_t u8exception = validateRequest(modH);
 8006c44:	68f8      	ldr	r0, [r7, #12]
 8006c46:	f000 fc4f 	bl	80074e8 <validateRequest>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	72fb      	strb	r3, [r7, #11]
	if (u8exception > 0)
 8006c4e:	7afb      	ldrb	r3, [r7, #11]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d00c      	beq.n	8006c6e <StartTaskModbusSlave+0xd2>
	{
	    if (u8exception != ERR_TIME_OUT)
		{
		    buildException( u8exception, modH);
 8006c54:	7afb      	ldrb	r3, [r7, #11]
 8006c56:	68f9      	ldr	r1, [r7, #12]
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f000 fde7 	bl	800782c <buildException>
			sendTxBuffer(modH);
 8006c5e:	68f8      	ldr	r0, [r7, #12]
 8006c60:	f000 fe02 	bl	8007868 <sendTxBuffer>
		}
		modH->i8lastError = u8exception;
 8006c64:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	749a      	strb	r2, [r3, #18]
		//return u8exception

		continue;
 8006c6c:	e081      	b.n	8006d72 <StartTaskModbusSlave+0x1d6>
	 }

	 modH->i8lastError = 0;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2200      	movs	r2, #0
 8006c72:	749a      	strb	r2, [r3, #18]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006c7a:	f04f 31ff 	mov.w	r1, #4294967295
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7fd f910 	bl	8003ea4 <xQueueSemaphoreTake>

	 // process message
	 switch(modH->u8Buffer[ FUNC ] )
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	7d1b      	ldrb	r3, [r3, #20]
 8006c88:	3b01      	subs	r3, #1
 8006c8a:	2b0f      	cmp	r3, #15
 8006c8c:	d862      	bhi.n	8006d54 <StartTaskModbusSlave+0x1b8>
 8006c8e:	a201      	add	r2, pc, #4	@ (adr r2, 8006c94 <StartTaskModbusSlave+0xf8>)
 8006c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c94:	08006cd5 	.word	0x08006cd5
 8006c98:	08006cd5 	.word	0x08006cd5
 8006c9c:	08006cf1 	.word	0x08006cf1
 8006ca0:	08006cf1 	.word	0x08006cf1
 8006ca4:	08006d0d 	.word	0x08006d0d
 8006ca8:	08006d1f 	.word	0x08006d1f
 8006cac:	08006d55 	.word	0x08006d55
 8006cb0:	08006d55 	.word	0x08006d55
 8006cb4:	08006d55 	.word	0x08006d55
 8006cb8:	08006d55 	.word	0x08006d55
 8006cbc:	08006d55 	.word	0x08006d55
 8006cc0:	08006d55 	.word	0x08006d55
 8006cc4:	08006d55 	.word	0x08006d55
 8006cc8:	08006d55 	.word	0x08006d55
 8006ccc:	08006d31 	.word	0x08006d31
 8006cd0:	08006d43 	.word	0x08006d43
	 {
		case MB_FC_READ_COILS:
		case MB_FC_READ_DISCRETE_INPUT:
			if (modH->u8AddressMode == ADDRESS_BROADCAST)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d03c      	beq.n	8006d58 <StartTaskModbusSlave+0x1bc>
			{
				/* broadcast mode should ignore read function */
				break;
			}
			modH->i8state = process_FC1(modH);
 8006cde:	68f8      	ldr	r0, [r7, #12]
 8006ce0:	f000 fe66 	bl	80079b0 <process_FC1>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
			break;
 8006cee:	e036      	b.n	8006d5e <StartTaskModbusSlave+0x1c2>
		case MB_FC_READ_INPUT_REGISTER:
		case MB_FC_READ_REGISTERS :
			if (modH->u8AddressMode == ADDRESS_BROADCAST)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d030      	beq.n	8006d5c <StartTaskModbusSlave+0x1c0>
			{
				/* broadcast mode should ignore read function */
				break;
			}
			modH->i8state = process_FC3(modH);
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f000 ff0d 	bl	8007b1a <process_FC3>
 8006d00:	4603      	mov	r3, r0
 8006d02:	461a      	mov	r2, r3
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
			break;
 8006d0a:	e028      	b.n	8006d5e <StartTaskModbusSlave+0x1c2>
		case MB_FC_WRITE_COIL:
			modH->i8state = process_FC5(modH);
 8006d0c:	68f8      	ldr	r0, [r7, #12]
 8006d0e:	f000 ff6f 	bl	8007bf0 <process_FC5>
 8006d12:	4603      	mov	r3, r0
 8006d14:	461a      	mov	r2, r3
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
			break;
 8006d1c:	e01f      	b.n	8006d5e <StartTaskModbusSlave+0x1c2>
		case MB_FC_WRITE_REGISTER :
			modH->i8state = process_FC6(modH);
 8006d1e:	68f8      	ldr	r0, [r7, #12]
 8006d20:	f000 ffbf 	bl	8007ca2 <process_FC6>
 8006d24:	4603      	mov	r3, r0
 8006d26:	461a      	mov	r2, r3
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
			break;
 8006d2e:	e016      	b.n	8006d5e <StartTaskModbusSlave+0x1c2>
		case MB_FC_WRITE_MULTIPLE_COILS:
			modH->i8state = process_FC15(modH);
 8006d30:	68f8      	ldr	r0, [r7, #12]
 8006d32:	f000 ffe8 	bl	8007d06 <process_FC15>
 8006d36:	4603      	mov	r3, r0
 8006d38:	461a      	mov	r2, r3
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
			break;
 8006d40:	e00d      	b.n	8006d5e <StartTaskModbusSlave+0x1c2>
		case MB_FC_WRITE_MULTIPLE_REGISTERS :
			modH->i8state = process_FC16(modH);
 8006d42:	68f8      	ldr	r0, [r7, #12]
 8006d44:	f001 f86d 	bl	8007e22 <process_FC16>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
			break;
 8006d52:	e004      	b.n	8006d5e <StartTaskModbusSlave+0x1c2>
		default:
			break;
 8006d54:	bf00      	nop
 8006d56:	e002      	b.n	8006d5e <StartTaskModbusSlave+0x1c2>
				break;
 8006d58:	bf00      	nop
 8006d5a:	e000      	b.n	8006d5e <StartTaskModbusSlave+0x1c2>
				break;
 8006d5c:	bf00      	nop
	 }


	 xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f8d3 00bc 	ldr.w	r0, [r3, #188]	@ 0xbc
 8006d64:	2300      	movs	r3, #0
 8006d66:	2200      	movs	r2, #0
 8006d68:	2100      	movs	r1, #0
 8006d6a:	f7fc fe1b 	bl	80039a4 <xQueueGenericSend>

	 continue;
 8006d6e:	e000      	b.n	8006d72 <StartTaskModbusSlave+0x1d6>
    	continue; // continue this is not for us
 8006d70:	bf00      	nop
  {
 8006d72:	e719      	b.n	8006ba8 <StartTaskModbusSlave+0xc>

08006d74 <ModbusQuery>:
}



void ModbusQuery(modbusHandler_t * modH, modbus_t telegram )
{
 8006d74:	b084      	sub	sp, #16
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b082      	sub	sp, #8
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
 8006d7e:	f107 0014 	add.w	r0, r7, #20
 8006d82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//Add the telegram to the TX tail Queue of Modbus
	if (modH->uModbusType == MB_MASTER)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	2b04      	cmp	r3, #4
 8006d8c:	d10d      	bne.n	8006daa <ModbusQuery+0x36>
	{
	telegram.u32CurrentTask = (uint32_t *) osThreadGetId();
 8006d8e:	f7fc f9fd 	bl	800318c <osThreadGetId>
 8006d92:	4603      	mov	r3, r0
 8006d94:	623b      	str	r3, [r7, #32]
	xQueueSendToBack(modH->QueueTelegramHandle, &telegram, 0);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8d3 00ac 	ldr.w	r0, [r3, #172]	@ 0xac
 8006d9c:	f107 0114 	add.w	r1, r7, #20
 8006da0:	2300      	movs	r3, #0
 8006da2:	2200      	movs	r2, #0
 8006da4:	f7fc fdfe 	bl	80039a4 <xQueueGenericSend>
	}
	else{
		while(1);// error a slave cannot send queries as a master
	}
}
 8006da8:	e000      	b.n	8006dac <ModbusQuery+0x38>
		while(1);// error a slave cannot send queries as a master
 8006daa:	e7fe      	b.n	8006daa <ModbusQuery+0x36>
}
 8006dac:	3708      	adds	r7, #8
 8006dae:	46bd      	mov	sp, r7
 8006db0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006db4:	b004      	add	sp, #16
 8006db6:	4770      	bx	lr

08006db8 <SendQuery>:
 * @param modH  modbus handler
 * @param modbus_t  modbus telegram structure (id, fct, ...)
 * @ingroup loop
 */
int8_t SendQuery(modbusHandler_t *modH ,  modbus_t telegram )
{
 8006db8:	b084      	sub	sp, #16
 8006dba:	b580      	push	{r7, lr}
 8006dbc:	b084      	sub	sp, #16
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
 8006dc2:	f107 001c 	add.w	r0, r7, #28
 8006dc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	uint8_t u8regsno, u8bytesno;
	uint8_t  error = 0;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	73bb      	strb	r3, [r7, #14]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f7fd f863 	bl	8003ea4 <xQueueSemaphoreTake>

	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	7a1b      	ldrb	r3, [r3, #8]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d001      	beq.n	8006dea <SendQuery+0x32>
 8006de6:	23ff      	movs	r3, #255	@ 0xff
 8006de8:	73bb      	strb	r3, [r7, #14]
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f993 30a7 	ldrsb.w	r3, [r3, #167]	@ 0xa7
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d001      	beq.n	8006df8 <SendQuery+0x40>
 8006df4:	23fe      	movs	r3, #254	@ 0xfe
 8006df6:	73bb      	strb	r3, [r7, #14]
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 8006df8:	7f3b      	ldrb	r3, [r7, #28]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d002      	beq.n	8006e04 <SendQuery+0x4c>
 8006dfe:	7f3b      	ldrb	r3, [r7, #28]
 8006e00:	2bf7      	cmp	r3, #247	@ 0xf7
 8006e02:	d901      	bls.n	8006e08 <SendQuery+0x50>
 8006e04:	23f7      	movs	r3, #247	@ 0xf7
 8006e06:	73bb      	strb	r3, [r7, #14]


	if(error)
 8006e08:	7bbb      	ldrb	r3, [r7, #14]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00e      	beq.n	8006e2c <SendQuery+0x74>
	{
		 modH->i8lastError = error;
 8006e0e:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	749a      	strb	r2, [r3, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8d3 00bc 	ldr.w	r0, [r3, #188]	@ 0xbc
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	2200      	movs	r2, #0
 8006e20:	2100      	movs	r1, #0
 8006e22:	f7fc fdbf 	bl	80039a4 <xQueueGenericSend>
		 return error;
 8006e26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e2a:	e129      	b.n	8007080 <SendQuery+0x2c8>
	}


	modH->u16regs = telegram.u16reg;
 8006e2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

	// telegram header
	modH->u8Buffer[ ID ]         = telegram.u8id;
 8006e34:	7f3a      	ldrb	r2, [r7, #28]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	74da      	strb	r2, [r3, #19]
	modH->u8Buffer[ FUNC ]       = telegram.u8fct;
 8006e3a:	7f7a      	ldrb	r2, [r7, #29]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	751a      	strb	r2, [r3, #20]
	modH->u8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 8006e40:	8bfb      	ldrh	r3, [r7, #30]
 8006e42:	0a1b      	lsrs	r3, r3, #8
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	b2da      	uxtb	r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	755a      	strb	r2, [r3, #21]
	modH->u8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 8006e4c:	8bfb      	ldrh	r3, [r7, #30]
 8006e4e:	b2da      	uxtb	r2, r3
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	759a      	strb	r2, [r3, #22]

	switch( telegram.u8fct )
 8006e54:	7f7b      	ldrb	r3, [r7, #29]
 8006e56:	3b01      	subs	r3, #1
 8006e58:	2b0f      	cmp	r3, #15
 8006e5a:	f200 80fe 	bhi.w	800705a <SendQuery+0x2a2>
 8006e5e:	a201      	add	r2, pc, #4	@ (adr r2, 8006e64 <SendQuery+0xac>)
 8006e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e64:	08006ea5 	.word	0x08006ea5
 8006e68:	08006ea5 	.word	0x08006ea5
 8006e6c:	08006ea5 	.word	0x08006ea5
 8006e70:	08006ea5 	.word	0x08006ea5
 8006e74:	08006ec3 	.word	0x08006ec3
 8006e78:	08006ee5 	.word	0x08006ee5
 8006e7c:	0800705b 	.word	0x0800705b
 8006e80:	0800705b 	.word	0x0800705b
 8006e84:	0800705b 	.word	0x0800705b
 8006e88:	0800705b 	.word	0x0800705b
 8006e8c:	0800705b 	.word	0x0800705b
 8006e90:	0800705b 	.word	0x0800705b
 8006e94:	0800705b 	.word	0x0800705b
 8006e98:	0800705b 	.word	0x0800705b
 8006e9c:	08006f07 	.word	0x08006f07
 8006ea0:	08006fc5 	.word	0x08006fc5
	{
	case MB_FC_READ_COILS:
	case MB_FC_READ_DISCRETE_INPUT:
	case MB_FC_READ_REGISTERS:
	case MB_FC_READ_INPUT_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8006ea4:	8c3b      	ldrh	r3, [r7, #32]
 8006ea6:	0a1b      	lsrs	r3, r3, #8
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	b2da      	uxtb	r2, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8006eb0:	8c3b      	ldrh	r3, [r7, #32]
 8006eb2:	b2da      	uxtb	r2, r3
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2206      	movs	r2, #6
 8006ebc:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	    break;
 8006ec0:	e0cb      	b.n	800705a <SendQuery+0x2a2>
	case MB_FC_WRITE_COIL:
	    modH->u8Buffer[ NB_HI ]      = (( telegram.u16reg[0]> 0) ? 0xff : 0);
 8006ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec4:	881b      	ldrh	r3, [r3, #0]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d001      	beq.n	8006ece <SendQuery+0x116>
 8006eca:	22ff      	movs	r2, #255	@ 0xff
 8006ecc:	e000      	b.n	8006ed0 <SendQuery+0x118>
 8006ece:	2200      	movs	r2, #0
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = 0;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2206      	movs	r2, #6
 8006ede:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	    break;
 8006ee2:	e0ba      	b.n	800705a <SendQuery+0x2a2>
	case MB_FC_WRITE_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte( telegram.u16reg[0]);
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee6:	881b      	ldrh	r3, [r3, #0]
 8006ee8:	0a1b      	lsrs	r3, r3, #8
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	b2da      	uxtb	r2, r3
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16reg[0]);
 8006ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef4:	881b      	ldrh	r3, [r3, #0]
 8006ef6:	b2da      	uxtb	r2, r3
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2206      	movs	r2, #6
 8006f00:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	    break;
 8006f04:	e0a9      	b.n	800705a <SendQuery+0x2a2>
	case MB_FC_WRITE_MULTIPLE_COILS: // TODO: implement "sending coils"
	    u8regsno = telegram.u16CoilsNo / 16;
 8006f06:	8c3b      	ldrh	r3, [r7, #32]
 8006f08:	091b      	lsrs	r3, r3, #4
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	727b      	strb	r3, [r7, #9]
	    u8bytesno = u8regsno * 2;
 8006f0e:	7a7b      	ldrb	r3, [r7, #9]
 8006f10:	005b      	lsls	r3, r3, #1
 8006f12:	73fb      	strb	r3, [r7, #15]
	    if ((telegram.u16CoilsNo % 16) != 0)
 8006f14:	8c3b      	ldrh	r3, [r7, #32]
 8006f16:	f003 030f 	and.w	r3, r3, #15
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d005      	beq.n	8006f2c <SendQuery+0x174>
	    {
	        u8bytesno++;
 8006f20:	7bfb      	ldrb	r3, [r7, #15]
 8006f22:	3301      	adds	r3, #1
 8006f24:	73fb      	strb	r3, [r7, #15]
	        u8regsno++;
 8006f26:	7a7b      	ldrb	r3, [r7, #9]
 8006f28:	3301      	adds	r3, #1
 8006f2a:	727b      	strb	r3, [r7, #9]
	    }

	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8006f2c:	8c3b      	ldrh	r3, [r7, #32]
 8006f2e:	0a1b      	lsrs	r3, r3, #8
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	b2da      	uxtb	r2, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8006f38:	8c3b      	ldrh	r3, [r7, #32]
 8006f3a:	b2da      	uxtb	r2, r3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = u8bytesno;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	7bfa      	ldrb	r2, [r7, #15]
 8006f44:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2207      	movs	r2, #7
 8006f4a:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93

	    for (uint16_t i = 0; i < u8bytesno; i++)
 8006f4e:	2300      	movs	r3, #0
 8006f50:	81bb      	strh	r3, [r7, #12]
 8006f52:	e031      	b.n	8006fb8 <SendQuery+0x200>
	    {
	        if(i%2)
 8006f54:	89bb      	ldrh	r3, [r7, #12]
 8006f56:	f003 0301 	and.w	r3, r3, #1
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d00f      	beq.n	8006f80 <SendQuery+0x1c8>
	        {
	        	modH->u8Buffer[ modH->u8BufferSize ] = lowByte( telegram.u16reg[ i/2 ] );
 8006f60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f62:	89bb      	ldrh	r3, [r7, #12]
 8006f64:	085b      	lsrs	r3, r3, #1
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	005b      	lsls	r3, r3, #1
 8006f6a:	4413      	add	r3, r2
 8006f6c:	881a      	ldrh	r2, [r3, #0]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8006f74:	4619      	mov	r1, r3
 8006f76:	b2d2      	uxtb	r2, r2
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	440b      	add	r3, r1
 8006f7c:	74da      	strb	r2, [r3, #19]
 8006f7e:	e010      	b.n	8006fa2 <SendQuery+0x1ea>
	        }
	        else
	        {
	        	modH->u8Buffer[  modH->u8BufferSize ] = highByte( telegram.u16reg[ i/2 ] );
 8006f80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f82:	89bb      	ldrh	r3, [r7, #12]
 8006f84:	085b      	lsrs	r3, r3, #1
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	005b      	lsls	r3, r3, #1
 8006f8a:	4413      	add	r3, r2
 8006f8c:	881b      	ldrh	r3, [r3, #0]
 8006f8e:	0a1b      	lsrs	r3, r3, #8
 8006f90:	b29a      	uxth	r2, r3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8006f98:	4619      	mov	r1, r3
 8006f9a:	b2d2      	uxtb	r2, r2
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	440b      	add	r3, r1
 8006fa0:	74da      	strb	r2, [r3, #19]

	        }
	        modH->u8BufferSize++;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8006fa8:	3301      	adds	r3, #1
 8006faa:	b2da      	uxtb	r2, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	    for (uint16_t i = 0; i < u8bytesno; i++)
 8006fb2:	89bb      	ldrh	r3, [r7, #12]
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	81bb      	strh	r3, [r7, #12]
 8006fb8:	7bfb      	ldrb	r3, [r7, #15]
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	89ba      	ldrh	r2, [r7, #12]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d3c8      	bcc.n	8006f54 <SendQuery+0x19c>
	    }
	    break;
 8006fc2:	e04a      	b.n	800705a <SendQuery+0x2a2>

	case MB_FC_WRITE_MULTIPLE_REGISTERS:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8006fc4:	8c3b      	ldrh	r3, [r7, #32]
 8006fc6:	0a1b      	lsrs	r3, r3, #8
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	b2da      	uxtb	r2, r3
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8006fd0:	8c3b      	ldrh	r3, [r7, #32]
 8006fd2:	b2da      	uxtb	r2, r3
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 8006fd8:	8c3b      	ldrh	r3, [r7, #32]
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	005b      	lsls	r3, r3, #1
 8006fde:	b2da      	uxtb	r2, r3
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2207      	movs	r2, #7
 8006fe8:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93

	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 8006fec:	2300      	movs	r3, #0
 8006fee:	817b      	strh	r3, [r7, #10]
 8006ff0:	e02e      	b.n	8007050 <SendQuery+0x298>
	    {

	        modH->u8Buffer[  modH->u8BufferSize ] = highByte(  telegram.u16reg[ i ] );
 8006ff2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ff4:	897b      	ldrh	r3, [r7, #10]
 8006ff6:	005b      	lsls	r3, r3, #1
 8006ff8:	4413      	add	r3, r2
 8006ffa:	881b      	ldrh	r3, [r3, #0]
 8006ffc:	0a1b      	lsrs	r3, r3, #8
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8007006:	4619      	mov	r1, r3
 8007008:	b2d2      	uxtb	r2, r2
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	440b      	add	r3, r1
 800700e:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8007016:	3301      	adds	r3, #1
 8007018:	b2da      	uxtb	r2, r3
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	        modH->u8Buffer[  modH->u8BufferSize ] = lowByte( telegram.u16reg[ i ] );
 8007020:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007022:	897b      	ldrh	r3, [r7, #10]
 8007024:	005b      	lsls	r3, r3, #1
 8007026:	4413      	add	r3, r2
 8007028:	881a      	ldrh	r2, [r3, #0]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8007030:	4619      	mov	r1, r3
 8007032:	b2d2      	uxtb	r2, r2
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	440b      	add	r3, r1
 8007038:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8007040:	3301      	adds	r3, #1
 8007042:	b2da      	uxtb	r2, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 800704a:	897b      	ldrh	r3, [r7, #10]
 800704c:	3301      	adds	r3, #1
 800704e:	817b      	strh	r3, [r7, #10]
 8007050:	8c3b      	ldrh	r3, [r7, #32]
 8007052:	897a      	ldrh	r2, [r7, #10]
 8007054:	429a      	cmp	r2, r3
 8007056:	d3cc      	bcc.n	8006ff2 <SendQuery+0x23a>
	    }
	    break;
 8007058:	bf00      	nop
	}


	sendTxBuffer(modH);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 fc04 	bl	8007868 <sendTxBuffer>

	xSemaphoreGive(modH->ModBusSphrHandle);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 00bc 	ldr.w	r0, [r3, #188]	@ 0xbc
 8007066:	2300      	movs	r3, #0
 8007068:	2200      	movs	r2, #0
 800706a:	2100      	movs	r1, #0
 800706c:	f7fc fc9a 	bl	80039a4 <xQueueGenericSend>

	modH->i8state = COM_WAITING;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
	modH->i8lastError = 0;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	749a      	strb	r2, [r3, #18]
	return 0;
 800707e:	2300      	movs	r3, #0


}
 8007080:	4618      	mov	r0, r3
 8007082:	3710      	adds	r7, #16
 8007084:	46bd      	mov	sp, r7
 8007086:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800708a:	b004      	add	sp, #16
 800708c:	4770      	bx	lr
 800708e:	bf00      	nop

08007090 <StartTaskModbusMaster>:
}

#endif

void StartTaskModbusMaster(void *argument)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b08c      	sub	sp, #48	@ 0x30
 8007094:	af02      	add	r7, sp, #8
 8007096:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	627b      	str	r3, [r7, #36]	@ 0x24


  for(;;)
  {
	  /*Wait indefinitely for a telegram to send */
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
 800709c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800709e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80070a2:	f107 010c 	add.w	r1, r7, #12
 80070a6:	f04f 32ff 	mov.w	r2, #4294967295
 80070aa:	4618      	mov	r0, r3
 80070ac:	f7fc fe18 	bl	8003ce0 <xQueueReceive>
       /* Block until a Modbus Frame arrives or query timeouts*/
   	   ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
     }
#else
     /*Wait period of silence between modbus frame */
	 if(modH->port->Init.BaudRate <= 19200)
 80070b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	f5b3 4f96 	cmp.w	r3, #19200	@ 0x4b00
 80070ba:	d80b      	bhi.n	80070d4 <StartTaskModbusMaster+0x44>
	 	osDelay((int)(35000/modH->port->Init.BaudRate) + 2);
 80070bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	f648 02b8 	movw	r2, #35000	@ 0x88b8
 80070c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ca:	3302      	adds	r3, #2
 80070cc:	4618      	mov	r0, r3
 80070ce:	f7fc f883 	bl	80031d8 <osDelay>
 80070d2:	e002      	b.n	80070da <StartTaskModbusMaster+0x4a>
	 else
	 	osDelay(3);
 80070d4:	2003      	movs	r0, #3
 80070d6:	f7fc f87f 	bl	80031d8 <osDelay>

     // This is the case for implementations with only USART support
     SendQuery(modH, telegram);
 80070da:	69bb      	ldr	r3, [r7, #24]
 80070dc:	9300      	str	r3, [sp, #0]
 80070de:	f107 030c 	add.w	r3, r7, #12
 80070e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80070e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80070e6:	f7ff fe67 	bl	8006db8 <SendQuery>
     /* Block indefinitely until a Modbus Frame arrives or query timeouts*/
     ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80070ea:	f04f 31ff 	mov.w	r1, #4294967295
 80070ee:	2001      	movs	r0, #1
 80070f0:	f7fe f99a 	bl	8005428 <ulTaskNotifyTake>
 80070f4:	6238      	str	r0, [r7, #32]

#endif

	  // notify the task the request timeout
      modH->i8lastError = 0;
 80070f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f8:	2200      	movs	r2, #0
 80070fa:	749a      	strb	r2, [r3, #18]
      if(ulNotificationValue)
 80070fc:	6a3b      	ldr	r3, [r7, #32]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d018      	beq.n	8007134 <StartTaskModbusMaster+0xa4>
      {
    	  modH->i8state = COM_IDLE;
 8007102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007104:	2200      	movs	r2, #0
 8007106:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
    	  modH->i8lastError = ERR_TIME_OUT;
 800710a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800710c:	22f8      	movs	r2, #248	@ 0xf8
 800710e:	749a      	strb	r2, [r3, #18]
    	  modH->u16errCnt++;
 8007110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007112:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8007116:	3301      	adds	r3, #1
 8007118:	b29a      	uxth	r2, r3
 800711a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800711c:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
    	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8007120:	69b8      	ldr	r0, [r7, #24]
 8007122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007124:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8007128:	4619      	mov	r1, r3
 800712a:	2300      	movs	r3, #0
 800712c:	2203      	movs	r2, #3
 800712e:	f7fe f9c3 	bl	80054b8 <xTaskGenericNotify>
    	  continue;
 8007132:	e099      	b.n	8007268 <StartTaskModbusMaster+0x1d8>
      {
    	  getRxBuffer(modH);
      }

#else
      getRxBuffer(modH);
 8007134:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007136:	f000 f98d 	bl	8007454 <getRxBuffer>
#endif



	  if ( modH->u8BufferSize < 6){
 800713a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800713c:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8007140:	2b05      	cmp	r3, #5
 8007142:	d818      	bhi.n	8007176 <StartTaskModbusMaster+0xe6>

		  modH->i8state = COM_IDLE;
 8007144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007146:	2200      	movs	r2, #0
 8007148:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
		  modH->i8lastError = ERR_BAD_SIZE;
 800714c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800714e:	22fa      	movs	r2, #250	@ 0xfa
 8007150:	749a      	strb	r2, [r3, #18]
		  modH->u16errCnt++;
 8007152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007154:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8007158:	3301      	adds	r3, #1
 800715a:	b29a      	uxth	r2, r3
 800715c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800715e:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8007162:	69b8      	ldr	r0, [r7, #24]
 8007164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007166:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800716a:	4619      	mov	r1, r3
 800716c:	2300      	movs	r3, #0
 800716e:	2203      	movs	r2, #3
 8007170:	f7fe f9a2 	bl	80054b8 <xTaskGenericNotify>
		  continue;
 8007174:	e078      	b.n	8007268 <StartTaskModbusMaster+0x1d8>
	  }

	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 8007176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007178:	f8d3 00b8 	ldr.w	r0, [r3, #184]	@ 0xb8
 800717c:	2300      	movs	r3, #0
 800717e:	9300      	str	r3, [sp, #0]
 8007180:	2300      	movs	r3, #0
 8007182:	2200      	movs	r2, #0
 8007184:	2103      	movs	r1, #3
 8007186:	f7fe fbfb 	bl	8005980 <xTimerGenericCommand>


	  // validate message: id, CRC, FCT, exception
	  int8_t u8exception = validateAnswer(modH);
 800718a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800718c:	f000 f8f4 	bl	8007378 <validateAnswer>
 8007190:	4603      	mov	r3, r0
 8007192:	77fb      	strb	r3, [r7, #31]
	  if (u8exception != 0)
 8007194:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d010      	beq.n	80071be <StartTaskModbusMaster+0x12e>
	  {
		 modH->i8state = COM_IDLE;
 800719c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
         modH->i8lastError = u8exception;
 80071a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a6:	7ffa      	ldrb	r2, [r7, #31]
 80071a8:	749a      	strb	r2, [r3, #18]
		 xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 80071aa:	69b8      	ldr	r0, [r7, #24]
 80071ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ae:	f993 3012 	ldrsb.w	r3, [r3, #18]
 80071b2:	4619      	mov	r1, r3
 80071b4:	2300      	movs	r3, #0
 80071b6:	2203      	movs	r2, #3
 80071b8:	f7fe f97e 	bl	80054b8 <xTaskGenericNotify>
	     continue;
 80071bc:	e054      	b.n	8007268 <StartTaskModbusMaster+0x1d8>
	  }

	  modH->i8lastError = u8exception;
 80071be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c0:	7ffa      	ldrb	r2, [r7, #31]
 80071c2:	749a      	strb	r2, [r3, #18]

	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 80071c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80071ca:	f04f 31ff 	mov.w	r1, #4294967295
 80071ce:	4618      	mov	r0, r3
 80071d0:	f7fc fe68 	bl	8003ea4 <xQueueSemaphoreTake>
	  // process answer
	  switch( modH->u8Buffer[ FUNC ] )
 80071d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d6:	7d1b      	ldrb	r3, [r3, #20]
 80071d8:	3b01      	subs	r3, #1
 80071da:	2b0f      	cmp	r3, #15
 80071dc:	d82a      	bhi.n	8007234 <StartTaskModbusMaster+0x1a4>
 80071de:	a201      	add	r2, pc, #4	@ (adr r2, 80071e4 <StartTaskModbusMaster+0x154>)
 80071e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e4:	08007225 	.word	0x08007225
 80071e8:	08007225 	.word	0x08007225
 80071ec:	0800722d 	.word	0x0800722d
 80071f0:	0800722d 	.word	0x0800722d
 80071f4:	08007235 	.word	0x08007235
 80071f8:	08007235 	.word	0x08007235
 80071fc:	08007235 	.word	0x08007235
 8007200:	08007235 	.word	0x08007235
 8007204:	08007235 	.word	0x08007235
 8007208:	08007235 	.word	0x08007235
 800720c:	08007235 	.word	0x08007235
 8007210:	08007235 	.word	0x08007235
 8007214:	08007235 	.word	0x08007235
 8007218:	08007235 	.word	0x08007235
 800721c:	08007235 	.word	0x08007235
 8007220:	08007235 	.word	0x08007235
	  {
	  case MB_FC_READ_COILS:
	  case MB_FC_READ_DISCRETE_INPUT:
	      //call get_FC1 to transfer the incoming message to u16regs buffer
	      get_FC1(modH);
 8007224:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007226:	f000 f821 	bl	800726c <get_FC1>
	      break;
 800722a:	e004      	b.n	8007236 <StartTaskModbusMaster+0x1a6>
	  case MB_FC_READ_INPUT_REGISTER:
	  case MB_FC_READ_REGISTERS :
	      // call get_FC3 to transfer the incoming message to u16regs buffer
	      get_FC3(modH);
 800722c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800722e:	f000 f874 	bl	800731a <get_FC3>
	      break;
 8007232:	e000      	b.n	8007236 <StartTaskModbusMaster+0x1a6>
	  case MB_FC_WRITE_MULTIPLE_COILS:
	  case MB_FC_WRITE_MULTIPLE_REGISTERS :
	      // nothing to do
	      break;
	  default:
	      break;
 8007234:	bf00      	nop
	  }
	  modH->i8state = COM_IDLE;
 8007236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007238:	2200      	movs	r2, #0
 800723a:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7

	  if (modH->i8lastError ==0) // no error the error_OK, we need to use a different value than 0 to detect the timeout
 800723e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007240:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d10e      	bne.n	8007266 <StartTaskModbusMaster+0x1d6>
	  {
		  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8007248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800724a:	f8d3 00bc 	ldr.w	r0, [r3, #188]	@ 0xbc
 800724e:	2300      	movs	r3, #0
 8007250:	2200      	movs	r2, #0
 8007252:	2100      	movs	r1, #0
 8007254:	f7fc fba6 	bl	80039a4 <xQueueGenericSend>
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, ERR_OK_QUERY, eSetValueWithOverwrite);
 8007258:	69b8      	ldr	r0, [r7, #24]
 800725a:	2300      	movs	r3, #0
 800725c:	2203      	movs	r2, #3
 800725e:	f06f 010a 	mvn.w	r1, #10
 8007262:	f7fe f929 	bl	80054b8 <xTaskGenericNotify>
	  }


	  continue;
 8007266:	bf00      	nop
  {
 8007268:	e718      	b.n	800709c <StartTaskModbusMaster+0xc>
 800726a:	bf00      	nop

0800726c <get_FC1>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC1(modbusHandler_t *modH)
{
 800726c:	b590      	push	{r4, r7, lr}
 800726e:	b085      	sub	sp, #20
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 8007274:	2303      	movs	r3, #3
 8007276:	73bb      	strb	r3, [r7, #14]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 8007278:	2300      	movs	r3, #0
 800727a:	73fb      	strb	r3, [r7, #15]
 800727c:	e043      	b.n	8007306 <get_FC1+0x9a>

        if(i%2)
 800727e:	7bfb      	ldrb	r3, [r7, #15]
 8007280:	f003 0301 	and.w	r3, r3, #1
 8007284:	b2db      	uxtb	r3, r3
 8007286:	2b00      	cmp	r3, #0
 8007288:	d01c      	beq.n	80072c4 <get_FC1+0x58>
        {
        	modH->u16regs[i/2]= word(modH->u8Buffer[i+u8byte], lowByte(modH->u16regs[i/2]));
 800728a:	7bfa      	ldrb	r2, [r7, #15]
 800728c:	7bbb      	ldrb	r3, [r7, #14]
 800728e:	4413      	add	r3, r2
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	4413      	add	r3, r2
 8007294:	7cd8      	ldrb	r0, [r3, #19]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800729c:	7bfb      	ldrb	r3, [r7, #15]
 800729e:	085b      	lsrs	r3, r3, #1
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	005b      	lsls	r3, r3, #1
 80072a4:	4413      	add	r3, r2
 80072a6:	881b      	ldrh	r3, [r3, #0]
 80072a8:	b2d9      	uxtb	r1, r3
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80072b0:	7bfb      	ldrb	r3, [r7, #15]
 80072b2:	085b      	lsrs	r3, r3, #1
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	005b      	lsls	r3, r3, #1
 80072b8:	18d4      	adds	r4, r2, r3
 80072ba:	f000 fa5f 	bl	800777c <word>
 80072be:	4603      	mov	r3, r0
 80072c0:	8023      	strh	r3, [r4, #0]
 80072c2:	e01d      	b.n	8007300 <get_FC1+0x94>
        }
        else
        {

        	modH->u16regs[i/2]= word(highByte(modH->u16regs[i/2]), modH->u8Buffer[i+u8byte]);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80072ca:	7bfb      	ldrb	r3, [r7, #15]
 80072cc:	085b      	lsrs	r3, r3, #1
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	005b      	lsls	r3, r3, #1
 80072d2:	4413      	add	r3, r2
 80072d4:	881b      	ldrh	r3, [r3, #0]
 80072d6:	0a1b      	lsrs	r3, r3, #8
 80072d8:	b29b      	uxth	r3, r3
 80072da:	b2d8      	uxtb	r0, r3
 80072dc:	7bfa      	ldrb	r2, [r7, #15]
 80072de:	7bbb      	ldrb	r3, [r7, #14]
 80072e0:	4413      	add	r3, r2
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	4413      	add	r3, r2
 80072e6:	7cd9      	ldrb	r1, [r3, #19]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80072ee:	7bfb      	ldrb	r3, [r7, #15]
 80072f0:	085b      	lsrs	r3, r3, #1
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	005b      	lsls	r3, r3, #1
 80072f6:	18d4      	adds	r4, r2, r3
 80072f8:	f000 fa40 	bl	800777c <word>
 80072fc:	4603      	mov	r3, r0
 80072fe:	8023      	strh	r3, [r4, #0]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 8007300:	7bfb      	ldrb	r3, [r7, #15]
 8007302:	3301      	adds	r3, #1
 8007304:	73fb      	strb	r3, [r7, #15]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	7d5b      	ldrb	r3, [r3, #21]
 800730a:	7bfa      	ldrb	r2, [r7, #15]
 800730c:	429a      	cmp	r2, r3
 800730e:	d3b6      	bcc.n	800727e <get_FC1+0x12>
        }

     }
}
 8007310:	bf00      	nop
 8007312:	bf00      	nop
 8007314:	3714      	adds	r7, #20
 8007316:	46bd      	mov	sp, r7
 8007318:	bd90      	pop	{r4, r7, pc}

0800731a <get_FC3>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC3(modbusHandler_t *modH)
{
 800731a:	b590      	push	{r4, r7, lr}
 800731c:	b085      	sub	sp, #20
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 8007322:	2303      	movs	r3, #3
 8007324:	73fb      	strb	r3, [r7, #15]

    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 8007326:	2300      	movs	r3, #0
 8007328:	73bb      	strb	r3, [r7, #14]
 800732a:	e018      	b.n	800735e <get_FC3+0x44>
    {
    	modH->u16regs[ i ] = word(modH->u8Buffer[ u8byte ], modH->u8Buffer[ u8byte +1 ]);
 800732c:	7bfb      	ldrb	r3, [r7, #15]
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	4413      	add	r3, r2
 8007332:	7cd8      	ldrb	r0, [r3, #19]
 8007334:	7bfb      	ldrb	r3, [r7, #15]
 8007336:	3301      	adds	r3, #1
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	4413      	add	r3, r2
 800733c:	7cd9      	ldrb	r1, [r3, #19]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8007344:	7bbb      	ldrb	r3, [r7, #14]
 8007346:	005b      	lsls	r3, r3, #1
 8007348:	18d4      	adds	r4, r2, r3
 800734a:	f000 fa17 	bl	800777c <word>
 800734e:	4603      	mov	r3, r0
 8007350:	8023      	strh	r3, [r4, #0]
        u8byte += 2;
 8007352:	7bfb      	ldrb	r3, [r7, #15]
 8007354:	3302      	adds	r3, #2
 8007356:	73fb      	strb	r3, [r7, #15]
    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 8007358:	7bbb      	ldrb	r3, [r7, #14]
 800735a:	3301      	adds	r3, #1
 800735c:	73bb      	strb	r3, [r7, #14]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	7d5b      	ldrb	r3, [r3, #21]
 8007362:	085b      	lsrs	r3, r3, #1
 8007364:	b2db      	uxtb	r3, r3
 8007366:	7bba      	ldrb	r2, [r7, #14]
 8007368:	429a      	cmp	r2, r3
 800736a:	d3df      	bcc.n	800732c <get_FC3+0x12>
    }
}
 800736c:	bf00      	nop
 800736e:	bf00      	nop
 8007370:	3714      	adds	r7, #20
 8007372:	46bd      	mov	sp, r7
 8007374:	bd90      	pop	{r4, r7, pc}
	...

08007378 <validateAnswer>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup buffer
 */
uint8_t validateAnswer(modbusHandler_t *modH)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
#if ENABLE_TCP ==1
	if(modH->xTypeHW != TCP_HW)
	{
#endif
	uint16_t u16MsgCRC =
        ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8007386:	3b02      	subs	r3, #2
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	4413      	add	r3, r2
 800738c:	7cdb      	ldrb	r3, [r3, #19]
 800738e:	021b      	lsls	r3, r3, #8
         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8007390:	b21a      	sxth	r2, r3
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8007398:	3b01      	subs	r3, #1
 800739a:	6879      	ldr	r1, [r7, #4]
 800739c:	440b      	add	r3, r1
 800739e:	7cdb      	ldrb	r3, [r3, #19]
 80073a0:	b21b      	sxth	r3, r3
 80073a2:	4313      	orrs	r3, r2
 80073a4:	b21b      	sxth	r3, r3
	uint16_t u16MsgCRC =
 80073a6:	81bb      	strh	r3, [r7, #12]
    if ( calcCRC(modH->u8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f103 0213 	add.w	r2, r3, #19
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80073b4:	3b02      	subs	r3, #2
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	4619      	mov	r1, r3
 80073ba:	4610      	mov	r0, r2
 80073bc:	f000 f9f0 	bl	80077a0 <calcCRC>
 80073c0:	4603      	mov	r3, r0
 80073c2:	461a      	mov	r2, r3
 80073c4:	89bb      	ldrh	r3, [r7, #12]
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d009      	beq.n	80073de <validateAnswer+0x66>
    {
    	modH->u16errCnt ++;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 80073d0:	3301      	adds	r3, #1
 80073d2:	b29a      	uxth	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
        return ERR_BAD_CRC;
 80073da:	23fc      	movs	r3, #252	@ 0xfc
 80073dc:	e034      	b.n	8007448 <validateAnswer+0xd0>
	}
#endif


    // check exception
    if ((modH->u8Buffer[ FUNC ] & 0x80) != 0)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	7d1b      	ldrb	r3, [r3, #20]
 80073e2:	b25b      	sxtb	r3, r3
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	da09      	bge.n	80073fc <validateAnswer+0x84>
    {
    	modH->u16errCnt ++;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 80073ee:	3301      	adds	r3, #1
 80073f0:	b29a      	uxth	r2, r3
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
        return ERR_EXCEPTION;
 80073f8:	23fb      	movs	r3, #251	@ 0xfb
 80073fa:	e025      	b.n	8007448 <validateAnswer+0xd0>
    }

    // check fct code
    bool isSupported = false;
 80073fc:	2300      	movs	r3, #0
 80073fe:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8007400:	2300      	movs	r3, #0
 8007402:	73bb      	strb	r3, [r7, #14]
 8007404:	e00c      	b.n	8007420 <validateAnswer+0xa8>
    {
        if (fctsupported[i] == modH->u8Buffer[FUNC])
 8007406:	7bbb      	ldrb	r3, [r7, #14]
 8007408:	4a11      	ldr	r2, [pc, #68]	@ (8007450 <validateAnswer+0xd8>)
 800740a:	5cd2      	ldrb	r2, [r2, r3]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	7d1b      	ldrb	r3, [r3, #20]
 8007410:	429a      	cmp	r2, r3
 8007412:	d102      	bne.n	800741a <validateAnswer+0xa2>
        {
            isSupported = 1;
 8007414:	2301      	movs	r3, #1
 8007416:	73fb      	strb	r3, [r7, #15]
            break;
 8007418:	e005      	b.n	8007426 <validateAnswer+0xae>
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800741a:	7bbb      	ldrb	r3, [r7, #14]
 800741c:	3301      	adds	r3, #1
 800741e:	73bb      	strb	r3, [r7, #14]
 8007420:	7bbb      	ldrb	r3, [r7, #14]
 8007422:	2b07      	cmp	r3, #7
 8007424:	d9ef      	bls.n	8007406 <validateAnswer+0x8e>
        }
    }
    if (!isSupported)
 8007426:	7bfb      	ldrb	r3, [r7, #15]
 8007428:	f083 0301 	eor.w	r3, r3, #1
 800742c:	b2db      	uxtb	r3, r3
 800742e:	2b00      	cmp	r3, #0
 8007430:	d009      	beq.n	8007446 <validateAnswer+0xce>
    {
    	modH->u16errCnt ++;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8007438:	3301      	adds	r3, #1
 800743a:	b29a      	uxth	r2, r3
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
        return EXC_FUNC_CODE;
 8007442:	2301      	movs	r3, #1
 8007444:	e000      	b.n	8007448 <validateAnswer+0xd0>
    }

    return 0; // OK, no exception code thrown
 8007446:	2300      	movs	r3, #0
}
 8007448:	4618      	mov	r0, r3
 800744a:	3710      	adds	r7, #16
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}
 8007450:	08008250 	.word	0x08008250

08007454 <getRxBuffer>:
 *
 * @return buffer size if OK, ERR_BUFF_OVERFLOW if u8BufferSize >= MAX_BUFFER
 * @ingroup buffer
 */
int16_t getRxBuffer(modbusHandler_t *modH)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]

    int16_t i16result;

    if(modH->xTypeHW == USART_HW)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8007462:	2b01      	cmp	r3, #1
 8007464:	d104      	bne.n	8007470 <getRxBuffer+0x1c>
    {
    	HAL_UART_AbortReceive_IT(modH->port); // disable interrupts to avoid race conditions on serial port
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	4618      	mov	r0, r3
 800746c:	f7fa ff20 	bl	80022b0 <HAL_UART_AbortReceive_IT>
    }

	if (modH->xBufferRX.overflow)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f893 3143 	ldrb.w	r3, [r3, #323]	@ 0x143
 8007476:	2b00      	cmp	r3, #0
 8007478:	d008      	beq.n	800748c <getRxBuffer+0x38>
    {
       	RingClear(&modH->xBufferRX); // clean up the overflowed buffer
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	33c0      	adds	r3, #192	@ 0xc0
 800747e:	4618      	mov	r0, r3
 8007480:	f7ff f9d0 	bl	8006824 <RingClear>
       	i16result =  ERR_BUFF_OVERFLOW;
 8007484:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
 8007488:	81fb      	strh	r3, [r7, #14]
 800748a:	e019      	b.n	80074c0 <getRxBuffer+0x6c>
    }
	else
	{
		modH->u8BufferSize = RingGetAllBytes(&modH->xBufferRX, modH->u8Buffer);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f103 02c0 	add.w	r2, r3, #192	@ 0xc0
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	3313      	adds	r3, #19
 8007496:	4619      	mov	r1, r3
 8007498:	4610      	mov	r0, r2
 800749a:	f7ff f95d 	bl	8006758 <RingGetAllBytes>
 800749e:	4603      	mov	r3, r0
 80074a0:	461a      	mov	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
		modH->u16InCnt++;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 80074ae:	3301      	adds	r3, #1
 80074b0:	b29a      	uxth	r2, r3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
		i16result = modH->u8BufferSize;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80074be:	81fb      	strh	r3, [r7, #14]
	}

	if(modH->xTypeHW == USART_HW)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d107      	bne.n	80074da <getRxBuffer+0x86>
	{
		HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6858      	ldr	r0, [r3, #4]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	33a6      	adds	r3, #166	@ 0xa6
 80074d2:	2201      	movs	r2, #1
 80074d4:	4619      	mov	r1, r3
 80074d6:	f7fa fec6 	bl	8002266 <HAL_UART_Receive_IT>
	}

    return i16result;
 80074da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
	...

080074e8 <validateRequest>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup modH Modbus handler
 */
uint8_t validateRequest(modbusHandler_t *modH)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
	    		return ERR_BAD_CRC;
	    		}
	    }
#else
	    uint16_t u16MsgCRC;
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80074f6:	3b02      	subs	r3, #2
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	4413      	add	r3, r2
 80074fc:	7cdb      	ldrb	r3, [r3, #19]
 80074fe:	021b      	lsls	r3, r3, #8
	    		   	         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8007500:	b21a      	sxth	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8007508:	3b01      	subs	r3, #1
 800750a:	6879      	ldr	r1, [r7, #4]
 800750c:	440b      	add	r3, r1
 800750e:	7cdb      	ldrb	r3, [r3, #19]
 8007510:	b21b      	sxth	r3, r3
 8007512:	4313      	orrs	r3, r2
 8007514:	b21b      	sxth	r3, r3
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8007516:	813b      	strh	r3, [r7, #8]


	    if ( calcCRC( modH->u8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f103 0213 	add.w	r2, r3, #19
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8007524:	3b02      	subs	r3, #2
 8007526:	b2db      	uxtb	r3, r3
 8007528:	4619      	mov	r1, r3
 800752a:	4610      	mov	r0, r2
 800752c:	f000 f938 	bl	80077a0 <calcCRC>
 8007530:	4603      	mov	r3, r0
 8007532:	461a      	mov	r2, r3
 8007534:	893b      	ldrh	r3, [r7, #8]
 8007536:	4293      	cmp	r3, r2
 8007538:	d009      	beq.n	800754e <validateRequest+0x66>
	    {
	       		modH->u16errCnt ++;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8007540:	3301      	adds	r3, #1
 8007542:	b29a      	uxth	r2, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
	       		return ERR_BAD_CRC;
 800754a:	23fc      	movs	r3, #252	@ 0xfc
 800754c:	e10f      	b.n	800776e <validateRequest+0x286>


#endif

	    // check fct code
	    bool isSupported = false;
 800754e:	2300      	movs	r3, #0
 8007550:	73fb      	strb	r3, [r7, #15]
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8007552:	2300      	movs	r3, #0
 8007554:	73bb      	strb	r3, [r7, #14]
 8007556:	e00c      	b.n	8007572 <validateRequest+0x8a>
	    {
	        if (fctsupported[i] == modH->u8Buffer[FUNC])
 8007558:	7bbb      	ldrb	r3, [r7, #14]
 800755a:	4a87      	ldr	r2, [pc, #540]	@ (8007778 <validateRequest+0x290>)
 800755c:	5cd2      	ldrb	r2, [r2, r3]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	7d1b      	ldrb	r3, [r3, #20]
 8007562:	429a      	cmp	r2, r3
 8007564:	d102      	bne.n	800756c <validateRequest+0x84>
	        {
	            isSupported = 1;
 8007566:	2301      	movs	r3, #1
 8007568:	73fb      	strb	r3, [r7, #15]
	            break;
 800756a:	e005      	b.n	8007578 <validateRequest+0x90>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800756c:	7bbb      	ldrb	r3, [r7, #14]
 800756e:	3301      	adds	r3, #1
 8007570:	73bb      	strb	r3, [r7, #14]
 8007572:	7bbb      	ldrb	r3, [r7, #14]
 8007574:	2b07      	cmp	r3, #7
 8007576:	d9ef      	bls.n	8007558 <validateRequest+0x70>
	        }
	    }
	    if (!isSupported)
 8007578:	7bfb      	ldrb	r3, [r7, #15]
 800757a:	f083 0301 	eor.w	r3, r3, #1
 800757e:	b2db      	uxtb	r3, r3
 8007580:	2b00      	cmp	r3, #0
 8007582:	d009      	beq.n	8007598 <validateRequest+0xb0>
	    {
	    	modH->u16errCnt ++;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 800758a:	3301      	adds	r3, #1
 800758c:	b29a      	uxth	r2, r3
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
	        return EXC_FUNC_CODE;
 8007594:	2301      	movs	r3, #1
 8007596:	e0ea      	b.n	800776e <validateRequest+0x286>
	    }

	    // check start address & nb range
	    uint16_t u16AdRegs = 0;
 8007598:	2300      	movs	r3, #0
 800759a:	81bb      	strh	r3, [r7, #12]
	    uint16_t u16NRegs = 0;
 800759c:	2300      	movs	r3, #0
 800759e:	817b      	strh	r3, [r7, #10]

	    //uint8_t u8regs;
	    switch ( modH->u8Buffer[ FUNC ] )
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	7d1b      	ldrb	r3, [r3, #20]
 80075a4:	3b01      	subs	r3, #1
 80075a6:	2b0f      	cmp	r3, #15
 80075a8:	f200 80e0 	bhi.w	800776c <validateRequest+0x284>
 80075ac:	a201      	add	r2, pc, #4	@ (adr r2, 80075b4 <validateRequest+0xcc>)
 80075ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b2:	bf00      	nop
 80075b4:	080075f5 	.word	0x080075f5
 80075b8:	080075f5 	.word	0x080075f5
 80075bc:	0800770d 	.word	0x0800770d
 80075c0:	0800770d 	.word	0x0800770d
 80075c4:	080076a1 	.word	0x080076a1
 80075c8:	080076e9 	.word	0x080076e9
 80075cc:	0800776d 	.word	0x0800776d
 80075d0:	0800776d 	.word	0x0800776d
 80075d4:	0800776d 	.word	0x0800776d
 80075d8:	0800776d 	.word	0x0800776d
 80075dc:	0800776d 	.word	0x0800776d
 80075e0:	0800776d 	.word	0x0800776d
 80075e4:	0800776d 	.word	0x0800776d
 80075e8:	0800776d 	.word	0x0800776d
 80075ec:	080075f5 	.word	0x080075f5
 80075f0:	0800770d 	.word	0x0800770d
	    {
	    case MB_FC_READ_COILS:
	    case MB_FC_READ_DISCRETE_INPUT:
	    case MB_FC_WRITE_MULTIPLE_COILS:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	7d5a      	ldrb	r2, [r3, #21]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	7d9b      	ldrb	r3, [r3, #22]
 80075fc:	4619      	mov	r1, r3
 80075fe:	4610      	mov	r0, r2
 8007600:	f000 f8bc 	bl	800777c <word>
 8007604:	4603      	mov	r3, r0
 8007606:	091b      	lsrs	r3, r3, #4
 8007608:	81bb      	strh	r3, [r7, #12]
	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) /16;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	7dda      	ldrb	r2, [r3, #23]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	7e1b      	ldrb	r3, [r3, #24]
 8007612:	4619      	mov	r1, r3
 8007614:	4610      	mov	r0, r2
 8007616:	f000 f8b1 	bl	800777c <word>
 800761a:	4603      	mov	r3, r0
 800761c:	091b      	lsrs	r3, r3, #4
 800761e:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 16) u16NRegs++; // check for incomplete words
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	7dda      	ldrb	r2, [r3, #23]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	7e1b      	ldrb	r3, [r3, #24]
 8007628:	4619      	mov	r1, r3
 800762a:	4610      	mov	r0, r2
 800762c:	f000 f8a6 	bl	800777c <word>
 8007630:	4603      	mov	r3, r0
 8007632:	f003 030f 	and.w	r3, r3, #15
 8007636:	b29b      	uxth	r3, r3
 8007638:	2b00      	cmp	r3, #0
 800763a:	d002      	beq.n	8007642 <validateRequest+0x15a>
 800763c:	897b      	ldrh	r3, [r7, #10]
 800763e:	3301      	adds	r3, #1
 8007640:	817b      	strh	r3, [r7, #10]
	    	// verify address range
	    	if((u16AdRegs + u16NRegs) > modH->u16regsize) return EXC_ADDR_RANGE;
 8007642:	89ba      	ldrh	r2, [r7, #12]
 8007644:	897b      	ldrh	r3, [r7, #10]
 8007646:	4413      	add	r3, r2
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	@ 0xa4
 800764e:	4293      	cmp	r3, r2
 8007650:	dd01      	ble.n	8007656 <validateRequest+0x16e>
 8007652:	2302      	movs	r3, #2
 8007654:	e08b      	b.n	800776e <validateRequest+0x286>

	    	//verify answer frame size in bytes

	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) / 8;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	7dda      	ldrb	r2, [r3, #23]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	7e1b      	ldrb	r3, [r3, #24]
 800765e:	4619      	mov	r1, r3
 8007660:	4610      	mov	r0, r2
 8007662:	f000 f88b 	bl	800777c <word>
 8007666:	4603      	mov	r3, r0
 8007668:	08db      	lsrs	r3, r3, #3
 800766a:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 8) u16NRegs++;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	7dda      	ldrb	r2, [r3, #23]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	7e1b      	ldrb	r3, [r3, #24]
 8007674:	4619      	mov	r1, r3
 8007676:	4610      	mov	r0, r2
 8007678:	f000 f880 	bl	800777c <word>
 800767c:	4603      	mov	r3, r0
 800767e:	f003 0307 	and.w	r3, r3, #7
 8007682:	b29b      	uxth	r3, r3
 8007684:	2b00      	cmp	r3, #0
 8007686:	d002      	beq.n	800768e <validateRequest+0x1a6>
 8007688:	897b      	ldrh	r3, [r7, #10]
 800768a:	3301      	adds	r3, #1
 800768c:	817b      	strh	r3, [r7, #10]
	    	u16NRegs = u16NRegs + 5; // adding the header  and CRC ( Slave address + Function code  + number of data bytes to follow + 2-byte CRC )
 800768e:	897b      	ldrh	r3, [r7, #10]
 8007690:	3305      	adds	r3, #5
 8007692:	817b      	strh	r3, [r7, #10]
	        if(u16NRegs > 256) return EXC_REGS_QUANT;
 8007694:	897b      	ldrh	r3, [r7, #10]
 8007696:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800769a:	d960      	bls.n	800775e <validateRequest+0x276>
 800769c:	2303      	movs	r3, #3
 800769e:	e066      	b.n	800776e <validateRequest+0x286>

	        break;
	    case MB_FC_WRITE_COIL:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	7d5a      	ldrb	r2, [r3, #21]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	7d9b      	ldrb	r3, [r3, #22]
 80076a8:	4619      	mov	r1, r3
 80076aa:	4610      	mov	r0, r2
 80076ac:	f000 f866 	bl	800777c <word>
 80076b0:	4603      	mov	r3, r0
 80076b2:	091b      	lsrs	r3, r3, #4
 80076b4:	81bb      	strh	r3, [r7, #12]
	    	if(word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) % 16) u16AdRegs++;	// check for incomplete words
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	7d5a      	ldrb	r2, [r3, #21]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	7d9b      	ldrb	r3, [r3, #22]
 80076be:	4619      	mov	r1, r3
 80076c0:	4610      	mov	r0, r2
 80076c2:	f000 f85b 	bl	800777c <word>
 80076c6:	4603      	mov	r3, r0
 80076c8:	f003 030f 	and.w	r3, r3, #15
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d002      	beq.n	80076d8 <validateRequest+0x1f0>
 80076d2:	89bb      	ldrh	r3, [r7, #12]
 80076d4:	3301      	adds	r3, #1
 80076d6:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH->u16regsize) return EXC_ADDR_RANGE;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 80076de:	89ba      	ldrh	r2, [r7, #12]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d93e      	bls.n	8007762 <validateRequest+0x27a>
 80076e4:	2302      	movs	r3, #2
 80076e6:	e042      	b.n	800776e <validateRequest+0x286>
	        break;
	    case MB_FC_WRITE_REGISTER :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	7d5a      	ldrb	r2, [r3, #21]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	7d9b      	ldrb	r3, [r3, #22]
 80076f0:	4619      	mov	r1, r3
 80076f2:	4610      	mov	r0, r2
 80076f4:	f000 f842 	bl	800777c <word>
 80076f8:	4603      	mov	r3, r0
 80076fa:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH-> u16regsize) return EXC_ADDR_RANGE;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 8007702:	89ba      	ldrh	r2, [r7, #12]
 8007704:	429a      	cmp	r2, r3
 8007706:	d92e      	bls.n	8007766 <validateRequest+0x27e>
 8007708:	2302      	movs	r3, #2
 800770a:	e030      	b.n	800776e <validateRequest+0x286>
	        break;
	    case MB_FC_READ_REGISTERS :
	    case MB_FC_READ_INPUT_REGISTER :
	    case MB_FC_WRITE_MULTIPLE_REGISTERS :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	7d5a      	ldrb	r2, [r3, #21]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	7d9b      	ldrb	r3, [r3, #22]
 8007714:	4619      	mov	r1, r3
 8007716:	4610      	mov	r0, r2
 8007718:	f000 f830 	bl	800777c <word>
 800771c:	4603      	mov	r3, r0
 800771e:	81bb      	strh	r3, [r7, #12]
	        u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	7dda      	ldrb	r2, [r3, #23]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	7e1b      	ldrb	r3, [r3, #24]
 8007728:	4619      	mov	r1, r3
 800772a:	4610      	mov	r0, r2
 800772c:	f000 f826 	bl	800777c <word>
 8007730:	4603      	mov	r3, r0
 8007732:	817b      	strh	r3, [r7, #10]
	        if (( u16AdRegs + u16NRegs ) > modH->u16regsize) return EXC_ADDR_RANGE;
 8007734:	89ba      	ldrh	r2, [r7, #12]
 8007736:	897b      	ldrh	r3, [r7, #10]
 8007738:	4413      	add	r3, r2
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	@ 0xa4
 8007740:	4293      	cmp	r3, r2
 8007742:	dd01      	ble.n	8007748 <validateRequest+0x260>
 8007744:	2302      	movs	r3, #2
 8007746:	e012      	b.n	800776e <validateRequest+0x286>

	        //verify answer frame size in bytes
	        u16NRegs = u16NRegs*2 + 5; // adding the header  and CRC
 8007748:	897b      	ldrh	r3, [r7, #10]
 800774a:	005b      	lsls	r3, r3, #1
 800774c:	b29b      	uxth	r3, r3
 800774e:	3305      	adds	r3, #5
 8007750:	817b      	strh	r3, [r7, #10]
	        if ( u16NRegs > 256 ) return EXC_REGS_QUANT;
 8007752:	897b      	ldrh	r3, [r7, #10]
 8007754:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007758:	d907      	bls.n	800776a <validateRequest+0x282>
 800775a:	2303      	movs	r3, #3
 800775c:	e007      	b.n	800776e <validateRequest+0x286>
	        break;
 800775e:	bf00      	nop
 8007760:	e004      	b.n	800776c <validateRequest+0x284>
	        break;
 8007762:	bf00      	nop
 8007764:	e002      	b.n	800776c <validateRequest+0x284>
	        break;
 8007766:	bf00      	nop
 8007768:	e000      	b.n	800776c <validateRequest+0x284>
	        break;
 800776a:	bf00      	nop
	    }
	    return 0; // OK, no exception code thrown
 800776c:	2300      	movs	r3, #0

}
 800776e:	4618      	mov	r0, r3
 8007770:	3710      	adds	r7, #16
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop
 8007778:	08008250 	.word	0x08008250

0800777c <word>:
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L)
{
 800777c:	b480      	push	{r7}
 800777e:	b085      	sub	sp, #20
 8007780:	af00      	add	r7, sp, #0
 8007782:	4603      	mov	r3, r0
 8007784:	460a      	mov	r2, r1
 8007786:	71fb      	strb	r3, [r7, #7]
 8007788:	4613      	mov	r3, r2
 800778a:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 800778c:	79bb      	ldrb	r3, [r7, #6]
 800778e:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 8007790:	79fb      	ldrb	r3, [r7, #7]
 8007792:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 8007794:	89bb      	ldrh	r3, [r7, #12]
}
 8007796:	4618      	mov	r0, r3
 8007798:	3714      	adds	r7, #20
 800779a:	46bd      	mov	sp, r7
 800779c:	bc80      	pop	{r7}
 800779e:	4770      	bx	lr

080077a0 <calcCRC>:
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b087      	sub	sp, #28
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	460b      	mov	r3, r1
 80077aa:	70fb      	strb	r3, [r7, #3]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 80077ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80077b0:	617b      	str	r3, [r7, #20]
    for (unsigned char i = 0; i < u8length; i++)
 80077b2:	2300      	movs	r3, #0
 80077b4:	74fb      	strb	r3, [r7, #19]
 80077b6:	e023      	b.n	8007800 <calcCRC+0x60>
    {
        temp = temp ^ Buffer[i];
 80077b8:	7cfb      	ldrb	r3, [r7, #19]
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	4413      	add	r3, r2
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	461a      	mov	r2, r3
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	4053      	eors	r3, r2
 80077c6:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 80077c8:	2301      	movs	r3, #1
 80077ca:	74bb      	strb	r3, [r7, #18]
 80077cc:	e012      	b.n	80077f4 <calcCRC+0x54>
        {
            flag = temp & 0x0001;
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	f003 0301 	and.w	r3, r3, #1
 80077d4:	60bb      	str	r3, [r7, #8]
            temp >>=1;
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	085b      	lsrs	r3, r3, #1
 80077da:	617b      	str	r3, [r7, #20]
            if (flag)
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d005      	beq.n	80077ee <calcCRC+0x4e>
                temp ^= 0xA001;
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	f483 4320 	eor.w	r3, r3, #40960	@ 0xa000
 80077e8:	f083 0301 	eor.w	r3, r3, #1
 80077ec:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 80077ee:	7cbb      	ldrb	r3, [r7, #18]
 80077f0:	3301      	adds	r3, #1
 80077f2:	74bb      	strb	r3, [r7, #18]
 80077f4:	7cbb      	ldrb	r3, [r7, #18]
 80077f6:	2b08      	cmp	r3, #8
 80077f8:	d9e9      	bls.n	80077ce <calcCRC+0x2e>
    for (unsigned char i = 0; i < u8length; i++)
 80077fa:	7cfb      	ldrb	r3, [r7, #19]
 80077fc:	3301      	adds	r3, #1
 80077fe:	74fb      	strb	r3, [r7, #19]
 8007800:	7cfa      	ldrb	r2, [r7, #19]
 8007802:	78fb      	ldrb	r3, [r7, #3]
 8007804:	429a      	cmp	r2, r3
 8007806:	d3d7      	bcc.n	80077b8 <calcCRC+0x18>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	0a1b      	lsrs	r3, r3, #8
 800780c:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) | temp2;
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	021b      	lsls	r3, r3, #8
 8007812:	68fa      	ldr	r2, [r7, #12]
 8007814:	4313      	orrs	r3, r2
 8007816:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	b29b      	uxth	r3, r3
 800781c:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	b29b      	uxth	r3, r3

}
 8007822:	4618      	mov	r0, r3
 8007824:	371c      	adds	r7, #28
 8007826:	46bd      	mov	sp, r7
 8007828:	bc80      	pop	{r7}
 800782a:	4770      	bx	lr

0800782c <buildException>:
 *
 * @ingroup u8exception exception number
 * @ingroup modH modbus handler
 */
void buildException( uint8_t u8exception, modbusHandler_t *modH )
{
 800782c:	b480      	push	{r7}
 800782e:	b085      	sub	sp, #20
 8007830:	af00      	add	r7, sp, #0
 8007832:	4603      	mov	r3, r0
 8007834:	6039      	str	r1, [r7, #0]
 8007836:	71fb      	strb	r3, [r7, #7]
    uint8_t u8func = modH->u8Buffer[ FUNC ];  // get the original FUNC code
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	7d1b      	ldrb	r3, [r3, #20]
 800783c:	73fb      	strb	r3, [r7, #15]

    modH->u8Buffer[ ID ]      = modH->u8id;
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	7a1a      	ldrb	r2, [r3, #8]
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	74da      	strb	r2, [r3, #19]
    modH->u8Buffer[ FUNC ]    = u8func + 0x80;
 8007846:	7bfb      	ldrb	r3, [r7, #15]
 8007848:	3b80      	subs	r3, #128	@ 0x80
 800784a:	b2da      	uxtb	r2, r3
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	751a      	strb	r2, [r3, #20]
    modH->u8Buffer[ 2 ]       = u8exception;
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	79fa      	ldrb	r2, [r7, #7]
 8007854:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	2203      	movs	r2, #3
 800785a:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
}
 800785e:	bf00      	nop
 8007860:	3714      	adds	r7, #20
 8007862:	46bd      	mov	sp, r7
 8007864:	bc80      	pop	{r7}
 8007866:	4770      	bx	lr

08007868 <sendTxBuffer>:
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
static void sendTxBuffer(modbusHandler_t *modH)
{
 8007868:	b590      	push	{r4, r7, lr}
 800786a:	b087      	sub	sp, #28
 800786c:	af02      	add	r7, sp, #8
 800786e:	6078      	str	r0, [r7, #4]
    // when in slaveType and u8AddressMode == ADDRESS_BROADCAST, do not send anything
    if (modH->uModbusType == MB_SLAVE && modH->u8AddressMode == ADDRESS_BROADCAST)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	2b03      	cmp	r3, #3
 8007876:	d111      	bne.n	800789c <sendTxBuffer+0x34>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 800787e:	2b00      	cmp	r3, #0
 8007880:	d10c      	bne.n	800789c <sendTxBuffer+0x34>
    {
        modH->u8BufferSize = 0;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
        // increase message counter
        modH->u16OutCnt++;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f8b3 309e 	ldrh.w	r3, [r3, #158]	@ 0x9e
 8007890:	3301      	adds	r3, #1
 8007892:	b29a      	uxth	r2, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
        return;
 800789a:	e086      	b.n	80079aa <sendTxBuffer+0x142>
#if  ENABLE_TCP == 1
if(modH->xTypeHW != TCP_HW)
	 {
#endif

	uint16_t u16crc = calcCRC(modH->u8Buffer, modH->u8BufferSize);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f103 0213 	add.w	r2, r3, #19
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80078a8:	4619      	mov	r1, r3
 80078aa:	4610      	mov	r0, r2
 80078ac:	f7ff ff78 	bl	80077a0 <calcCRC>
 80078b0:	4603      	mov	r3, r0
 80078b2:	81fb      	strh	r3, [r7, #14]
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 80078b4:	89fb      	ldrh	r3, [r7, #14]
 80078b6:	0a1b      	lsrs	r3, r3, #8
 80078b8:	b29a      	uxth	r2, r3
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80078c0:	4619      	mov	r1, r3
 80078c2:	b2d2      	uxtb	r2, r2
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	440b      	add	r3, r1
 80078c8:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80078d0:	3301      	adds	r3, #1
 80078d2:	b2da      	uxtb	r2, r3
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80078e0:	4619      	mov	r1, r3
 80078e2:	89fb      	ldrh	r3, [r7, #14]
 80078e4:	b2da      	uxtb	r2, r3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	440b      	add	r3, r1
 80078ea:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80078f2:	3301      	adds	r3, #1
 80078f4:	b2da      	uxtb	r2, r3
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
#if ENABLE_USB_CDC == 1 || ENABLE_TCP == 1
    if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA )
    {
#endif

    	if (modH->EN_Port != NULL)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d00c      	beq.n	800791e <sendTxBuffer+0xb6>
        {
    		//enable transmitter, disable receiver to avoid echo on RS485 transceivers
    		HAL_HalfDuplex_EnableTransmitter(modH->port);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	4618      	mov	r0, r3
 800790a:	f7fb f832 	bl	8002972 <HAL_HalfDuplex_EnableTransmitter>
    		HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	68d8      	ldr	r0, [r3, #12]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	8a1b      	ldrh	r3, [r3, #16]
 8007916:	2201      	movs	r2, #1
 8007918:	4619      	mov	r1, r3
 800791a:	f7f9 fd56 	bl	80013ca <HAL_GPIO_WritePin>
#if ENABLE_USART_DMA ==1
    	if(modH->xTypeHW == USART_HW)
    	{
#endif
    		// transfer buffer to serial line IT
    		HAL_UART_Transmit_IT(modH->port, modH->u8Buffer,  modH->u8BufferSize);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6858      	ldr	r0, [r3, #4]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f103 0113 	add.w	r1, r3, #19
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 800792e:	461a      	mov	r2, r3
 8007930:	f7fa fc64 	bl	80021fc <HAL_UART_Transmit_IT>
        	HAL_UART_Transmit_DMA(modH->port, modH->u8Buffer, modH->u8BufferSize);

        }
#endif

        ulTaskNotifyTake(pdTRUE, 250); //wait notification from TXE interrupt
 8007934:	21fa      	movs	r1, #250	@ 0xfa
 8007936:	2001      	movs	r0, #1
 8007938:	f7fd fd76 	bl	8005428 <ulTaskNotifyTake>
*/
#if defined(STM32H7)  || defined(STM32F3) || defined(STM32L4) || defined(STM32L082xx) || defined(STM32F7) || defined(STM32WB) || defined(STM32G070xx) || defined(STM32F0) || defined(STM32G431xx)
          while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
#else
          // F429, F103, L152 ...
	  while((modH->port->Instance->SR & USART_SR_TC) ==0 )
 800793c:	bf00      	nop
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800794a:	2b00      	cmp	r3, #0
 800794c:	d0f7      	beq.n	800793e <sendTxBuffer+0xd6>
         {
 	        //block the task until the the last byte is send out of the shifting buffer in USART
         }


         if (modH->EN_Port != NULL)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d00c      	beq.n	8007970 <sendTxBuffer+0x108>
         {

             //return RS485 transceiver to receive mode
        	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	68d8      	ldr	r0, [r3, #12]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	8a1b      	ldrh	r3, [r3, #16]
 800795e:	2200      	movs	r2, #0
 8007960:	4619      	mov	r1, r3
 8007962:	f7f9 fd32 	bl	80013ca <HAL_GPIO_WritePin>
        	 //enable receiver, disable transmitter
        	 HAL_HalfDuplex_EnableReceiver(modH->port);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	4618      	mov	r0, r3
 800796c:	f7fb f834 	bl	80029d8 <HAL_HalfDuplex_EnableReceiver>

         }

         // set timeout for master query
         if(modH->uModbusType == MB_MASTER )
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	2b04      	cmp	r3, #4
 8007976:	d10c      	bne.n	8007992 <sendTxBuffer+0x12a>
         {
        	 xTimerReset(modH->xTimerTimeout,0);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 40b8 	ldr.w	r4, [r3, #184]	@ 0xb8
 800797e:	f7fd f859 	bl	8004a34 <xTaskGetTickCount>
 8007982:	4602      	mov	r2, r0
 8007984:	2300      	movs	r3, #0
 8007986:	9300      	str	r3, [sp, #0]
 8007988:	2300      	movs	r3, #0
 800798a:	2102      	movs	r1, #2
 800798c:	4620      	mov	r0, r4
 800798e:	f7fd fff7 	bl	8005980 <xTimerGenericCommand>

#endif

#endif

     modH->u8BufferSize = 0;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2200      	movs	r2, #0
 8007996:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
     // increase message counter
     modH->u16OutCnt++;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8b3 309e 	ldrh.w	r3, [r3, #158]	@ 0x9e
 80079a0:	3301      	adds	r3, #1
 80079a2:	b29a      	uxth	r2, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e


}
 80079aa:	3714      	adds	r7, #20
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd90      	pop	{r4, r7, pc}

080079b0 <process_FC1>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC1(modbusHandler_t *modH )
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b086      	sub	sp, #24
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit, u8bytesno, u8bitsno;
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	7d5a      	ldrb	r2, [r3, #21]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	7d9b      	ldrb	r3, [r3, #22]
 80079c0:	4619      	mov	r1, r3
 80079c2:	4610      	mov	r0, r2
 80079c4:	f7ff feda 	bl	800777c <word>
 80079c8:	4603      	mov	r3, r0
 80079ca:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	7dda      	ldrb	r2, [r3, #23]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	7e1b      	ldrb	r3, [r3, #24]
 80079d4:	4619      	mov	r1, r3
 80079d6:	4610      	mov	r0, r2
 80079d8:	f7ff fed0 	bl	800777c <word>
 80079dc:	4603      	mov	r3, r0
 80079de:	823b      	strh	r3, [r7, #16]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 80079e0:	8a3b      	ldrh	r3, [r7, #16]
 80079e2:	08db      	lsrs	r3, r3, #3
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	75fb      	strb	r3, [r7, #23]
    if (u16Coilno % 8 != 0) u8bytesno ++;
 80079e8:	8a3b      	ldrh	r3, [r7, #16]
 80079ea:	f003 0307 	and.w	r3, r3, #7
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d002      	beq.n	80079fa <process_FC1+0x4a>
 80079f4:	7dfb      	ldrb	r3, [r7, #23]
 80079f6:	3301      	adds	r3, #1
 80079f8:	75fb      	strb	r3, [r7, #23]
    modH->u8Buffer[ ADD_HI ]  = u8bytesno;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	7dfa      	ldrb	r2, [r7, #23]
 80079fe:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = ADD_LO;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2203      	movs	r2, #3
 8007a04:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    modH->u8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8007a0e:	461a      	mov	r2, r3
 8007a10:	7dfb      	ldrb	r3, [r7, #23]
 8007a12:	4413      	add	r3, r2
 8007a14:	3b01      	subs	r3, #1
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	4413      	add	r3, r2
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	74da      	strb	r2, [r3, #19]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	75bb      	strb	r3, [r7, #22]

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8007a22:	2300      	movs	r3, #0
 8007a24:	82bb      	strh	r3, [r7, #20]
 8007a26:	e058      	b.n	8007ada <process_FC1+0x12a>
    {
        u16coil = u16StartCoil + u16currentCoil;
 8007a28:	8a7a      	ldrh	r2, [r7, #18]
 8007a2a:	8abb      	ldrh	r3, [r7, #20]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	81bb      	strh	r3, [r7, #12]
        u16currentRegister =  (u16coil / 16);
 8007a30:	89bb      	ldrh	r3, [r7, #12]
 8007a32:	091b      	lsrs	r3, r3, #4
 8007a34:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 8007a36:	89bb      	ldrh	r3, [r7, #12]
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	f003 030f 	and.w	r3, r3, #15
 8007a3e:	727b      	strb	r3, [r7, #9]

        bitWrite(
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8007a46:	897b      	ldrh	r3, [r7, #10]
 8007a48:	005b      	lsls	r3, r3, #1
 8007a4a:	4413      	add	r3, r2
 8007a4c:	881b      	ldrh	r3, [r3, #0]
 8007a4e:	461a      	mov	r2, r3
 8007a50:	7a7b      	ldrb	r3, [r7, #9]
 8007a52:	fa42 f303 	asr.w	r3, r2, r3
 8007a56:	f003 0301 	and.w	r3, r3, #1
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d014      	beq.n	8007a88 <process_FC1+0xd8>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8007a64:	461a      	mov	r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4413      	add	r3, r2
 8007a6a:	7cda      	ldrb	r2, [r3, #19]
 8007a6c:	7dbb      	ldrb	r3, [r7, #22]
 8007a6e:	2101      	movs	r1, #1
 8007a70:	fa01 f303 	lsl.w	r3, r1, r3
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	6879      	ldr	r1, [r7, #4]
 8007a78:	f891 1093 	ldrb.w	r1, [r1, #147]	@ 0x93
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	b2da      	uxtb	r2, r3
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	440b      	add	r3, r1
 8007a84:	74da      	strb	r2, [r3, #19]
 8007a86:	e015      	b.n	8007ab4 <process_FC1+0x104>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8007a8e:	461a      	mov	r2, r3
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	4413      	add	r3, r2
 8007a94:	7cda      	ldrb	r2, [r3, #19]
 8007a96:	7dbb      	ldrb	r3, [r7, #22]
 8007a98:	2101      	movs	r1, #1
 8007a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	43db      	mvns	r3, r3
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	6879      	ldr	r1, [r7, #4]
 8007aa6:	f891 1093 	ldrb.w	r1, [r1, #147]	@ 0x93
 8007aaa:	4013      	ands	r3, r2
 8007aac:	b2da      	uxtb	r2, r3
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	440b      	add	r3, r1
 8007ab2:	74da      	strb	r2, [r3, #19]
        	modH->u8Buffer[ modH->u8BufferSize ],
            u8bitsno,
		    bitRead( modH->u16regs[ u16currentRegister ], u8currentBit ) );
        u8bitsno ++;
 8007ab4:	7dbb      	ldrb	r3, [r7, #22]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 8007aba:	7dbb      	ldrb	r3, [r7, #22]
 8007abc:	2b07      	cmp	r3, #7
 8007abe:	d909      	bls.n	8007ad4 <process_FC1+0x124>
        {
            u8bitsno = 0;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	75bb      	strb	r3, [r7, #22]
            modH->u8BufferSize++;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8007aca:	3301      	adds	r3, #1
 8007acc:	b2da      	uxtb	r2, r3
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8007ad4:	8abb      	ldrh	r3, [r7, #20]
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	82bb      	strh	r3, [r7, #20]
 8007ada:	8aba      	ldrh	r2, [r7, #20]
 8007adc:	8a3b      	ldrh	r3, [r7, #16]
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d3a2      	bcc.n	8007a28 <process_FC1+0x78>
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 8007ae2:	8a3b      	ldrh	r3, [r7, #16]
 8007ae4:	f003 0307 	and.w	r3, r3, #7
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d007      	beq.n	8007afe <process_FC1+0x14e>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8007af4:	3301      	adds	r3, #1
 8007af6:	b2da      	uxtb	r2, r3
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8007b04:	3302      	adds	r3, #2
 8007b06:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f7ff fead 	bl	8007868 <sendTxBuffer>
    return u8CopyBufferSize;
 8007b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3718      	adds	r7, #24
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}

08007b1a <process_FC3>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC3(modbusHandler_t *modH)
{
 8007b1a:	b580      	push	{r7, lr}
 8007b1c:	b084      	sub	sp, #16
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]

    uint16_t u16StartAdd = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	7d5a      	ldrb	r2, [r3, #21]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	7d9b      	ldrb	r3, [r3, #22]
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	4610      	mov	r0, r2
 8007b2e:	f7ff fe25 	bl	800777c <word>
 8007b32:	4603      	mov	r3, r0
 8007b34:	81bb      	strh	r3, [r7, #12]
    uint8_t u8regsno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	7dda      	ldrb	r2, [r3, #23]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	7e1b      	ldrb	r3, [r3, #24]
 8007b3e:	4619      	mov	r1, r3
 8007b40:	4610      	mov	r0, r2
 8007b42:	f7ff fe1b 	bl	800777c <word>
 8007b46:	4603      	mov	r3, r0
 8007b48:	72fb      	strb	r3, [r7, #11]
    uint8_t u8CopyBufferSize;
    uint16_t i;

    modH->u8Buffer[ 2 ]       = u8regsno * 2;
 8007b4a:	7afb      	ldrb	r3, [r7, #11]
 8007b4c:	005b      	lsls	r3, r3, #1
 8007b4e:	b2da      	uxtb	r2, r3
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = 3;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2203      	movs	r2, #3
 8007b58:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93

    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 8007b5c:	89bb      	ldrh	r3, [r7, #12]
 8007b5e:	81fb      	strh	r3, [r7, #14]
 8007b60:	e032      	b.n	8007bc8 <process_FC3+0xae>
    {
    	modH->u8Buffer[ modH->u8BufferSize ] = highByte(modH->u16regs[i]);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8007b68:	89fb      	ldrh	r3, [r7, #14]
 8007b6a:	005b      	lsls	r3, r3, #1
 8007b6c:	4413      	add	r3, r2
 8007b6e:	881b      	ldrh	r3, [r3, #0]
 8007b70:	0a1b      	lsrs	r3, r3, #8
 8007b72:	b29a      	uxth	r2, r3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	b2d2      	uxtb	r2, r2
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	440b      	add	r3, r1
 8007b82:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	b2da      	uxtb	r2, r3
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    	modH->u8Buffer[ modH->u8BufferSize ] = lowByte(modH->u16regs[i]);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8007b9a:	89fb      	ldrh	r3, [r7, #14]
 8007b9c:	005b      	lsls	r3, r3, #1
 8007b9e:	4413      	add	r3, r2
 8007ba0:	881a      	ldrh	r2, [r3, #0]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8007ba8:	4619      	mov	r1, r3
 8007baa:	b2d2      	uxtb	r2, r2
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	440b      	add	r3, r1
 8007bb0:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8007bb8:	3301      	adds	r3, #1
 8007bba:	b2da      	uxtb	r2, r3
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 8007bc2:	89fb      	ldrh	r3, [r7, #14]
 8007bc4:	3301      	adds	r3, #1
 8007bc6:	81fb      	strh	r3, [r7, #14]
 8007bc8:	89fa      	ldrh	r2, [r7, #14]
 8007bca:	89b9      	ldrh	r1, [r7, #12]
 8007bcc:	7afb      	ldrb	r3, [r7, #11]
 8007bce:	440b      	add	r3, r1
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	dbc6      	blt.n	8007b62 <process_FC3+0x48>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8007bda:	3302      	adds	r3, #2
 8007bdc:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f7ff fe42 	bl	8007868 <sendTxBuffer>

    return u8CopyBufferSize;
 8007be4:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3710      	adds	r7, #16
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <process_FC5>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC5( modbusHandler_t *modH )
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit;
    uint16_t u16currentRegister;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	7d5a      	ldrb	r2, [r3, #21]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	7d9b      	ldrb	r3, [r3, #22]
 8007c00:	4619      	mov	r1, r3
 8007c02:	4610      	mov	r0, r2
 8007c04:	f7ff fdba 	bl	800777c <word>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	81fb      	strh	r3, [r7, #14]

    // point to the register and its bit
    u16currentRegister = (u16coil / 16);
 8007c0c:	89fb      	ldrh	r3, [r7, #14]
 8007c0e:	091b      	lsrs	r3, r3, #4
 8007c10:	81bb      	strh	r3, [r7, #12]
    u8currentBit = (uint8_t) (u16coil % 16);
 8007c12:	89fb      	ldrh	r3, [r7, #14]
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	f003 030f 	and.w	r3, r3, #15
 8007c1a:	72fb      	strb	r3, [r7, #11]

    // write to coil
    bitWrite(
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	7ddb      	ldrb	r3, [r3, #23]
 8007c20:	2bff      	cmp	r3, #255	@ 0xff
 8007c22:	d115      	bne.n	8007c50 <process_FC5+0x60>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8007c2a:	89bb      	ldrh	r3, [r7, #12]
 8007c2c:	005b      	lsls	r3, r3, #1
 8007c2e:	4413      	add	r3, r2
 8007c30:	8819      	ldrh	r1, [r3, #0]
 8007c32:	7afb      	ldrb	r3, [r7, #11]
 8007c34:	2201      	movs	r2, #1
 8007c36:	fa02 f303 	lsl.w	r3, r2, r3
 8007c3a:	b29a      	uxth	r2, r3
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 0098 	ldr.w	r0, [r3, #152]	@ 0x98
 8007c42:	89bb      	ldrh	r3, [r7, #12]
 8007c44:	005b      	lsls	r3, r3, #1
 8007c46:	4403      	add	r3, r0
 8007c48:	430a      	orrs	r2, r1
 8007c4a:	b292      	uxth	r2, r2
 8007c4c:	801a      	strh	r2, [r3, #0]
 8007c4e:	e016      	b.n	8007c7e <process_FC5+0x8e>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8007c56:	89bb      	ldrh	r3, [r7, #12]
 8007c58:	005b      	lsls	r3, r3, #1
 8007c5a:	4413      	add	r3, r2
 8007c5c:	8819      	ldrh	r1, [r3, #0]
 8007c5e:	7afb      	ldrb	r3, [r7, #11]
 8007c60:	2201      	movs	r2, #1
 8007c62:	fa02 f303 	lsl.w	r3, r2, r3
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	43db      	mvns	r3, r3
 8007c6a:	b29a      	uxth	r2, r3
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 0098 	ldr.w	r0, [r3, #152]	@ 0x98
 8007c72:	89bb      	ldrh	r3, [r7, #12]
 8007c74:	005b      	lsls	r3, r3, #1
 8007c76:	4403      	add	r3, r0
 8007c78:	400a      	ands	r2, r1
 8007c7a:	b292      	uxth	r2, r2
 8007c7c:	801a      	strh	r2, [r3, #0]
        u8currentBit,
		modH->u8Buffer[ NB_HI ] == 0xff );


    // send answer to master
    modH->u8BufferSize = 6;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2206      	movs	r2, #6
 8007c82:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    u8CopyBufferSize =  modH->u8BufferSize +2;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8007c8c:	3302      	adds	r3, #2
 8007c8e:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f7ff fde9 	bl	8007868 <sendTxBuffer>

    return u8CopyBufferSize;
 8007c96:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3710      	adds	r7, #16
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <process_FC6>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC6(modbusHandler_t *modH )
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b084      	sub	sp, #16
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]

    uint16_t u16add = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	7d5a      	ldrb	r2, [r3, #21]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	7d9b      	ldrb	r3, [r3, #22]
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	4610      	mov	r0, r2
 8007cb6:	f7ff fd61 	bl	800777c <word>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	81fb      	strh	r3, [r7, #14]
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	7dda      	ldrb	r2, [r3, #23]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	7e1b      	ldrb	r3, [r3, #24]
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	4610      	mov	r0, r2
 8007cca:	f7ff fd57 	bl	800777c <word>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	81bb      	strh	r3, [r7, #12]

    modH->u16regs[ u16add ] = u16val;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8007cd8:	89fb      	ldrh	r3, [r7, #14]
 8007cda:	005b      	lsls	r3, r3, #1
 8007cdc:	4413      	add	r3, r2
 8007cde:	89ba      	ldrh	r2, [r7, #12]
 8007ce0:	801a      	strh	r2, [r3, #0]

    // keep the same header
    modH->u8BufferSize = RESPONSE_SIZE;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2206      	movs	r2, #6
 8007ce6:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93

    u8CopyBufferSize = modH->u8BufferSize + 2;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8007cf0:	3302      	adds	r3, #2
 8007cf2:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f7ff fdb7 	bl	8007868 <sendTxBuffer>

    return u8CopyBufferSize;
 8007cfa:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3710      	adds	r7, #16
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}

08007d06 <process_FC15>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC15( modbusHandler_t *modH )
{
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b086      	sub	sp, #24
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;
    bool bTemp;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	7d5a      	ldrb	r2, [r3, #21]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	7d9b      	ldrb	r3, [r3, #22]
 8007d16:	4619      	mov	r1, r3
 8007d18:	4610      	mov	r0, r2
 8007d1a:	f7ff fd2f 	bl	800777c <word>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	7dda      	ldrb	r2, [r3, #23]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	7e1b      	ldrb	r3, [r3, #24]
 8007d2a:	4619      	mov	r1, r3
 8007d2c:	4610      	mov	r0, r2
 8007d2e:	f7ff fd25 	bl	800777c <word>
 8007d32:	4603      	mov	r3, r0
 8007d34:	823b      	strh	r3, [r7, #16]


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 8007d36:	2300      	movs	r3, #0
 8007d38:	75bb      	strb	r3, [r7, #22]
    u8frameByte = 7;
 8007d3a:	2307      	movs	r3, #7
 8007d3c:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8007d3e:	2300      	movs	r3, #0
 8007d40:	82bb      	strh	r3, [r7, #20]
 8007d42:	e058      	b.n	8007df6 <process_FC15+0xf0>
    {

        u16coil = u16StartCoil + u16currentCoil;
 8007d44:	8a7a      	ldrh	r2, [r7, #18]
 8007d46:	8abb      	ldrh	r3, [r7, #20]
 8007d48:	4413      	add	r3, r2
 8007d4a:	81bb      	strh	r3, [r7, #12]
        u16currentRegister = (u16coil / 16);
 8007d4c:	89bb      	ldrh	r3, [r7, #12]
 8007d4e:	091b      	lsrs	r3, r3, #4
 8007d50:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 8007d52:	89bb      	ldrh	r3, [r7, #12]
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	f003 030f 	and.w	r3, r3, #15
 8007d5a:	727b      	strb	r3, [r7, #9]

        bTemp = bitRead(
 8007d5c:	7dfb      	ldrb	r3, [r7, #23]
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	4413      	add	r3, r2
 8007d62:	7cdb      	ldrb	r3, [r3, #19]
 8007d64:	461a      	mov	r2, r3
 8007d66:	7dbb      	ldrb	r3, [r7, #22]
 8007d68:	fa42 f303 	asr.w	r3, r2, r3
 8007d6c:	f003 0301 	and.w	r3, r3, #1
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	bf14      	ite	ne
 8007d74:	2301      	movne	r3, #1
 8007d76:	2300      	moveq	r3, #0
 8007d78:	723b      	strb	r3, [r7, #8]
        			modH->u8Buffer[ u8frameByte ],
                    u8bitsno );

        bitWrite(
 8007d7a:	7a3b      	ldrb	r3, [r7, #8]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d015      	beq.n	8007dac <process_FC15+0xa6>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8007d86:	897b      	ldrh	r3, [r7, #10]
 8007d88:	005b      	lsls	r3, r3, #1
 8007d8a:	4413      	add	r3, r2
 8007d8c:	8819      	ldrh	r1, [r3, #0]
 8007d8e:	7a7b      	ldrb	r3, [r7, #9]
 8007d90:	2201      	movs	r2, #1
 8007d92:	fa02 f303 	lsl.w	r3, r2, r3
 8007d96:	b29a      	uxth	r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 0098 	ldr.w	r0, [r3, #152]	@ 0x98
 8007d9e:	897b      	ldrh	r3, [r7, #10]
 8007da0:	005b      	lsls	r3, r3, #1
 8007da2:	4403      	add	r3, r0
 8007da4:	430a      	orrs	r2, r1
 8007da6:	b292      	uxth	r2, r2
 8007da8:	801a      	strh	r2, [r3, #0]
 8007daa:	e016      	b.n	8007dda <process_FC15+0xd4>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8007db2:	897b      	ldrh	r3, [r7, #10]
 8007db4:	005b      	lsls	r3, r3, #1
 8007db6:	4413      	add	r3, r2
 8007db8:	8819      	ldrh	r1, [r3, #0]
 8007dba:	7a7b      	ldrb	r3, [r7, #9]
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	43db      	mvns	r3, r3
 8007dc6:	b29a      	uxth	r2, r3
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 0098 	ldr.w	r0, [r3, #152]	@ 0x98
 8007dce:	897b      	ldrh	r3, [r7, #10]
 8007dd0:	005b      	lsls	r3, r3, #1
 8007dd2:	4403      	add	r3, r0
 8007dd4:	400a      	ands	r2, r1
 8007dd6:	b292      	uxth	r2, r2
 8007dd8:	801a      	strh	r2, [r3, #0]
            modH->u16regs[ u16currentRegister ],
            u8currentBit,
            bTemp );

        u8bitsno ++;
 8007dda:	7dbb      	ldrb	r3, [r7, #22]
 8007ddc:	3301      	adds	r3, #1
 8007dde:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 8007de0:	7dbb      	ldrb	r3, [r7, #22]
 8007de2:	2b07      	cmp	r3, #7
 8007de4:	d904      	bls.n	8007df0 <process_FC15+0xea>
        {
            u8bitsno = 0;
 8007de6:	2300      	movs	r3, #0
 8007de8:	75bb      	strb	r3, [r7, #22]
            u8frameByte++;
 8007dea:	7dfb      	ldrb	r3, [r7, #23]
 8007dec:	3301      	adds	r3, #1
 8007dee:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8007df0:	8abb      	ldrh	r3, [r7, #20]
 8007df2:	3301      	adds	r3, #1
 8007df4:	82bb      	strh	r3, [r7, #20]
 8007df6:	8aba      	ldrh	r2, [r7, #20]
 8007df8:	8a3b      	ldrh	r3, [r7, #16]
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d3a2      	bcc.n	8007d44 <process_FC15+0x3e>
        }
    }

    // send outcoming message
    // it's just a copy of the incomping frame until 6th byte
    modH->u8BufferSize         = 6;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2206      	movs	r2, #6
 8007e02:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8007e0c:	3302      	adds	r3, #2
 8007e0e:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f7ff fd29 	bl	8007868 <sendTxBuffer>
    return u8CopyBufferSize;
 8007e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3718      	adds	r7, #24
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <process_FC16>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC16(modbusHandler_t *modH )
{
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b086      	sub	sp, #24
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
    uint16_t u16StartAdd = modH->u8Buffer[ ADD_HI ] << 8 | modH->u8Buffer[ ADD_LO ];
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	7d5b      	ldrb	r3, [r3, #21]
 8007e2e:	021b      	lsls	r3, r3, #8
 8007e30:	b21a      	sxth	r2, r3
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	7d9b      	ldrb	r3, [r3, #22]
 8007e36:	b21b      	sxth	r3, r3
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	b21b      	sxth	r3, r3
 8007e3c:	82bb      	strh	r3, [r7, #20]
    uint16_t u16regsno = modH->u8Buffer[ NB_HI ] << 8 | modH->u8Buffer[ NB_LO ];
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	7ddb      	ldrb	r3, [r3, #23]
 8007e42:	021b      	lsls	r3, r3, #8
 8007e44:	b21a      	sxth	r2, r3
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	7e1b      	ldrb	r3, [r3, #24]
 8007e4a:	b21b      	sxth	r3, r3
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	b21b      	sxth	r3, r3
 8007e50:	827b      	strh	r3, [r7, #18]
    uint8_t u8CopyBufferSize;
    uint16_t i;
    uint16_t temp;

    // build header
    modH->u8Buffer[ NB_HI ]   = 0;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	75da      	strb	r2, [r3, #23]
    modH->u8Buffer[ NB_LO ]   = (uint8_t) u16regsno; // answer is always 256 or less bytes
 8007e58:	8a7b      	ldrh	r3, [r7, #18]
 8007e5a:	b2da      	uxtb	r2, r3
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	761a      	strb	r2, [r3, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2206      	movs	r2, #6
 8007e64:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93

    // write registers
    for (i = 0; i < u16regsno; i++)
 8007e68:	2300      	movs	r3, #0
 8007e6a:	82fb      	strh	r3, [r7, #22]
 8007e6c:	e01d      	b.n	8007eaa <process_FC16+0x88>
    {
        temp = word(
        		modH->u8Buffer[ (BYTE_CNT + 1) + i * 2 ],
 8007e6e:	8afb      	ldrh	r3, [r7, #22]
 8007e70:	005b      	lsls	r3, r3, #1
 8007e72:	3307      	adds	r3, #7
        temp = word(
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	4413      	add	r3, r2
 8007e78:	7cd8      	ldrb	r0, [r3, #19]
				modH->u8Buffer[ (BYTE_CNT + 2) + i * 2 ]);
 8007e7a:	8afb      	ldrh	r3, [r7, #22]
 8007e7c:	3304      	adds	r3, #4
 8007e7e:	005b      	lsls	r3, r3, #1
        temp = word(
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	4413      	add	r3, r2
 8007e84:	7cdb      	ldrb	r3, [r3, #19]
 8007e86:	4619      	mov	r1, r3
 8007e88:	f7ff fc78 	bl	800777c <word>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	81fb      	strh	r3, [r7, #14]

        modH->u16regs[ u16StartAdd + i ] = temp;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8007e96:	8ab9      	ldrh	r1, [r7, #20]
 8007e98:	8afb      	ldrh	r3, [r7, #22]
 8007e9a:	440b      	add	r3, r1
 8007e9c:	005b      	lsls	r3, r3, #1
 8007e9e:	4413      	add	r3, r2
 8007ea0:	89fa      	ldrh	r2, [r7, #14]
 8007ea2:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < u16regsno; i++)
 8007ea4:	8afb      	ldrh	r3, [r7, #22]
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	82fb      	strh	r3, [r7, #22]
 8007eaa:	8afa      	ldrh	r2, [r7, #22]
 8007eac:	8a7b      	ldrh	r3, [r7, #18]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d3dd      	bcc.n	8007e6e <process_FC16+0x4c>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8007eb8:	3302      	adds	r3, #2
 8007eba:	747b      	strb	r3, [r7, #17]
    sendTxBuffer(modH);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f7ff fcd3 	bl	8007868 <sendTxBuffer>

    return u8CopyBufferSize;
 8007ec2:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3718      	adds	r7, #24
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
	...

08007ed0 <HAL_UART_TxCpltCallback>:
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b086      	sub	sp, #24
 8007ed4:	af02      	add	r7, sp, #8
 8007ed6:	6078      	str	r0, [r7, #4]
	/* Modbus RTU TX callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < numberHandlers; i++ )
 8007edc:	2300      	movs	r3, #0
 8007ede:	60fb      	str	r3, [r7, #12]
 8007ee0:	e019      	b.n	8007f16 <HAL_UART_TxCpltCallback+0x46>
	{
	   	if (mHandlers[i]->port == huart  )
 8007ee2:	4a17      	ldr	r2, [pc, #92]	@ (8007f40 <HAL_UART_TxCpltCallback+0x70>)
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d10e      	bne.n	8007f10 <HAL_UART_TxCpltCallback+0x40>
	   	{
	   		// notify the end of TX
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 8007ef2:	4a13      	ldr	r2, [pc, #76]	@ (8007f40 <HAL_UART_TxCpltCallback+0x70>)
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007efa:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 8007efe:	f107 0308 	add.w	r3, r7, #8
 8007f02:	9300      	str	r3, [sp, #0]
 8007f04:	2300      	movs	r3, #0
 8007f06:	2200      	movs	r2, #0
 8007f08:	2100      	movs	r1, #0
 8007f0a:	f7fd fb7b 	bl	8005604 <xTaskGenericNotifyFromISR>
	   		break;
 8007f0e:	e008      	b.n	8007f22 <HAL_UART_TxCpltCallback+0x52>
	for (i = 0; i < numberHandlers; i++ )
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	3301      	adds	r3, #1
 8007f14:	60fb      	str	r3, [r7, #12]
 8007f16:	4b0b      	ldr	r3, [pc, #44]	@ (8007f44 <HAL_UART_TxCpltCallback+0x74>)
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	dbdf      	blt.n	8007ee2 <HAL_UART_TxCpltCallback+0x12>
	   	}

	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d007      	beq.n	8007f38 <HAL_UART_TxCpltCallback+0x68>
 8007f28:	4b07      	ldr	r3, [pc, #28]	@ (8007f48 <HAL_UART_TxCpltCallback+0x78>)
 8007f2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f2e:	601a      	str	r2, [r3, #0]
 8007f30:	f3bf 8f4f 	dsb	sy
 8007f34:	f3bf 8f6f 	isb	sy
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 8007f38:	bf00      	nop
 8007f3a:	3710      	adds	r7, #16
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	20001924 	.word	0x20001924
 8007f44:	2000192c 	.word	0x2000192c
 8007f48:	e000ed04 	.word	0xe000ed04

08007f4c <HAL_UART_RxCpltCallback>:
 * user should implement the correct control flow and verification to maintain
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8007f4c:	b590      	push	{r4, r7, lr}
 8007f4e:	b087      	sub	sp, #28
 8007f50:	af02      	add	r7, sp, #8
 8007f52:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8007f54:	2300      	movs	r3, #0
 8007f56:	60bb      	str	r3, [r7, #8]

	/* Modbus RTU RX callback BEGIN */
    int i;
    for (i = 0; i < numberHandlers; i++ )
 8007f58:	2300      	movs	r3, #0
 8007f5a:	60fb      	str	r3, [r7, #12]
 8007f5c:	e042      	b.n	8007fe4 <HAL_UART_RxCpltCallback+0x98>
    {
    	if (mHandlers[i]->port == UartHandle  )
 8007f5e:	4a2d      	ldr	r2, [pc, #180]	@ (8008014 <HAL_UART_RxCpltCallback+0xc8>)
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d137      	bne.n	8007fde <HAL_UART_RxCpltCallback+0x92>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW)
 8007f6e:	4a29      	ldr	r2, [pc, #164]	@ (8008014 <HAL_UART_RxCpltCallback+0xc8>)
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f76:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d139      	bne.n	8007ff2 <HAL_UART_RxCpltCallback+0xa6>
    		{
    			RingAdd(&mHandlers[i]->xBufferRX, mHandlers[i]->dataRX);
 8007f7e:	4a25      	ldr	r2, [pc, #148]	@ (8008014 <HAL_UART_RxCpltCallback+0xc8>)
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f86:	f103 02c0 	add.w	r2, r3, #192	@ 0xc0
 8007f8a:	4922      	ldr	r1, [pc, #136]	@ (8008014 <HAL_UART_RxCpltCallback+0xc8>)
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007f92:	f893 30a6 	ldrb.w	r3, [r3, #166]	@ 0xa6
 8007f96:	4619      	mov	r1, r3
 8007f98:	4610      	mov	r0, r2
 8007f9a:	f7fe fb97 	bl	80066cc <RingAdd>
    			HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 8007f9e:	4a1d      	ldr	r2, [pc, #116]	@ (8008014 <HAL_UART_RxCpltCallback+0xc8>)
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fa6:	6858      	ldr	r0, [r3, #4]
 8007fa8:	4a1a      	ldr	r2, [pc, #104]	@ (8008014 <HAL_UART_RxCpltCallback+0xc8>)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fb0:	33a6      	adds	r3, #166	@ 0xa6
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	f7fa f956 	bl	8002266 <HAL_UART_Receive_IT>
    			xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 8007fba:	4a16      	ldr	r2, [pc, #88]	@ (8008014 <HAL_UART_RxCpltCallback+0xc8>)
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fc2:	f8d3 40b4 	ldr.w	r4, [r3, #180]	@ 0xb4
 8007fc6:	f7fc fd43 	bl	8004a50 <xTaskGetTickCountFromISR>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	f107 0308 	add.w	r3, r7, #8
 8007fd0:	2100      	movs	r1, #0
 8007fd2:	9100      	str	r1, [sp, #0]
 8007fd4:	2107      	movs	r1, #7
 8007fd6:	4620      	mov	r0, r4
 8007fd8:	f7fd fcd2 	bl	8005980 <xTimerGenericCommand>
    		}
    		break;
 8007fdc:	e009      	b.n	8007ff2 <HAL_UART_RxCpltCallback+0xa6>
    for (i = 0; i < numberHandlers; i++ )
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	60fb      	str	r3, [r7, #12]
 8007fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8008018 <HAL_UART_RxCpltCallback+0xcc>)
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	461a      	mov	r2, r3
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	4293      	cmp	r3, r2
 8007fee:	dbb6      	blt.n	8007f5e <HAL_UART_RxCpltCallback+0x12>
 8007ff0:	e000      	b.n	8007ff4 <HAL_UART_RxCpltCallback+0xa8>
    		break;
 8007ff2:	bf00      	nop
    	}
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d007      	beq.n	800800a <HAL_UART_RxCpltCallback+0xbe>
 8007ffa:	4b08      	ldr	r3, [pc, #32]	@ (800801c <HAL_UART_RxCpltCallback+0xd0>)
 8007ffc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008000:	601a      	str	r2, [r3, #0]
 8008002:	f3bf 8f4f 	dsb	sy
 8008006:	f3bf 8f6f 	isb	sy
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 *
	 * */

}
 800800a:	bf00      	nop
 800800c:	3714      	adds	r7, #20
 800800e:	46bd      	mov	sp, r7
 8008010:	bd90      	pop	{r4, r7, pc}
 8008012:	bf00      	nop
 8008014:	20001924 	.word	0x20001924
 8008018:	2000192c 	.word	0x2000192c
 800801c:	e000ed04 	.word	0xe000ed04

08008020 <memset>:
 8008020:	4603      	mov	r3, r0
 8008022:	4402      	add	r2, r0
 8008024:	4293      	cmp	r3, r2
 8008026:	d100      	bne.n	800802a <memset+0xa>
 8008028:	4770      	bx	lr
 800802a:	f803 1b01 	strb.w	r1, [r3], #1
 800802e:	e7f9      	b.n	8008024 <memset+0x4>

08008030 <__libc_init_array>:
 8008030:	b570      	push	{r4, r5, r6, lr}
 8008032:	2600      	movs	r6, #0
 8008034:	4d0c      	ldr	r5, [pc, #48]	@ (8008068 <__libc_init_array+0x38>)
 8008036:	4c0d      	ldr	r4, [pc, #52]	@ (800806c <__libc_init_array+0x3c>)
 8008038:	1b64      	subs	r4, r4, r5
 800803a:	10a4      	asrs	r4, r4, #2
 800803c:	42a6      	cmp	r6, r4
 800803e:	d109      	bne.n	8008054 <__libc_init_array+0x24>
 8008040:	f000 f828 	bl	8008094 <_init>
 8008044:	2600      	movs	r6, #0
 8008046:	4d0a      	ldr	r5, [pc, #40]	@ (8008070 <__libc_init_array+0x40>)
 8008048:	4c0a      	ldr	r4, [pc, #40]	@ (8008074 <__libc_init_array+0x44>)
 800804a:	1b64      	subs	r4, r4, r5
 800804c:	10a4      	asrs	r4, r4, #2
 800804e:	42a6      	cmp	r6, r4
 8008050:	d105      	bne.n	800805e <__libc_init_array+0x2e>
 8008052:	bd70      	pop	{r4, r5, r6, pc}
 8008054:	f855 3b04 	ldr.w	r3, [r5], #4
 8008058:	4798      	blx	r3
 800805a:	3601      	adds	r6, #1
 800805c:	e7ee      	b.n	800803c <__libc_init_array+0xc>
 800805e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008062:	4798      	blx	r3
 8008064:	3601      	adds	r6, #1
 8008066:	e7f2      	b.n	800804e <__libc_init_array+0x1e>
 8008068:	08008258 	.word	0x08008258
 800806c:	08008258 	.word	0x08008258
 8008070:	08008258 	.word	0x08008258
 8008074:	0800825c 	.word	0x0800825c

08008078 <memcpy>:
 8008078:	440a      	add	r2, r1
 800807a:	4291      	cmp	r1, r2
 800807c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008080:	d100      	bne.n	8008084 <memcpy+0xc>
 8008082:	4770      	bx	lr
 8008084:	b510      	push	{r4, lr}
 8008086:	f811 4b01 	ldrb.w	r4, [r1], #1
 800808a:	4291      	cmp	r1, r2
 800808c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008090:	d1f9      	bne.n	8008086 <memcpy+0xe>
 8008092:	bd10      	pop	{r4, pc}

08008094 <_init>:
 8008094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008096:	bf00      	nop
 8008098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800809a:	bc08      	pop	{r3}
 800809c:	469e      	mov	lr, r3
 800809e:	4770      	bx	lr

080080a0 <_fini>:
 80080a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080a2:	bf00      	nop
 80080a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080a6:	bc08      	pop	{r3}
 80080a8:	469e      	mov	lr, r3
 80080aa:	4770      	bx	lr
